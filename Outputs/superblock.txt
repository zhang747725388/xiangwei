; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\superblock.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\superblock.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP\GPS -I..\BSP\Sim900A -I..\BSP -I..\BSP\IWDG -I..\BSP\BlueTooth -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\BSP\Adxl345 -I..\BSP\TL718 -I..\BSP\PAM8403 -I..\BSP\W25X16 -I..\BSP\USB -I..\App\Debug -I..\App\SelfCheck -I..\App\GPSTask -I..\App\OBD -I..\App\Mems -I..\App\Voltage -I..\App\LKClient -I..\App\Paramlist -I..\App\ATC30 -I..\App -I..\BSP\mpu6050 -I..\App\mid-proc -I..\App\mpu6050Task -I..\BSP\dmp -I..\BSP\Bluetooth -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\superblock.crf ..\App\LKClient\superblock.c]
                          THUMB

                          AREA ||i.Flash_EraseSuperBlock||, CODE, READONLY, ALIGN=2

                  Flash_EraseSuperBlock PROC
;;;78     ----------------------------------------------------------------------------------*/
;;;79     void Flash_EraseSuperBlock(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81     	FLASH_Unlock();
000002  f7fffffe          BL       FLASH_Unlock
;;;82     	FLASH_WaitForLastOperation(5000);	
000006  f2413088          MOV      r0,#0x1388
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;83     
;;;84     	FLASH_ErasePage(SUPER_BLOCK_ADDR);
00000e  4807              LDR      r0,|L1.44|
000010  f7fffffe          BL       FLASH_ErasePage
;;;85     	FLASH_WaitForLastOperation(5000);	
000014  f2413088          MOV      r0,#0x1388
000018  f7fffffe          BL       FLASH_WaitForLastOperation
;;;86     
;;;87     	FLASH_Lock();
00001c  f7fffffe          BL       FLASH_Lock
;;;88     	FLASH_WaitForLastOperation(5000);	
000020  f2413088          MOV      r0,#0x1388
000024  f7fffffe          BL       FLASH_WaitForLastOperation
;;;89     }
000028  bd10              POP      {r4,pc}
;;;90     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x0802c000

                          AREA ||i.Flash_ReadSuperBlock||, CODE, READONLY, ALIGN=2

                  Flash_ReadSuperBlock PROC
;;;34     ----------------------------------------------------------------------------------*/
;;;35     void Flash_ReadSuperBlock(SUPER_BLOCK * sb)
000000  b510              PUSH     {r4,lr}
;;;36     {
000002  4604              MOV      r4,r0
;;;37     	RMLStrcpy((BYTE *)(sb),(BYTE *)(SUPER_BLOCK_ADDR),sizeof(SUPER_BLOCK));
000004  2210              MOVS     r2,#0x10
000006  4902              LDR      r1,|L2.16|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       RMLStrcpy
;;;38     }
00000e  bd10              POP      {r4,pc}
;;;39     
                          ENDP

                  |L2.16|
                          DCD      0x0802c000

                          AREA ||i.Flash_WriteSuperBlock||, CODE, READONLY, ALIGN=2

                  Flash_WriteSuperBlock PROC
;;;48     ----------------------------------------------------------------------------------*/
;;;49     void Flash_WriteSuperBlock(SUPER_BLOCK * sb)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {	    
000002  4605              MOV      r5,r0
;;;51     	INT8U i;
;;;52     	INT16U * p_sb;	
;;;53     	FLASH_Unlock();
000004  f7fffffe          BL       FLASH_Unlock
;;;54     	FLASH_WaitForLastOperation(5000);
000008  f2413088          MOV      r0,#0x1388
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;55     
;;;56     	p_sb = (INT16U *)sb;	    	
000010  462e              MOV      r6,r5
;;;57     	FLASH_ErasePage(SUPER_BLOCK_ADDR);
000012  480f              LDR      r0,|L3.80|
000014  f7fffffe          BL       FLASH_ErasePage
;;;58     	FLASH_WaitForLastOperation(5000);
000018  f2413088          MOV      r0,#0x1388
00001c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;59     	for( i = 0 ; i < 8 ; i++ )
000020  2400              MOVS     r4,#0
000022  e00c              B        |L3.62|
                  |L3.36|
;;;60     	{		    
;;;61     		FLASH_ProgramHalfWord(SUPER_BLOCK_ADDR+(i*2) , * p_sb);
000024  8831              LDRH     r1,[r6,#0]
000026  4a0a              LDR      r2,|L3.80|
000028  eb020044          ADD      r0,r2,r4,LSL #1
00002c  f7fffffe          BL       FLASH_ProgramHalfWord
;;;62     		FLASH_WaitForLastOperation(5000);	
000030  f2413088          MOV      r0,#0x1388
000034  f7fffffe          BL       FLASH_WaitForLastOperation
;;;63     		p_sb++;
000038  1cb6              ADDS     r6,r6,#2
00003a  1c60              ADDS     r0,r4,#1              ;59
00003c  b2c4              UXTB     r4,r0                 ;59
                  |L3.62|
00003e  2c08              CMP      r4,#8                 ;59
000040  dbf0              BLT      |L3.36|
;;;64     	}
;;;65     		
;;;66     	FLASH_Lock();
000042  f7fffffe          BL       FLASH_Lock
;;;67     	FLASH_WaitForLastOperation(5000);	
000046  f2413088          MOV      r0,#0x1388
00004a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;68     }
00004e  bd70              POP      {r4-r6,pc}
;;;69     
                          ENDP

                  |L3.80|
                          DCD      0x0802c000

                          AREA ||i.GetUpdateSoftCheckWord||, CODE, READONLY, ALIGN=1

                  GetUpdateSoftCheckWord PROC
;;;152    ----------------------------------------------------------------------------------*/
;;;153    INT16U GetUpdateSoftCheckWord(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;154    {
;;;155    	SUPER_BLOCK Sb_Temp;
;;;156    	Flash_ReadSuperBlock(&Sb_Temp);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       Flash_ReadSuperBlock
;;;157    	return (Sb_Temp.FW_VerifyWord);
000008  f8bd000c          LDRH     r0,[sp,#0xc]
;;;158    }
00000c  b004              ADD      sp,sp,#0x10
00000e  bd10              POP      {r4,pc}
;;;159    
                          ENDP


                          AREA ||i.GetUpdateSoftSpace||, CODE, READONLY, ALIGN=1

                  GetUpdateSoftSpace PROC
;;;136    ----------------------------------------------------------------------------------*/
;;;137    INT32U GetUpdateSoftSpace(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;138    {
;;;139    	SUPER_BLOCK Sb_Temp;
;;;140    	Flash_ReadSuperBlock(&Sb_Temp);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       Flash_ReadSuperBlock
;;;141    	return (Sb_Temp.FW_Size);
000008  9802              LDR      r0,[sp,#8]
;;;142    }
00000a  b004              ADD      sp,sp,#0x10
00000c  bd10              POP      {r4,pc}
;;;143    
                          ENDP


                          AREA ||i.Is_ATC30UpdateOK||, CODE, READONLY, ALIGN=1

                  Is_ATC30UpdateOK PROC
;;;117    ----------------------------------------------------------------------------------*/
;;;118    BOOLEAN Is_ATC30UpdateOK(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;119    {
;;;120    	SUPER_BLOCK Sb_Temp;
;;;121    	Flash_ReadSuperBlock(&Sb_Temp);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       Flash_ReadSuperBlock
;;;122    	if(Sb_Temp.LockWord == 0x5599 && Sb_Temp.bUpdateOK == 0x01){
000008  f8bd000e          LDRH     r0,[sp,#0xe]
00000c  f5a041aa          SUB      r1,r0,#0x5500
000010  3999              SUBS     r1,r1,#0x99
000012  d105              BNE      |L6.32|
000014  f89d0001          LDRB     r0,[sp,#1]
000018  2801              CMP      r0,#1
00001a  d101              BNE      |L6.32|
                  |L6.28|
;;;123    		return (bTRUE);
;;;124    	}
;;;125    	return (bFALSE);
;;;126    }
00001c  b004              ADD      sp,sp,#0x10
00001e  bd10              POP      {r4,pc}
                  |L6.32|
000020  2000              MOVS     r0,#0                 ;125
000022  e7fb              B        |L6.28|
;;;127    
                          ENDP


                          AREA ||i.Is_Need_ResetToUpdate||, CODE, READONLY, ALIGN=1

                  Is_Need_ResetToUpdate PROC
;;;99     ----------------------------------------------------------------------------------*/
;;;100    BOOLEAN Is_Need_ResetToUpdate(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;101    {
;;;102    	SUPER_BLOCK Sb_Temp;
;;;103    	Flash_ReadSuperBlock(&Sb_Temp);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       Flash_ReadSuperBlock
;;;104    	if(Sb_Temp.LockWord == 0x5599 && Sb_Temp.bNewUpdateRequest == 0x01){
000008  f8bd000e          LDRH     r0,[sp,#0xe]
00000c  f5a041aa          SUB      r1,r0,#0x5500
000010  3999              SUBS     r1,r1,#0x99
000012  d105              BNE      |L7.32|
000014  f89d0000          LDRB     r0,[sp,#0]
000018  2801              CMP      r0,#1
00001a  d101              BNE      |L7.32|
                  |L7.28|
;;;105    		return (bTRUE);
;;;106    	}
;;;107    	return (bFALSE);
;;;108    }
00001c  b004              ADD      sp,sp,#0x10
00001e  bd10              POP      {r4,pc}
                  |L7.32|
000020  2000              MOVS     r0,#0                 ;107
000022  e7fb              B        |L7.28|
;;;109    
                          ENDP


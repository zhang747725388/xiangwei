; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\lkclient.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\lkclient.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP\GPS -I..\BSP\Sim900A -I..\BSP -I..\BSP\IWDG -I..\BSP\BlueTooth -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\BSP\Adxl345 -I..\BSP\TL718 -I..\BSP\PAM8403 -I..\BSP\W25X16 -I..\BSP\USB -I..\App\Debug -I..\App\SelfCheck -I..\App\GPSTask -I..\App\OBD -I..\App\Mems -I..\App\Voltage -I..\App\LKClient -I..\App\Paramlist -I..\App\ATC30 -I..\App -I..\BSP\mpu6050 -I..\App\mid-proc -I..\App\mpu6050Task -I..\BSP\dmp -I..\BSP\Bluetooth -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\lkclient.crf ..\App\LKClient\lkclient.c]
                          THUMB

                          AREA ||i.Analyze_HeartAckMsgBody||, CODE, READONLY, ALIGN=1

                  Analyze_HeartAckMsgBody PROC
;;;329    /* 处理心跳响应 */
;;;330    void Analyze_HeartAckMsgBody(BYTE * MsgBody , INT16U MsgBodyLen)
000000  4770              BX       lr
;;;331    {
;;;332    
;;;333    	
;;;334    }
;;;335    
                          ENDP


                          AREA ||i.Analyze_LogAckMsgBody||, CODE, READONLY, ALIGN=2

                  Analyze_LogAckMsgBody PROC
;;;501    /* 处理登陆响应 */
;;;502    void Analyze_LogAckMsgBody(BYTE * MsgBody , INT16U MsgBodyLen)
000000  b570              PUSH     {r4-r6,lr}
;;;503    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;504    	switch ( * MsgBody )
000006  7820              LDRB     r0,[r4,#0]
000008  2805              CMP      r0,#5
00000a  d225              BCS      |L2.88|
00000c  e8dff000          TBB      [pc,r0]
000010  03070b0f          DCB      0x03,0x07,0x0b,0x0f
000014  1300              DCB      0x13,0x00
;;;505    	{
;;;506    		// 登陆成功
;;;507    		case 0x00:
;;;508    			LogSta = 2;
000016  2002              MOVS     r0,#2
000018  4911              LDR      r1,|L2.96|
00001a  7008              STRB     r0,[r1,#0]
;;;509    			break;
00001c  e01d              B        |L2.90|
;;;510    		
;;;511    		// 非法IMSI	
;;;512    		case 0x01:
;;;513    			LogSta = 3;
00001e  2003              MOVS     r0,#3
000020  490f              LDR      r1,|L2.96|
000022  7008              STRB     r0,[r1,#0]
;;;514    			break;
000024  e019              B        |L2.90|
;;;515    
;;;516    		// 非法黑匣子编号
;;;517    		case 0x02:
;;;518    			LogSta = 3;
000026  2003              MOVS     r0,#3
000028  490d              LDR      r1,|L2.96|
00002a  7008              STRB     r0,[r1,#0]
;;;519    			break;
00002c  e015              B        |L2.90|
;;;520    
;;;521    		// 登陆受限
;;;522    		case 0x03:
;;;523    			LogSta = 3;
00002e  2003              MOVS     r0,#3
000030  490b              LDR      r1,|L2.96|
000032  7008              STRB     r0,[r1,#0]
;;;524    			break;
000034  e011              B        |L2.90|
;;;525    		
;;;526    		// 需要固件升级
;;;527    		case 0x04:
;;;528    			/* 如果已经有更新程序存在了 */
;;;529    			if( (Is_Need_ResetToUpdate() == bTRUE) ){
000036  f7fffffe          BL       Is_Need_ResetToUpdate
00003a  2801              CMP      r0,#1
00003c  d103              BNE      |L2.70|
;;;530    				LogSta = 2;
00003e  2002              MOVS     r0,#2
000040  4907              LDR      r1,|L2.96|
000042  7008              STRB     r0,[r1,#0]
000044  e007              B        |L2.86|
                  |L2.70|
;;;531    			}else{
;;;532    				LogSta = 1;
000046  2001              MOVS     r0,#1
000048  4905              LDR      r1,|L2.96|
00004a  7008              STRB     r0,[r1,#0]
;;;533    				SoftUpdateCmdAnalyze( MsgBody+1, MsgBodyLen-1);			    
00004c  1e68              SUBS     r0,r5,#1
00004e  b281              UXTH     r1,r0
000050  1c60              ADDS     r0,r4,#1
000052  f7fffffe          BL       SoftUpdateCmdAnalyze
                  |L2.86|
;;;534    			}	
;;;535    			break;
000056  e000              B        |L2.90|
                  |L2.88|
;;;536    
;;;537    		default:
;;;538    
;;;539    			break;
000058  bf00              NOP      
                  |L2.90|
00005a  bf00              NOP                            ;509
;;;540    	}
;;;541    }
00005c  bd70              POP      {r4-r6,pc}
;;;542    
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      LogSta

                          AREA ||i.Analyze_ParamListSet||, CODE, READONLY, ALIGN=2

                  Analyze_ParamListSet PROC
;;;337    /* 处理终端参数设置 */
;;;338    void Analyze_ParamListSet(BYTE * MsgBody , INT16U MsgBodyLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;339    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;340    	INT16U Tag = 0;
000008  2600              MOVS     r6,#0
;;;341    	INT8U  Len = 0;
00000a  2700              MOVS     r7,#0
;;;342    	INT32U Value = 0;
00000c  46b0              MOV      r8,r6
;;;343    
;;;344        while(MsgBodyLen != 0){
00000e  e02e              B        |L3.110|
                  |L3.16|
;;;345    		Tag = 0;
000010  2600              MOVS     r6,#0
;;;346    		Len = 0;
000012  2700              MOVS     r7,#0
;;;347    		Value = 0;
000014  46b0              MOV      r8,r6
;;;348    
;;;349    		Tag |= * MsgBody++ << 8;
000016  f8141b01          LDRB     r1,[r4],#1
00001a  ea462601          ORR      r6,r6,r1,LSL #8
;;;350    		Tag |= * MsgBody++;
00001e  f8140b01          LDRB     r0,[r4],#1
000022  4306              ORRS     r6,r6,r0
;;;351    	
;;;352    		Len = * MsgBody++;	
000024  f8147b01          LDRB     r7,[r4],#1
;;;353    					
;;;354    		switch(Tag)
000028  f5a67080          SUB      r0,r6,#0x100
00002c  3803              SUBS     r0,#3
00002e  d002              BEQ      |L3.54|
000030  2801              CMP      r0,#1
000032  d117              BNE      |L3.100|
000034  e00b              B        |L3.78|
                  |L3.54|
;;;355    		{
;;;356    		    /* GPS数据上报频率 */
;;;357    			case (0x0103):
;;;358    				if(Len != 1){
000036  2f01              CMP      r7,#1
000038  d001              BEQ      |L3.62|
                  |L3.58|
;;;359    					return;
;;;360    				}
;;;361    				Value = * MsgBody++;
;;;362    				Param_GPS_Report_Time = Value; 
;;;363    				Param_Backup();				
;;;364    				break;
;;;365    
;;;366    		    /* OBD数据上报频率 */				
;;;367    			case (0x0104):
;;;368    				if(Len != 1){
;;;369    					return;
;;;370    				}
;;;371    				Value = * MsgBody++;
;;;372    				Param_OBD_Report_Time = Value; 		
;;;373    				Param_Backup();								
;;;374    				break;
;;;375    				
;;;376    			default:
;;;377    				break;	
;;;378    		}
;;;379    		MsgBodyLen -= (Len + 3);
;;;380    	}
;;;381    }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L3.62|
00003e  f8148b01          LDRB     r8,[r4],#1            ;361
000042  480d              LDR      r0,|L3.120|
000044  f8c08000          STR      r8,[r0,#0]            ;362  ; Param_GPS_Report_Time
000048  f7fffffe          BL       Param_Backup
00004c  e00b              B        |L3.102|
                  |L3.78|
00004e  2f01              CMP      r7,#1                 ;368
000050  d000              BEQ      |L3.84|
000052  e7f2              B        |L3.58|
                  |L3.84|
000054  f8148b01          LDRB     r8,[r4],#1            ;371
000058  4808              LDR      r0,|L3.124|
00005a  f8c08000          STR      r8,[r0,#0]            ;372  ; Param_OBD_Report_Time
00005e  f7fffffe          BL       Param_Backup
000062  e000              B        |L3.102|
                  |L3.100|
000064  bf00              NOP                            ;377
                  |L3.102|
000066  bf00              NOP                            ;364
000068  1cf8              ADDS     r0,r7,#3              ;379
00006a  1a28              SUBS     r0,r5,r0              ;379
00006c  b285              UXTH     r5,r0                 ;379
                  |L3.110|
00006e  2d00              CMP      r5,#0                 ;344
000070  d1ce              BNE      |L3.16|
000072  bf00              NOP      
000074  e7e1              B        |L3.58|
;;;382    
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      Param_GPS_Report_Time
                  |L3.124|
                          DCD      Param_OBD_Report_Time

                          AREA ||i.Analyze_ServerPacket||, CODE, READONLY, ALIGN=2

                  Analyze_ServerPacket PROC
;;;544    /* 处理接受到平台信息 */
;;;545    void Analyze_ServerPacket(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;546    {	
000004  b08a              SUB      sp,sp,#0x28
;;;547    	INT16U u16DataLength = 0x0000;								// 报文总长度
000006  2400              MOVS     r4,#0
;;;548    	INT16U u16CommandID = 0x0000;								  // 命令字
000008  2600              MOVS     r6,#0
;;;549    	INT16U u16SerialNum = 0x0000;								  // 流水号
00000a  2700              MOVS     r7,#0
;;;550    
;;;551    	/*打印接收到的数据*/
;;;552    	DEBUG_LOCATION();
00000c  bf00              NOP      
00000e  f44f750a          MOV      r5,#0x228
000012  a083              ADR      r0,|L4.544|
000014  f7fffffe          BL       DebugUart_Putstr
000018  a083              ADR      r0,|L4.552|
00001a  f7fffffe          BL       DebugUart_Putstr
00001e  a089              ADR      r0,|L4.580|
000020  f7fffffe          BL       DebugUart_Putstr
000024  a088              ADR      r0,|L4.584|
000026  f7fffffe          BL       DebugUart_Putstr
00002a  f44f707a          MOV      r0,#0x3e8
00002e  fb95f0f0          SDIV     r0,r5,r0
000032  210a              MOVS     r1,#0xa
000034  fb90f2f1          SDIV     r2,r0,r1
000038  fb010012          MLS      r0,r1,r2,r0
00003c  3030              ADDS     r0,r0,#0x30
00003e  f00008ff          AND      r8,r0,#0xff
000042  4640              MOV      r0,r8
000044  f7fffffe          BL       DebugUart_Putchar
000048  2064              MOVS     r0,#0x64
00004a  fb95f0f0          SDIV     r0,r5,r0
00004e  210a              MOVS     r1,#0xa
000050  fb90f2f1          SDIV     r2,r0,r1
000054  fb010012          MLS      r0,r1,r2,r0
000058  3030              ADDS     r0,r0,#0x30
00005a  f00008ff          AND      r8,r0,#0xff
00005e  4640              MOV      r0,r8
000060  f7fffffe          BL       DebugUart_Putchar
000064  200a              MOVS     r0,#0xa
000066  fb95f0f0          SDIV     r0,r5,r0
00006a  210a              MOVS     r1,#0xa
00006c  fb90f2f1          SDIV     r2,r0,r1
000070  fb010012          MLS      r0,r1,r2,r0
000074  3030              ADDS     r0,r0,#0x30
000076  f00008ff          AND      r8,r0,#0xff
00007a  4640              MOV      r0,r8
00007c  f7fffffe          BL       DebugUart_Putchar
000080  200a              MOVS     r0,#0xa
000082  fb95f1f0          SDIV     r1,r5,r0
000086  fb005011          MLS      r0,r0,r1,r5
00008a  3030              ADDS     r0,r0,#0x30
00008c  f00008ff          AND      r8,r0,#0xff
000090  4640              MOV      r0,r8
000092  f7fffffe          BL       DebugUart_Putchar
000096  a06e              ADR      r0,|L4.592|
000098  f7fffffe          BL       DebugUart_Putstr
00009c  bf00              NOP      
;;;553    	DebugUart_Putstr("\r\n********************receive************************\r\n");
00009e  a06d              ADR      r0,|L4.596|
0000a0  f7fffffe          BL       DebugUart_Putstr
;;;554    	do 
0000a4  bf00              NOP      
;;;555    	{
;;;556    		char hexBuf[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
0000a6  a379              ADR      r3,|L4.652|
0000a8  e9d31200          LDRD     r1,r2,[r3,#0]
0000ac  e9d30302          LDRD     r0,r3,[r3,#8]
0000b0  e9cd0308          STRD     r0,r3,[sp,#0x20]
0000b4  e9cd1206          STRD     r1,r2,[sp,#0x18]
;;;557    		int i;
;;;558    		
;;;559    		for(i=0; i<ServerDataLen; i++)
0000b8  2500              MOVS     r5,#0
0000ba  e010              B        |L4.222|
                  |L4.188|
;;;560    		{
;;;561    			DebugUart_Putchar(hexBuf[(caServerData[i]>>4) & 0xf]);
0000bc  4977              LDR      r1,|L4.668|
0000be  5d49              LDRB     r1,[r1,r5]
0000c0  aa06              ADD      r2,sp,#0x18
0000c2  eb021111          ADD      r1,r2,r1,LSR #4
0000c6  7808              LDRB     r0,[r1,#0]
0000c8  f7fffffe          BL       DebugUart_Putchar
;;;562    			DebugUart_Putchar(hexBuf[(caServerData[i]) & 0xf]);
0000cc  4973              LDR      r1,|L4.668|
0000ce  5d49              LDRB     r1,[r1,r5]
0000d0  f001010f          AND      r1,r1,#0xf
0000d4  aa06              ADD      r2,sp,#0x18
0000d6  5c50              LDRB     r0,[r2,r1]
0000d8  f7fffffe          BL       DebugUart_Putchar
0000dc  1c6d              ADDS     r5,r5,#1              ;559
                  |L4.222|
0000de  4870              LDR      r0,|L4.672|
0000e0  6800              LDR      r0,[r0,#0]            ;559  ; ServerDataLen
0000e2  4285              CMP      r5,r0                 ;559
0000e4  d3ea              BCC      |L4.188|
;;;563    		}
;;;564    	}while(0);
0000e6  bf00              NOP      
;;;565    	DebugUart_Putstr("\r\n********************end*************************\r\n");
0000e8  a06e              ADR      r0,|L4.676|
0000ea  f7fffffe          BL       DebugUart_Putstr
;;;566    	
;;;567    	u16DataLength |= caServerData[DATALENGTH_LOCATION] << 8;	// 取得报文总长度
0000ee  486b              LDR      r0,|L4.668|
0000f0  7880              LDRB     r0,[r0,#2]  ; caServerData
0000f2  ea442400          ORR      r4,r4,r0,LSL #8
;;;568    	u16DataLength |= caServerData[DATALENGTH_LOCATION+1];
0000f6  4869              LDR      r0,|L4.668|
0000f8  78c0              LDRB     r0,[r0,#3]  ; caServerData
0000fa  4304              ORRS     r4,r4,r0
;;;569    
;;;570    	u16CommandID  |= caServerData[COMMANDID_LOCATION] << 8;		// 取得命令字
0000fc  4867              LDR      r0,|L4.668|
0000fe  7900              LDRB     r0,[r0,#4]  ; caServerData
000100  ea462600          ORR      r6,r6,r0,LSL #8
;;;571    	u16CommandID  |= caServerData[COMMANDID_LOCATION+1];
000104  4865              LDR      r0,|L4.668|
000106  7940              LDRB     r0,[r0,#5]  ; caServerData
000108  4306              ORRS     r6,r6,r0
;;;572    																    
;;;573    	u16SerialNum  |= caServerData[SERIALNUM_LOCATION] << 8;		// 取得流水号
00010a  4864              LDR      r0,|L4.668|
00010c  7980              LDRB     r0,[r0,#6]  ; caServerData
00010e  ea472700          ORR      r7,r7,r0,LSL #8
;;;574    	u16SerialNum  |= caServerData[SERIALNUM_LOCATION+1];
000112  4862              LDR      r0,|L4.668|
000114  79c0              LDRB     r0,[r0,#7]  ; caServerData
000116  4307              ORRS     r7,r7,r0
;;;575    
;;;576    	if ( (u16DataLength < 12+3 ) ||  (u16DataLength > 4096) ||  (u16DataLength != ServerDataLen) ){		// 消息长度不正确
000118  2c0f              CMP      r4,#0xf
00011a  db06              BLT      |L4.298|
00011c  f5b45f80          CMP      r4,#0x1000
000120  dc03              BGT      |L4.298|
000122  485f              LDR      r0,|L4.672|
000124  6800              LDR      r0,[r0,#0]  ; ServerDataLen
000126  4284              CMP      r4,r0
000128  d002              BEQ      |L4.304|
                  |L4.298|
;;;577    		return ;
;;;578    	}
;;;579    	else if ( u16DataLength > 12+3 ){							// 有消息体，需要进行校验
;;;580    		if ( CheckOut_DataAvlb(&caServerData[12] , u16DataLength-12-2) == -1 ){						 
;;;581    			return ;	
;;;582    		}
;;;583    	}
;;;584    
;;;585    	switch ( u16CommandID )
;;;586    	{   
;;;587    		/* 终端登录响应 */
;;;588    		case (0x8002):
;;;589    			Analyze_LogAckMsgBody(&caServerData[12],u16DataLength-15);
;;;590    			break;
;;;591    
;;;592    		/* 终端注销响应 */
;;;593    		case (0x8003):
;;;594    			LogOutOK = bTRUE;
;;;595    			break;
;;;596    
;;;597    		/* 终端心跳响应 */
;;;598    		case (0x8004):
;;;599    		    Analyze_HeartAckMsgBody(&caServerData[12],u16DataLength-15);
;;;600    			ConfirmOK = bTRUE;
;;;601    			break;
;;;602    		
;;;603    		/* 终端GPS响应 */
;;;604    		case (0x800D):
;;;605    			ConfirmOK = bTRUE;
;;;606    			break;
;;;607    		
;;;608    		/* 终端OBD响应 */
;;;609    		case (0x8012):
;;;610    			ConfirmOK = bTRUE;
;;;611    			break;
;;;612    		
;;;613    		/* 终端告警响应 */
;;;614    		case (0x8035):
;;;615    			ConfirmOK = bTRUE;
;;;616    		    break;
;;;617    
;;;618    		/* 终端OBD阈值报警响应 */
;;;619    		case (0x8039):
;;;620    			ConfirmOK = bTRUE;
;;;621    			break;
;;;622    
;;;623    		/* 状态上报响应 */
;;;624    		case (0x8036):
;;;625    			ConfirmOK = bTRUE;
;;;626    		    break;
;;;627    
;;;628    		/* 平台下发配置参数 */
;;;629    		case (0x0031):
;;;630    			Analyze_ParamListSet(&caServerData[12],u16DataLength-15);
;;;631    			if(1){
;;;632    				BYTE Msg[40];
;;;633    				LKClient_PackParamListAck(Msg,u16SerialNum);
;;;634    				CQueue_Enter(Msg,15,bFALSE);
;;;635    			}
;;;636    			break;
;;;637    		
;;;638    		/* 收到更新固件包 */	
;;;639    		case (0x8041):
;;;640    			SoftPackageAnalyze(&caServerData[12],u16DataLength-15);
;;;641    			CommTimes = 0;
;;;642    			break;			
;;;643    
;;;644    		default :
;;;645    			break;
;;;646    	}
;;;647    
;;;648    }
00012a  b00a              ADD      sp,sp,#0x28
00012c  e8bd81f0          POP      {r4-r8,pc}
                  |L4.304|
000130  2c0f              CMP      r4,#0xf               ;579
000132  dd08              BLE      |L4.326|
000134  f1a4010e          SUB      r1,r4,#0xe            ;580
000138  4858              LDR      r0,|L4.668|
00013a  300c              ADDS     r0,r0,#0xc            ;580
00013c  f7fffffe          BL       CheckOut_DataAvlb
000140  1c40              ADDS     r0,r0,#1              ;580
000142  d100              BNE      |L4.326|
000144  e7f1              B        |L4.298|
                  |L4.326|
000146  f2480112          MOV      r1,#0x8012            ;585
00014a  1a70              SUBS     r0,r6,r1              ;585
00014c  428e              CMP      r6,r1                 ;585
00014e  d037              BEQ      |L4.448|
000150  dc12              BGT      |L4.376|
000152  f2480103          MOV      r1,#0x8003            ;585
000156  eba60001          SUB      r0,r6,r1              ;585
00015a  428e              CMP      r6,r1                 ;585
00015c  d01d              BEQ      |L4.410|
00015e  dc06              BGT      |L4.366|
000160  2e31              CMP      r6,#0x31              ;585
000162  d03d              BEQ      |L4.480|
000164  f5a64000          SUB      r0,r6,#0x8000         ;585
000168  3802              SUBS     r0,#2                 ;585
00016a  d155              BNE      |L4.536|
00016c  e00d              B        |L4.394|
                  |L4.366|
00016e  2801              CMP      r0,#1                 ;585
000170  d017              BEQ      |L4.418|
000172  280a              CMP      r0,#0xa               ;585
000174  d150              BNE      |L4.536|
000176  e01f              B        |L4.440|
                  |L4.376|
000178  2823              CMP      r0,#0x23              ;585
00017a  d025              BEQ      |L4.456|
00017c  2824              CMP      r0,#0x24              ;585
00017e  d02b              BEQ      |L4.472|
000180  2827              CMP      r0,#0x27              ;585
000182  d025              BEQ      |L4.464|
000184  282f              CMP      r0,#0x2f              ;585
000186  d147              BNE      |L4.536|
000188  e03b              B        |L4.514|
                  |L4.394|
00018a  f1a4000f          SUB      r0,r4,#0xf            ;589
00018e  b281              UXTH     r1,r0                 ;589
000190  4842              LDR      r0,|L4.668|
000192  300c              ADDS     r0,r0,#0xc            ;589
000194  f7fffffe          BL       Analyze_LogAckMsgBody
000198  e03f              B        |L4.538|
                  |L4.410|
00019a  2001              MOVS     r0,#1                 ;594
00019c  494f              LDR      r1,|L4.732|
00019e  7008              STRB     r0,[r1,#0]            ;594
0001a0  e03b              B        |L4.538|
                  |L4.418|
0001a2  f1a4000f          SUB      r0,r4,#0xf            ;599
0001a6  b281              UXTH     r1,r0                 ;599
0001a8  483c              LDR      r0,|L4.668|
0001aa  300c              ADDS     r0,r0,#0xc            ;599
0001ac  f7fffffe          BL       Analyze_HeartAckMsgBody
0001b0  2001              MOVS     r0,#1                 ;600
0001b2  494b              LDR      r1,|L4.736|
0001b4  7008              STRB     r0,[r1,#0]            ;600
0001b6  e030              B        |L4.538|
                  |L4.440|
0001b8  2001              MOVS     r0,#1                 ;605
0001ba  4949              LDR      r1,|L4.736|
0001bc  7008              STRB     r0,[r1,#0]            ;605
0001be  e02c              B        |L4.538|
                  |L4.448|
0001c0  2001              MOVS     r0,#1                 ;610
0001c2  4947              LDR      r1,|L4.736|
0001c4  7008              STRB     r0,[r1,#0]            ;610
0001c6  e028              B        |L4.538|
                  |L4.456|
0001c8  2001              MOVS     r0,#1                 ;615
0001ca  4945              LDR      r1,|L4.736|
0001cc  7008              STRB     r0,[r1,#0]            ;615
0001ce  e024              B        |L4.538|
                  |L4.464|
0001d0  2001              MOVS     r0,#1                 ;620
0001d2  4943              LDR      r1,|L4.736|
0001d4  7008              STRB     r0,[r1,#0]            ;620
0001d6  e020              B        |L4.538|
                  |L4.472|
0001d8  2001              MOVS     r0,#1                 ;625
0001da  4941              LDR      r1,|L4.736|
0001dc  7008              STRB     r0,[r1,#0]            ;625
0001de  e01c              B        |L4.538|
                  |L4.480|
0001e0  f1a4000f          SUB      r0,r4,#0xf            ;630
0001e4  b281              UXTH     r1,r0                 ;630
0001e6  482d              LDR      r0,|L4.668|
0001e8  300c              ADDS     r0,r0,#0xc            ;630
0001ea  f7fffffe          BL       Analyze_ParamListSet
0001ee  4639              MOV      r1,r7                 ;633
0001f0  4668              MOV      r0,sp                 ;633
0001f2  f7fffffe          BL       LKClient_PackParamListAck
0001f6  2200              MOVS     r2,#0                 ;634
0001f8  210f              MOVS     r1,#0xf               ;634
0001fa  4668              MOV      r0,sp                 ;634
0001fc  f7fffffe          BL       CQueue_Enter
000200  e00b              B        |L4.538|
                  |L4.514|
000202  f1a4000f          SUB      r0,r4,#0xf            ;640
000206  b281              UXTH     r1,r0                 ;640
000208  4824              LDR      r0,|L4.668|
00020a  300c              ADDS     r0,r0,#0xc            ;640
00020c  f7fffffe          BL       SoftPackageAnalyze
000210  2000              MOVS     r0,#0                 ;641
000212  4934              LDR      r1,|L4.740|
000214  7008              STRB     r0,[r1,#0]            ;641
000216  e000              B        |L4.538|
                  |L4.536|
000218  bf00              NOP                            ;645
                  |L4.538|
00021a  bf00              NOP                            ;590
00021c  bf00              NOP      
00021e  e784              B        |L4.298|
;;;649    
                          ENDP

                  |L4.544|
000220  5b46696c          DCB      "[File:",0
000224  653a00  
000227  00                DCB      0
                  |L4.552|
000228  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
00022c  70705c4c
000230  4b436c69
000234  656e745c
000238  6c6b636c
00023c  69656e74
000240  2e6300  
000243  00                DCB      0
                  |L4.580|
000244  202000            DCB      "  ",0
000247  00                DCB      0
                  |L4.584|
000248  6c696e65          DCB      "line:",0
00024c  3a00    
00024e  00                DCB      0
00024f  00                DCB      0
                  |L4.592|
000250  5d0d0a00          DCB      "]\r\n",0
                  |L4.596|
000254  0d0a2a2a          DCB      "\r\n********************receive************************"
000258  2a2a2a2a
00025c  2a2a2a2a
000260  2a2a2a2a
000264  2a2a2a2a
000268  2a2a7265
00026c  63656976
000270  652a2a2a
000274  2a2a2a2a
000278  2a2a2a2a
00027c  2a2a2a2a
000280  2a2a2a2a
000284  2a2a2a2a
000288  2a      
000289  0d0a00            DCB      "\r\n",0
                  |L4.652|
00028c  30313233          DCB      "0123456789ABCDEF"
000290  34353637
000294  38394142
000298  43444546
                  |L4.668|
                          DCD      caServerData
                  |L4.672|
                          DCD      ServerDataLen
                  |L4.676|
0002a4  0d0a2a2a          DCB      "\r\n********************end*************************\r\n"
0002a8  2a2a2a2a
0002ac  2a2a2a2a
0002b0  2a2a2a2a
0002b4  2a2a2a2a
0002b8  2a2a656e
0002bc  642a2a2a
0002c0  2a2a2a2a
0002c4  2a2a2a2a
0002c8  2a2a2a2a
0002cc  2a2a2a2a
0002d0  2a2a2a2a
0002d4  2a2a0d0a
0002d8  00                DCB      0
0002d9  00                DCB      0
0002da  00                DCB      0
0002db  00                DCB      0
                  |L4.732|
                          DCD      LogOutOK
                  |L4.736|
                          DCD      ConfirmOK
                  |L4.740|
                          DCD      CommTimes

                          AREA ||i.CheckOut_DataAvlb||, CODE, READONLY, ALIGN=1

                  CheckOut_DataAvlb PROC
;;;282    /* 检查CRC校验 */
;;;283    static int CheckOut_DataAvlb(BYTE *cpData, int nDataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;284    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;285    	// 进行CRC校验
;;;286    	if ( Calculate_CRC(cpData, nDataLength) == 0 ){
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       Calculate_CRC
00000e  b908              CBNZ     r0,|L5.20|
;;;287    		return 1;
000010  2001              MOVS     r0,#1
                  |L5.18|
;;;288    	}
;;;289    	else{
;;;290    		return -1;
;;;291    	}	
;;;292    }
000012  bd70              POP      {r4-r6,pc}
                  |L5.20|
000014  f04f30ff          MOV      r0,#0xffffffff        ;290
000018  e7fb              B        |L5.18|
;;;293    
                          ENDP


                          AREA ||i.Clr_ClientOverSta||, CODE, READONLY, ALIGN=2

                  Clr_ClientOverSta PROC
;;;1348   
;;;1349   void Clr_ClientOverSta(void)
000000  2000              MOVS     r0,#0
;;;1350   {
;;;1351   	LKClientOverSta = LKDefault;
000002  4901              LDR      r1,|L6.8|
000004  7008              STRB     r0,[r1,#0]
;;;1352   }
000006  4770              BX       lr
;;;1353   
                          ENDP

                  |L6.8|
                          DCD      LKClientOverSta

                          AREA ||i.Get_ClientOverSta||, CODE, READONLY, ALIGN=2

                  Get_ClientOverSta PROC
;;;1342   
;;;1343   LKClientOverStaEnum Get_ClientOverSta(void)
000000  4801              LDR      r0,|L7.8|
;;;1344   {
;;;1345   	return (LKClientOverSta);
000002  7800              LDRB     r0,[r0,#0]  ; LKClientOverSta
;;;1346   }
000004  4770              BX       lr
;;;1347   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      LKClientOverSta

                          AREA ||i.Get_NowClientStatus||, CODE, READONLY, ALIGN=2

                  Get_NowClientStatus PROC
;;;1336   
;;;1337   LKClientStaEnum Get_NowClientStatus(void)
000000  4801              LDR      r0,|L8.8|
;;;1338   {
;;;1339   	return (NowLKClientSta);
000002  7800              LDRB     r0,[r0,#0]  ; NowLKClientSta
;;;1340   }
000004  4770              BX       lr
;;;1341   
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      NowLKClientSta

                          AREA ||i.IsLKClientPowerOff||, CODE, READONLY, ALIGN=2

                  IsLKClientPowerOff PROC
;;;720    
;;;721    BOOLEAN IsLKClientPowerOff(void)
000000  4807              LDR      r0,|L9.32|
;;;722    {
;;;723    	if((NowLKClientSta == Stop) && ((LKClient_StopSta == PowerOff) || (LKClientOverSta == PowerError)) ){
000002  7800              LDRB     r0,[r0,#0]  ; NowLKClientSta
000004  2801              CMP      r0,#1
000006  d109              BNE      |L9.28|
000008  4806              LDR      r0,|L9.36|
00000a  7800              LDRB     r0,[r0,#0]  ; LKClient_StopSta
00000c  2803              CMP      r0,#3
00000e  d003              BEQ      |L9.24|
000010  4805              LDR      r0,|L9.40|
000012  7800              LDRB     r0,[r0,#0]  ; LKClientOverSta
000014  2801              CMP      r0,#1
000016  d101              BNE      |L9.28|
                  |L9.24|
;;;724    		return (bTRUE);
000018  2001              MOVS     r0,#1
                  |L9.26|
;;;725    	}
;;;726    	return (bFALSE);
;;;727    }
00001a  4770              BX       lr
                  |L9.28|
00001c  2000              MOVS     r0,#0                 ;726
00001e  e7fc              B        |L9.26|
;;;728    
                          ENDP

                  |L9.32|
                          DCD      NowLKClientSta
                  |L9.36|
                          DCD      LKClient_StopSta
                  |L9.40|
                          DCD      LKClientOverSta

                          AREA ||i.IsSimCardCorrect||, CODE, READONLY, ALIGN=1

                  IsSimCardCorrect PROC
;;;782    /* ---------- Connect阶段 相关函数 ------------------ */
;;;783    BOOLEAN IsSimCardCorrect(BYTE * SimCardInfo)
000000  4601              MOV      r1,r0
;;;784    {
;;;785    	INT8U i;
;;;786    	for( i = 0 ; i < 15 ; i++ )
000002  2200              MOVS     r2,#0
000004  e00a              B        |L10.28|
                  |L10.6|
;;;787    	{
;;;788    		if( ((*SimCardInfo) < '0') || ((*SimCardInfo) > '9') ) return bFALSE;
000006  7808              LDRB     r0,[r1,#0]
000008  2830              CMP      r0,#0x30
00000a  db02              BLT      |L10.18|
00000c  7808              LDRB     r0,[r1,#0]
00000e  2839              CMP      r0,#0x39
000010  dd01              BLE      |L10.22|
                  |L10.18|
000012  2000              MOVS     r0,#0
                  |L10.20|
;;;789    		SimCardInfo++;
;;;790    	}
;;;791    	return bTRUE;
;;;792    }
000014  4770              BX       lr
                  |L10.22|
000016  1c49              ADDS     r1,r1,#1              ;789
000018  1c50              ADDS     r0,r2,#1              ;786
00001a  b2c2              UXTB     r2,r0                 ;786
                  |L10.28|
00001c  2a0f              CMP      r2,#0xf               ;786
00001e  dbf2              BLT      |L10.6|
000020  2001              MOVS     r0,#1                 ;791
000022  e7f7              B        |L10.20|
;;;793    
                          ENDP


                          AREA ||i.LKClientTask||, CODE, READONLY, ALIGN=2

                  LKClientTask PROC
;;;1319   /* LKClient客户机 相关函数 */
;;;1320   void LKClientTask(void)
000000  b510              PUSH     {r4,lr}
;;;1321   {
;;;1322   	/* 客户机通信 */
;;;1323   	switch (NowLKClientSta)
000002  4811              LDR      r0,|L11.72|
000004  7800              LDRB     r0,[r0,#0]  ; NowLKClientSta
000006  2809              CMP      r0,#9
000008  d21b              BCS      |L11.66|
00000a  e8dff000          TBB      [pc,r0]
00000e  1a17              DCB      0x1a,0x17
000010  051a080b          DCB      0x05,0x1a,0x08,0x0b
000014  0e111400          DCB      0x0e,0x11,0x14,0x00
;;;1324   	{
;;;1325   		case (Start):    LKClient_Start_Run();       break;
000018  f7fffffe          BL       LKClient_Start_Run
00001c  e012              B        |L11.68|
;;;1326   		case (Connect):  LKClient_ConnectUDP_Run();  break;
00001e  f7fffffe          BL       LKClient_ConnectUDP_Run
000022  e00f              B        |L11.68|
;;;1327   		case (Loging):	 LKClient_Login_Run();		 break;
000024  f7fffffe          BL       LKClient_Login_Run
000028  e00c              B        |L11.68|
;;;1328   		case (Update):	 LKClient_Update_Run();		 break;
00002a  f7fffffe          BL       LKClient_Update_Run
00002e  e009              B        |L11.68|
;;;1329   		case (Comm):	   LKClient_Comm_Run();		 break;
000030  f7fffffe          BL       LKClient_Comm_Run
000034  e006              B        |L11.68|
;;;1330   		case (LogOut): 	 LKClient_LogOut_Run();		 break;
000036  f7fffffe          BL       LKClient_LogOut_Run
00003a  e003              B        |L11.68|
;;;1331   		case (Stop):	   LKClient_Stop_Run();		 break;
00003c  f7fffffe          BL       LKClient_Stop_Run
000040  e000              B        |L11.68|
                  |L11.66|
;;;1332   		default:									 break;
000042  bf00              NOP      
                  |L11.68|
000044  bf00              NOP                            ;1325
;;;1333   	}
;;;1334   }
000046  bd10              POP      {r4,pc}
;;;1335   
                          ENDP

                  |L11.72|
                          DCD      NowLKClientSta

                          AREA ||i.LKClient_AddFlowID||, CODE, READONLY, ALIGN=2

                  LKClient_AddFlowID PROC
;;;124    /* 添加流水号 */
;;;125    void LKClient_AddFlowID(void)
000000  4807              LDR      r0,|L12.32|
;;;126    {
;;;127    	LKClientMsg[6] = FlowID>>8;
000002  8800              LDRH     r0,[r0,#0]  ; FlowID
000004  1200              ASRS     r0,r0,#8
000006  4907              LDR      r1,|L12.36|
000008  7188              STRB     r0,[r1,#6]
;;;128    	LKClientMsg[7] = FlowID++;
00000a  4805              LDR      r0,|L12.32|
00000c  7801              LDRB     r1,[r0,#0]  ; FlowID
00000e  8800              LDRH     r0,[r0,#0]  ; FlowID
000010  1c40              ADDS     r0,r0,#1
000012  4a03              LDR      r2,|L12.32|
000014  8010              STRH     r0,[r2,#0]
000016  b2c8              UXTB     r0,r1
000018  4902              LDR      r1,|L12.36|
00001a  71c8              STRB     r0,[r1,#7]
;;;129    }
00001c  4770              BX       lr
;;;130    
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
                          DCD      FlowID
                  |L12.36|
                          DCD      LKClientMsg

                          AREA ||i.LKClient_Comm_Run||, CODE, READONLY, ALIGN=1

                  LKClient_Comm_Run PROC
;;;1220   
;;;1221   void LKClient_Comm_Run(void)
000000  b510              PUSH     {r4,lr}
;;;1222   {		
;;;1223   	LKClient_RcvMsg_Task();
000002  f7fffffe          BL       LKClient_RcvMsg_Task
;;;1224       LKClient_Comm_Task();
000006  f7fffffe          BL       LKClient_Comm_Task
;;;1225   }
00000a  bd10              POP      {r4,pc}
;;;1226   
                          ENDP


                          AREA ||i.LKClient_Comm_Task||, CODE, READONLY, ALIGN=2

                  LKClient_Comm_Task PROC
;;;1097   
;;;1098   void LKClient_Comm_Task(void)
000000  b530              PUSH     {r4,r5,lr}
;;;1099   {
000002  b089              SUB      sp,sp,#0x24
;;;1100   	switch (LKClient_TransmitSta)
000004  48ab              LDR      r0,|L14.692|
000006  7800              LDRB     r0,[r0,#0]  ; LKClient_TransmitSta
000008  b130              CBZ      r0,|L14.24|
00000a  2801              CMP      r0,#1
00000c  d076              BEQ      |L14.252|
00000e  2802              CMP      r0,#2
000010  d075              BEQ      |L14.254|
000012  2803              CMP      r0,#3
000014  d174              BNE      |L14.256|
000016  e13c              B        |L14.658|
                  |L14.24|
;;;1101   	{
;;;1102   		case (Ready):
;;;1103   			if(bConfirm){
000018  48a7              LDR      r0,|L14.696|
00001a  7800              LDRB     r0,[r0,#0]  ; bConfirm
00001c  b350              CBZ      r0,|L14.116|
;;;1104   				if(ConfirmOK == bTRUE){
00001e  48a7              LDR      r0,|L14.700|
000020  7800              LDRB     r0,[r0,#0]  ; ConfirmOK
000022  2801              CMP      r0,#1
000024  d10a              BNE      |L14.60|
;;;1105   					if(LKClientMsgACK){
000026  48a6              LDR      r0,|L14.704|
000028  7800              LDRB     r0,[r0,#0]  ; LKClientMsgACK
00002a  b108              CBZ      r0,|L14.48|
;;;1106   						CQueue_Delete();
00002c  f7fffffe          BL       CQueue_Delete
                  |L14.48|
;;;1107   					}	
;;;1108   					bConfirm = bFALSE;
000030  2000              MOVS     r0,#0
000032  49a1              LDR      r1,|L14.696|
000034  7008              STRB     r0,[r1,#0]
;;;1109   					CommTimes = 0;
000036  49a3              LDR      r1,|L14.708|
000038  7008              STRB     r0,[r1,#0]
00003a  e075              B        |L14.296|
                  |L14.60|
;;;1110   				}else{
;;;1111   					if(Timer_GetReached(&ConfirmTim) == bTRUE){
00003c  48a2              LDR      r0,|L14.712|
00003e  f7fffffe          BL       Timer_GetReached
000042  2801              CMP      r0,#1
000044  d170              BNE      |L14.296|
;;;1112   						if(CommTimes == 5){
000046  489f              LDR      r0,|L14.708|
000048  7800              LDRB     r0,[r0,#0]  ; CommTimes
00004a  2805              CMP      r0,#5
00004c  d104              BNE      |L14.88|
;;;1113   							LKClient_GoTo_Stop(5000);
00004e  f2413088          MOV      r0,#0x1388
000052  f7fffffe          BL       LKClient_GoTo_Stop
000056  e067              B        |L14.296|
                  |L14.88|
;;;1114   						}else{
;;;1115   							CommTimes++;
000058  489a              LDR      r0,|L14.708|
00005a  7800              LDRB     r0,[r0,#0]  ; CommTimes
00005c  1c40              ADDS     r0,r0,#1
00005e  4999              LDR      r1,|L14.708|
000060  7008              STRB     r0,[r1,#0]
;;;1116   							LKClient_TransmitSta = Prepare;
000062  2001              MOVS     r0,#1
000064  4993              LDR      r1,|L14.692|
000066  7008              STRB     r0,[r1,#0]
;;;1117   							Timer_Set( &ConfirmTim,10000 );
000068  f2427110          MOV      r1,#0x2710
00006c  4896              LDR      r0,|L14.712|
00006e  f7fffffe          BL       Timer_Set
000072  e059              B        |L14.296|
                  |L14.116|
;;;1118   						}
;;;1119   					}
;;;1120   				}
;;;1121   
;;;1122   			}else{
;;;1123   				/* 若需要休眠 */
;;;1124   				if(SleepSta == Sleep){
000074  4895              LDR      r0,|L14.716|
000076  7800              LDRB     r0,[r0,#0]  ; SleepSta
000078  2803              CMP      r0,#3
00007a  d102              BNE      |L14.130|
;;;1125   					LKClient_GoTo_LogOut();
00007c  f7fffffe          BL       LKClient_GoTo_LogOut
000080  e052              B        |L14.296|
                  |L14.130|
;;;1126   
;;;1127   				/* 若需要发送心跳 */	
;;;1128   				}else if(Timer_GetReached(&HeartTim) == bTRUE){
000082  4893              LDR      r0,|L14.720|
000084  f7fffffe          BL       Timer_GetReached
000088  2801              CMP      r0,#1
00008a  d125              BNE      |L14.216|
;;;1129   					/* 组织心跳报文 */
;;;1130   					memset(LKClientMsg,0,110);//addmemset  2015.7.10
00008c  216e              MOVS     r1,#0x6e
00008e  4891              LDR      r0,|L14.724|
000090  f7fffffe          BL       __aeabi_memclr
;;;1131   					LKClient_PackHeartBeatInfo(LKClientMsg);
000094  488f              LDR      r0,|L14.724|
000096  f7fffffe          BL       LKClient_PackHeartBeatInfo
;;;1132   					LKClientMsgLen = 15;
00009a  200f              MOVS     r0,#0xf
00009c  498e              LDR      r1,|L14.728|
00009e  7008              STRB     r0,[r1,#0]
;;;1133   					LKClientMsgACK = bFALSE;
0000a0  2000              MOVS     r0,#0
0000a2  4987              LDR      r1,|L14.704|
0000a4  7008              STRB     r0,[r1,#0]
;;;1134   					LKClient_AddFlowID();
0000a6  f7fffffe          BL       LKClient_AddFlowID
;;;1135   					
;;;1136   					
;;;1137   					bConfirm = bTRUE;
0000aa  2001              MOVS     r0,#1
0000ac  4982              LDR      r1,|L14.696|
0000ae  7008              STRB     r0,[r1,#0]
;;;1138   					ConfirmOK = bFALSE;
0000b0  2000              MOVS     r0,#0
0000b2  4982              LDR      r1,|L14.700|
0000b4  7008              STRB     r0,[r1,#0]
;;;1139   					CommTimes = 1;
0000b6  2001              MOVS     r0,#1
0000b8  4982              LDR      r1,|L14.708|
0000ba  7008              STRB     r0,[r1,#0]
;;;1140   					Timer_Set( &ConfirmTim,10000 );
0000bc  f2427110          MOV      r1,#0x2710
0000c0  4881              LDR      r0,|L14.712|
0000c2  f7fffffe          BL       Timer_Set
;;;1141   					Timer_Set(&HeartTim,(HEARTBEAT_FREQUENCY * 1000 ));
0000c6  f64e2160          MOV      r1,#0xea60
0000ca  4881              LDR      r0,|L14.720|
0000cc  f7fffffe          BL       Timer_Set
;;;1142   
;;;1143   					LKClient_TransmitSta = Prepare;
0000d0  2001              MOVS     r0,#1
0000d2  4978              LDR      r1,|L14.692|
0000d4  7008              STRB     r0,[r1,#0]
0000d6  e027              B        |L14.296|
                  |L14.216|
;;;1144   					
;;;1145   				/* 若发送队列有数据 */						
;;;1146   				}else if(CQueue_ReadQueueLen() != 0){
0000d8  f7fffffe          BL       CQueue_ReadQueueLen
0000dc  b320              CBZ      r0,|L14.296|
;;;1147   					memset(LKClientMsg,0,110);//addmemset  2015.7.10
0000de  216e              MOVS     r1,#0x6e
0000e0  487c              LDR      r0,|L14.724|
0000e2  f7fffffe          BL       __aeabi_memclr
;;;1148   					CQueue_ReadInfo(LKClientMsg,&LKClientMsgLen,&LKClientMsgACK);
0000e6  4a76              LDR      r2,|L14.704|
0000e8  497b              LDR      r1,|L14.728|
0000ea  487a              LDR      r0,|L14.724|
0000ec  f7fffffe          BL       CQueue_ReadInfo
;;;1149   										
;;;1150   					if(LKClientMsgACK == bFALSE){
0000f0  4873              LDR      r0,|L14.704|
0000f2  7800              LDRB     r0,[r0,#0]  ; LKClientMsgACK
0000f4  b928              CBNZ     r0,|L14.258|
;;;1151   						CQueue_Delete();	
0000f6  f7fffffe          BL       CQueue_Delete
0000fa  e012              B        |L14.290|
                  |L14.252|
0000fc  e015              B        |L14.298|
                  |L14.254|
0000fe  e043              B        |L14.392|
                  |L14.256|
000100  e0d3              B        |L14.682|
                  |L14.258|
;;;1152   					}else{
;;;1153   						LKClient_AddFlowID();
000102  f7fffffe          BL       LKClient_AddFlowID
;;;1154   						bConfirm = bTRUE;
000106  2001              MOVS     r0,#1
000108  496b              LDR      r1,|L14.696|
00010a  7008              STRB     r0,[r1,#0]
;;;1155   						ConfirmOK = bFALSE;
00010c  2000              MOVS     r0,#0
00010e  496b              LDR      r1,|L14.700|
000110  7008              STRB     r0,[r1,#0]
;;;1156   						CommTimes = 1;
000112  2001              MOVS     r0,#1
000114  496b              LDR      r1,|L14.708|
000116  7008              STRB     r0,[r1,#0]
;;;1157   						Timer_Set( &ConfirmTim,10000 );
000118  f2427110          MOV      r1,#0x2710
00011c  486a              LDR      r0,|L14.712|
00011e  f7fffffe          BL       Timer_Set
                  |L14.290|
;;;1158   					}
;;;1159   					
;;;1160   					LKClient_TransmitSta = Prepare;
000122  2001              MOVS     r0,#1
000124  4963              LDR      r1,|L14.692|
000126  7008              STRB     r0,[r1,#0]
                  |L14.296|
;;;1161   				}
;;;1162   			}
;;;1163   			break;
000128  e0c0              B        |L14.684|
                  |L14.298|
;;;1164   
;;;1165   		case (Prepare):
;;;1166   			if(1){
;;;1167   				BYTE MsgInfo[20];
;;;1168   				BYTE Dec[5];
;;;1169   				INT8U DecNum = 0;
00012a  2000              MOVS     r0,#0
00012c  9001              STR      r0,[sp,#4]
;;;1170   				HexToStr( LKClientMsgLen , Dec , &DecNum);
00012e  aa01              ADD      r2,sp,#4
000130  a902              ADD      r1,sp,#8
000132  4869              LDR      r0,|L14.728|
000134  7800              LDRB     r0,[r0,#0]  ; LKClientMsgLen
000136  f7fffffe          BL       HexToStr
;;;1171   				RMLStrcpy(MsgInfo,(BYTE *)"AT+CIPSEND=",11);
00013a  220b              MOVS     r2,#0xb
00013c  a167              ADR      r1,|L14.732|
00013e  a804              ADD      r0,sp,#0x10
000140  f7fffffe          BL       RMLStrcpy
;;;1172   				RMLStrcpy(&MsgInfo[11],Dec,DecNum);
000144  f89d2004          LDRB     r2,[sp,#4]
000148  a902              ADD      r1,sp,#8
00014a  f10d001b          ADD      r0,sp,#0x1b
00014e  f7fffffe          BL       RMLStrcpy
;;;1173   				RMLStrcpy(&MsgInfo[11+DecNum],(BYTE *)"\r\n",2);
000152  f89d1004          LDRB     r1,[sp,#4]
000156  310b              ADDS     r1,r1,#0xb
000158  aa04              ADD      r2,sp,#0x10
00015a  1888              ADDS     r0,r1,r2
00015c  2202              MOVS     r2,#2
00015e  a162              ADR      r1,|L14.744|
000160  f7fffffe          BL       RMLStrcpy
;;;1174   				Sim900_CheckPreSendInfoStart();
000164  f7fffffe          BL       Sim900_CheckPreSendInfoStart
;;;1175   				SendMsgToSim900A(MsgInfo,13+DecNum);
000168  f89d0004          LDRB     r0,[sp,#4]
00016c  f100010d          ADD      r1,r0,#0xd
000170  a804              ADD      r0,sp,#0x10
000172  f7fffffe          BL       SendMsgToSim900A
;;;1176   				LKClient_TransmitSta = Sending;
000176  2002              MOVS     r0,#2
000178  494e              LDR      r1,|L14.692|
00017a  7008              STRB     r0,[r1,#0]
;;;1177   				Timer_Set(&LKMsgTim,500);
00017c  f44f71fa          MOV      r1,#0x1f4
000180  485a              LDR      r0,|L14.748|
000182  f7fffffe          BL       Timer_Set
;;;1178   			}			
;;;1179   			break;
000186  e091              B        |L14.684|
                  |L14.392|
;;;1180   
;;;1181   		case (Sending):
;;;1182   			if( (Sim900_bPreSendInfo()) || (Timer_GetReached(&LKMsgTim) == bTRUE) ){
000188  f7fffffe          BL       Sim900_bPreSendInfo
00018c  b920              CBNZ     r0,|L14.408|
00018e  4857              LDR      r0,|L14.748|
000190  f7fffffe          BL       Timer_GetReached
000194  2801              CMP      r0,#1
000196  d17b              BNE      |L14.656|
                  |L14.408|
;;;1183   
;;;1184   				DEBUG_LOCATION();
000198  bf00              NOP      
00019a  f44f6494          MOV      r4,#0x4a0
00019e  a054              ADR      r0,|L14.752|
0001a0  f7fffffe          BL       DebugUart_Putstr
0001a4  a054              ADR      r0,|L14.760|
0001a6  f7fffffe          BL       DebugUart_Putstr
0001aa  a05a              ADR      r0,|L14.788|
0001ac  f7fffffe          BL       DebugUart_Putstr
0001b0  a059              ADR      r0,|L14.792|
0001b2  f7fffffe          BL       DebugUart_Putstr
0001b6  f44f707a          MOV      r0,#0x3e8
0001ba  fb94f0f0          SDIV     r0,r4,r0
0001be  210a              MOVS     r1,#0xa
0001c0  fb90f2f1          SDIV     r2,r0,r1
0001c4  fb010012          MLS      r0,r1,r2,r0
0001c8  3030              ADDS     r0,r0,#0x30
0001ca  b2c5              UXTB     r5,r0
0001cc  4628              MOV      r0,r5
0001ce  f7fffffe          BL       DebugUart_Putchar
0001d2  2064              MOVS     r0,#0x64
0001d4  fb94f0f0          SDIV     r0,r4,r0
0001d8  210a              MOVS     r1,#0xa
0001da  fb90f2f1          SDIV     r2,r0,r1
0001de  fb010012          MLS      r0,r1,r2,r0
0001e2  3030              ADDS     r0,r0,#0x30
0001e4  b2c5              UXTB     r5,r0
0001e6  4628              MOV      r0,r5
0001e8  f7fffffe          BL       DebugUart_Putchar
0001ec  200a              MOVS     r0,#0xa
0001ee  fb94f0f0          SDIV     r0,r4,r0
0001f2  210a              MOVS     r1,#0xa
0001f4  fb90f2f1          SDIV     r2,r0,r1
0001f8  fb010012          MLS      r0,r1,r2,r0
0001fc  3030              ADDS     r0,r0,#0x30
0001fe  b2c5              UXTB     r5,r0
000200  4628              MOV      r0,r5
000202  f7fffffe          BL       DebugUart_Putchar
000206  200a              MOVS     r0,#0xa
000208  fb94f1f0          SDIV     r1,r4,r0
00020c  fb004011          MLS      r0,r0,r1,r4
000210  3030              ADDS     r0,r0,#0x30
000212  b2c5              UXTB     r5,r0
000214  4628              MOV      r0,r5
000216  f7fffffe          BL       DebugUart_Putchar
00021a  a041              ADR      r0,|L14.800|
00021c  f7fffffe          BL       DebugUart_Putstr
000220  bf00              NOP      
;;;1185   				DebugUart_Putstr("\r\n********************send************************\r\n");
000222  a040              ADR      r0,|L14.804|
000224  f7fffffe          BL       DebugUart_Putstr
;;;1186   				do 
000228  bf00              NOP      
;;;1187   				{
;;;1188   					char hexBuf[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
00022a  a34c              ADR      r3,|L14.860|
00022c  e9d32101          LDRD     r2,r1,[r3,#4]
000230  6818              LDR      r0,[r3,#0]
000232  68db              LDR      r3,[r3,#0xc]
000234  e9cd1307          STRD     r1,r3,[sp,#0x1c]
000238  e9cd0205          STRD     r0,r2,[sp,#0x14]
;;;1189   					int i;
;;;1190   					
;;;1191   					for(i=0; i<LKClientMsgLen; i++)
00023c  2400              MOVS     r4,#0
00023e  e010              B        |L14.610|
                  |L14.576|
;;;1192   					{
;;;1193   						DebugUart_Putchar(hexBuf[(LKClientMsg[i]>>4) & 0xf]);
000240  4924              LDR      r1,|L14.724|
000242  5d09              LDRB     r1,[r1,r4]
000244  aa05              ADD      r2,sp,#0x14
000246  eb021111          ADD      r1,r2,r1,LSR #4
00024a  7808              LDRB     r0,[r1,#0]
00024c  f7fffffe          BL       DebugUart_Putchar
;;;1194   						DebugUart_Putchar(hexBuf[(LKClientMsg[i]) & 0xf]);
000250  4920              LDR      r1,|L14.724|
000252  5d09              LDRB     r1,[r1,r4]
000254  f001010f          AND      r1,r1,#0xf
000258  aa05              ADD      r2,sp,#0x14
00025a  5c50              LDRB     r0,[r2,r1]
00025c  f7fffffe          BL       DebugUart_Putchar
000260  1c64              ADDS     r4,r4,#1              ;1191
                  |L14.610|
000262  481d              LDR      r0,|L14.728|
000264  7800              LDRB     r0,[r0,#0]            ;1191  ; LKClientMsgLen
000266  4284              CMP      r4,r0                 ;1191
000268  dbea              BLT      |L14.576|
;;;1195   					}
;;;1196   				}while(0);
00026a  bf00              NOP      
;;;1197   				DebugUart_Putstr("\r\n********************end*************************\r\n");
00026c  a03f              ADR      r0,|L14.876|
00026e  f7fffffe          BL       DebugUart_Putstr
;;;1198   	
;;;1199   	
;;;1200   				Sim900_CheckSendOKStart();				
000272  f7fffffe          BL       Sim900_CheckSendOKStart
;;;1201   				SendMsgToSim900A(LKClientMsg,LKClientMsgLen);
000276  4818              LDR      r0,|L14.728|
000278  7801              LDRB     r1,[r0,#0]  ; LKClientMsgLen
00027a  4816              LDR      r0,|L14.724|
00027c  f7fffffe          BL       SendMsgToSim900A
;;;1202   				Timer_Set(&LKMsgTim,1000);
000280  f44f717a          MOV      r1,#0x3e8
000284  4819              LDR      r0,|L14.748|
000286  f7fffffe          BL       Timer_Set
;;;1203   				LKClient_TransmitSta = SendOver;
00028a  2003              MOVS     r0,#3
00028c  4909              LDR      r1,|L14.692|
00028e  7008              STRB     r0,[r1,#0]
                  |L14.656|
;;;1204   				
;;;1205   	
;;;1206   			}
;;;1207   			break;
000290  e00c              B        |L14.684|
                  |L14.658|
;;;1208   
;;;1209   		case (SendOver):
;;;1210   			if((Sim900_bInfoSendOK()) || (Timer_GetReached(&LKMsgTim) == bTRUE ) ){
000292  f7fffffe          BL       Sim900_bInfoSendOK
000296  b920              CBNZ     r0,|L14.674|
000298  4814              LDR      r0,|L14.748|
00029a  f7fffffe          BL       Timer_GetReached
00029e  2801              CMP      r0,#1
0002a0  d102              BNE      |L14.680|
                  |L14.674|
;;;1211   				LKClient_TransmitSta = Ready;
0002a2  2000              MOVS     r0,#0
0002a4  4903              LDR      r1,|L14.692|
0002a6  7008              STRB     r0,[r1,#0]
                  |L14.680|
;;;1212   			}
;;;1213   			break;
0002a8  e000              B        |L14.684|
                  |L14.682|
;;;1214   			
;;;1215   		default:
;;;1216   			break;	
0002aa  bf00              NOP      
                  |L14.684|
0002ac  bf00              NOP                            ;1163
;;;1217   	}
;;;1218   }
0002ae  b009              ADD      sp,sp,#0x24
0002b0  bd30              POP      {r4,r5,pc}
;;;1219   
                          ENDP

0002b2  0000              DCW      0x0000
                  |L14.692|
                          DCD      LKClient_TransmitSta
                  |L14.696|
                          DCD      bConfirm
                  |L14.700|
                          DCD      ConfirmOK
                  |L14.704|
                          DCD      LKClientMsgACK
                  |L14.708|
                          DCD      CommTimes
                  |L14.712|
                          DCD      ConfirmTim
                  |L14.716|
                          DCD      SleepSta
                  |L14.720|
                          DCD      HeartTim
                  |L14.724|
                          DCD      LKClientMsg
                  |L14.728|
                          DCD      LKClientMsgLen
                  |L14.732|
0002dc  41542b43          DCB      "AT+CIPSEND=",0
0002e0  49505345
0002e4  4e443d00
                  |L14.744|
0002e8  0d0a00            DCB      "\r\n",0
0002eb  00                DCB      0
                  |L14.748|
                          DCD      LKMsgTim
                  |L14.752|
0002f0  5b46696c          DCB      "[File:",0
0002f4  653a00  
0002f7  00                DCB      0
                  |L14.760|
0002f8  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0002fc  70705c4c
000300  4b436c69
000304  656e745c
000308  6c6b636c
00030c  69656e74
000310  2e6300  
000313  00                DCB      0
                  |L14.788|
000314  202000            DCB      "  ",0
000317  00                DCB      0
                  |L14.792|
000318  6c696e65          DCB      "line:",0
00031c  3a00    
00031e  00                DCB      0
00031f  00                DCB      0
                  |L14.800|
000320  5d0d0a00          DCB      "]\r\n",0
                  |L14.804|
000324  0d0a2a2a          DCB      "\r\n********************send************************\r\n"
000328  2a2a2a2a
00032c  2a2a2a2a
000330  2a2a2a2a
000334  2a2a2a2a
000338  2a2a7365
00033c  6e642a2a
000340  2a2a2a2a
000344  2a2a2a2a
000348  2a2a2a2a
00034c  2a2a2a2a
000350  2a2a2a2a
000354  2a2a0d0a
000358  00                DCB      0
000359  00                DCB      0
00035a  00                DCB      0
00035b  00                DCB      0
                  |L14.860|
00035c  30313233          DCB      "0123456789ABCDEF"
000360  34353637
000364  38394142
000368  43444546
                  |L14.876|
00036c  0d0a2a2a          DCB      "\r\n********************end*************************\r\n"
000370  2a2a2a2a
000374  2a2a2a2a
000378  2a2a2a2a
00037c  2a2a2a2a
000380  2a2a656e
000384  642a2a2a
000388  2a2a2a2a
00038c  2a2a2a2a
000390  2a2a2a2a
000394  2a2a2a2a
000398  2a2a2a2a
00039c  2a2a0d0a
0003a0  00                DCB      0
0003a1  00                DCB      0
0003a2  00                DCB      0
0003a3  00                DCB      0

                          AREA ||i.LKClient_ConnectUDP_Run||, CODE, READONLY, ALIGN=2

                  LKClient_ConnectUDP_Run PROC
;;;810    
;;;811    void LKClient_ConnectUDP_Run(void)
000000  b510              PUSH     {r4,lr}
;;;812    {
;;;813    	switch (LKConUDP_Status)
000002  488e              LDR      r0,|L15.572|
000004  7800              LDRB     r0,[r0,#0]  ; LKConUDP_Status
000006  b130              CBZ      r0,|L15.22|
000008  2803              CMP      r0,#3
00000a  d008              BEQ      |L15.30|
00000c  2804              CMP      r0,#4
00000e  d05a              BEQ      |L15.198|
000010  2805              CMP      r0,#5
000012  d16e              BNE      |L15.242|
000014  e0c9              B        |L15.426|
                  |L15.22|
;;;814    	{
;;;815    		
;;;816    		case (UDP_Ready):
;;;817    			LKConUDP_Status = SdATCmd;							
000016  2003              MOVS     r0,#3
000018  4988              LDR      r1,|L15.572|
00001a  7008              STRB     r0,[r1,#0]
;;;818    			break;
00001c  e10b              B        |L15.566|
                  |L15.30|
;;;819    
;;;820    		case (SdATCmd):
;;;821    			/* 若发送次数溢出 */
;;;822    			if(LKClientConCmd[LKCon_CmdNum].FailTime == LKClientConCmd[LKCon_CmdNum].MaxTime )
00001e  4888              LDR      r0,|L15.576|
000020  7800              LDRB     r0,[r0,#0]  ; LKCon_CmdNum
000022  eb000040          ADD      r0,r0,r0,LSL #1
000026  4987              LDR      r1,|L15.580|
000028  eb010080          ADD      r0,r1,r0,LSL #2
00002c  7ac0              LDRB     r0,[r0,#0xb]
00002e  4984              LDR      r1,|L15.576|
000030  7809              LDRB     r1,[r1,#0]  ; LKCon_CmdNum
000032  eb010141          ADD      r1,r1,r1,LSL #1
000036  4a83              LDR      r2,|L15.580|
000038  eb020181          ADD      r1,r2,r1,LSL #2
00003c  7a89              LDRB     r1,[r1,#0xa]
00003e  4288              CMP      r0,r1
000040  d11e              BNE      |L15.128|
;;;823    			{
;;;824    				if( (LKCon_CmdNum == 0) || (LKCon_CmdNum == 1) || (LKCon_CmdNum == 2) )       //|| (LKCon_CmdNum == 3)
000042  487f              LDR      r0,|L15.576|
000044  7800              LDRB     r0,[r0,#0]  ; LKCon_CmdNum
000046  b138              CBZ      r0,|L15.88|
000048  487d              LDR      r0,|L15.576|
00004a  7800              LDRB     r0,[r0,#0]  ; LKCon_CmdNum
00004c  2801              CMP      r0,#1
00004e  d003              BEQ      |L15.88|
000050  487b              LDR      r0,|L15.576|
000052  7800              LDRB     r0,[r0,#0]  ; LKCon_CmdNum
000054  2802              CMP      r0,#2
000056  d103              BNE      |L15.96|
                  |L15.88|
;;;825    					{  
;;;826    							LKClientOverSta = UartError;
000058  2002              MOVS     r0,#2
00005a  497b              LDR      r1,|L15.584|
00005c  7008              STRB     r0,[r1,#0]
00005e  e00a              B        |L15.118|
                  |L15.96|
;;;827    				    }
;;;828    					else if((LKCon_CmdNum == 3) || (LKCon_CmdNum == 4))
000060  4877              LDR      r0,|L15.576|
000062  7800              LDRB     r0,[r0,#0]  ; LKCon_CmdNum
000064  2803              CMP      r0,#3
000066  d003              BEQ      |L15.112|
000068  4875              LDR      r0,|L15.576|
00006a  7800              LDRB     r0,[r0,#0]  ; LKCon_CmdNum
00006c  2804              CMP      r0,#4
00006e  d102              BNE      |L15.118|
                  |L15.112|
;;;829    					{
;;;830    							LKClientOverSta = NoSIMCard;
000070  2003              MOVS     r0,#3
000072  4975              LDR      r1,|L15.584|
000074  7008              STRB     r0,[r1,#0]
                  |L15.118|
;;;831    					}			
;;;832    				LKClient_GoTo_Stop(3000);
000076  f64030b8          MOV      r0,#0xbb8
00007a  f7fffffe          BL       LKClient_GoTo_Stop
                  |L15.126|
;;;833    				return;
;;;834    			}
;;;835    			SendMsgToSim900A(LKClientConCmd[LKCon_CmdNum].Cmd,strlen((const char *)LKClientConCmd[LKCon_CmdNum].Cmd));
;;;836    			LKConUDP_Status = WaitAns;
;;;837    			Timer_Set(&LKCon_WaitTim,LKClientConCmd[LKCon_CmdNum].SendGap); 
;;;838    			break;
;;;839    
;;;840    		case (WaitAns):
;;;841    			if(LKCon_CmdNum == 8)    //gql_test_20140915
;;;842    			{   
;;;843    				if( FindDstInArray(caSimData,s32NumRcv,(BYTE*)"CONNECT OK",10) == bTRUE )
;;;844    				{
;;;845    					LKConUDP_Status = WaitAnsComplete;
;;;846    					Timer_Set(&LKCon_WaitTim,500); 								
;;;847    				}else{
;;;848    					if(Timer_GetReached(&LKCon_WaitTim) == bTRUE){
;;;849    						LKClientConCmd[LKCon_CmdNum].FailTime++;
;;;850    						LKConUDP_Times++;
;;;851    						LKConUDP_Status = UDP_Ready;			
;;;852    					} 
;;;853    				}
;;;854    			}
;;;855    			else
;;;856    			{
;;;857    				if(RMLStrcmp(LKClientConCmd[LKCon_CmdNum].CorrectAns, caSimData ,strlen((const char *)LKClientConCmd[LKCon_CmdNum].CorrectAns) ) == 1){
;;;858    					LKConUDP_Status = WaitAnsComplete;
;;;859    					Timer_Set(&LKCon_WaitTim,500); 			
;;;860    				}else{
;;;861    					if(Timer_GetReached(&LKCon_WaitTim) == bTRUE){
;;;862    						LKClientConCmd[LKCon_CmdNum].FailTime++;
;;;863    						LKConUDP_Status = UDP_Ready;						
;;;864    					} 
;;;865    				}								
;;;866    			}
;;;867    			break;
;;;868    
;;;869    		case (WaitAnsComplete):
;;;870    			if(Timer_GetReached(&LKCon_WaitTim) == bTRUE){
;;;871    				if(LKCon_CmdNum == 8){
;;;872    					Analyze_ClrReceivedServerData();   // 清有关接收服务器数据所有标志位
;;;873    					LKClient_GoTo_Login();						
;;;874    				}else if(LKCon_CmdNum == 3){
;;;875    					if(IsSimCardCorrect(caSimData+2) == bTRUE){
;;;876    						RMLStrcpy(SIMCardIMSI,caSimData+2,15);
;;;877    						LKCon_CmdNum++;
;;;878    						LKConUDP_Status = UDP_Ready;							
;;;879    					}else{
;;;880    						LKClientConCmd[LKCon_CmdNum].FailTime++;
;;;881    						LKConUDP_Status = UDP_Ready;					
;;;882    					}
;;;883    				}else{
;;;884    					LKCon_CmdNum++;
;;;885    					LKConUDP_Status = UDP_Ready;							
;;;886    				}				
;;;887    			}
;;;888    			break;
;;;889    
;;;890    		default:
;;;891    		
;;;892    			break;	
;;;893    	
;;;894    	}
;;;895    }
00007e  bd10              POP      {r4,pc}
                  |L15.128|
000080  496f              LDR      r1,|L15.576|
000082  7809              LDRB     r1,[r1,#0]            ;835  ; LKCon_CmdNum
000084  eb010141          ADD      r1,r1,r1,LSL #1       ;835
000088  4a6e              LDR      r2,|L15.580|
00008a  f8520021          LDR      r0,[r2,r1,LSL #2]     ;835
00008e  f7fffffe          BL       strlen
000092  b284              UXTH     r4,r0                 ;835
000094  496a              LDR      r1,|L15.576|
000096  7809              LDRB     r1,[r1,#0]            ;835  ; LKCon_CmdNum
000098  eb010141          ADD      r1,r1,r1,LSL #1       ;835
00009c  4a69              LDR      r2,|L15.580|
00009e  f8520021          LDR      r0,[r2,r1,LSL #2]     ;835
0000a2  4621              MOV      r1,r4                 ;835
0000a4  f7fffffe          BL       SendMsgToSim900A
0000a8  2004              MOVS     r0,#4                 ;836
0000aa  4964              LDR      r1,|L15.572|
0000ac  7008              STRB     r0,[r1,#0]            ;836
0000ae  4864              LDR      r0,|L15.576|
0000b0  7800              LDRB     r0,[r0,#0]            ;837  ; LKCon_CmdNum
0000b2  eb000040          ADD      r0,r0,r0,LSL #1       ;837
0000b6  4a63              LDR      r2,|L15.580|
0000b8  eb020080          ADD      r0,r2,r0,LSL #2       ;837
0000bc  8901              LDRH     r1,[r0,#8]            ;837
0000be  4863              LDR      r0,|L15.588|
0000c0  f7fffffe          BL       Timer_Set
0000c4  e0b7              B        |L15.566|
                  |L15.198|
0000c6  485e              LDR      r0,|L15.576|
0000c8  7800              LDRB     r0,[r0,#0]            ;841  ; LKCon_CmdNum
0000ca  2808              CMP      r0,#8                 ;841
0000cc  d131              BNE      |L15.306|
0000ce  230a              MOVS     r3,#0xa               ;843
0000d0  a25f              ADR      r2,|L15.592|
0000d2  4862              LDR      r0,|L15.604|
0000d4  6801              LDR      r1,[r0,#0]            ;843  ; s32NumRcv
0000d6  4862              LDR      r0,|L15.608|
0000d8  f7fffffe          BL       FindDstInArray
0000dc  2801              CMP      r0,#1                 ;843
0000de  d109              BNE      |L15.244|
0000e0  2005              MOVS     r0,#5                 ;845
0000e2  4956              LDR      r1,|L15.572|
0000e4  7008              STRB     r0,[r1,#0]            ;845
0000e6  f44f71fa          MOV      r1,#0x1f4             ;846
0000ea  4858              LDR      r0,|L15.588|
0000ec  f7fffffe          BL       Timer_Set
0000f0  e05a              B        |L15.424|
                  |L15.242|
0000f2  e09f              B        |L15.564|
                  |L15.244|
0000f4  4855              LDR      r0,|L15.588|
0000f6  f7fffffe          BL       Timer_GetReached
0000fa  2801              CMP      r0,#1                 ;848
0000fc  d154              BNE      |L15.424|
0000fe  4850              LDR      r0,|L15.576|
000100  7800              LDRB     r0,[r0,#0]            ;849  ; LKCon_CmdNum
000102  eb000040          ADD      r0,r0,r0,LSL #1       ;849
000106  494f              LDR      r1,|L15.580|
000108  eb010080          ADD      r0,r1,r0,LSL #2       ;849
00010c  7ac0              LDRB     r0,[r0,#0xb]          ;849
00010e  1c40              ADDS     r0,r0,#1              ;849
000110  494b              LDR      r1,|L15.576|
000112  7809              LDRB     r1,[r1,#0]            ;849  ; LKCon_CmdNum
000114  eb010141          ADD      r1,r1,r1,LSL #1       ;849
000118  4a4a              LDR      r2,|L15.580|
00011a  eb020181          ADD      r1,r2,r1,LSL #2       ;849
00011e  72c8              STRB     r0,[r1,#0xb]          ;849
000120  4850              LDR      r0,|L15.612|
000122  7800              LDRB     r0,[r0,#0]            ;850  ; LKConUDP_Times
000124  1c40              ADDS     r0,r0,#1              ;850
000126  494f              LDR      r1,|L15.612|
000128  7008              STRB     r0,[r1,#0]            ;850
00012a  2000              MOVS     r0,#0                 ;851
00012c  4943              LDR      r1,|L15.572|
00012e  7008              STRB     r0,[r1,#0]            ;851
000130  e03a              B        |L15.424|
                  |L15.306|
000132  4943              LDR      r1,|L15.576|
000134  7809              LDRB     r1,[r1,#0]            ;857  ; LKCon_CmdNum
000136  eb010141          ADD      r1,r1,r1,LSL #1       ;857
00013a  4a42              LDR      r2,|L15.580|
00013c  eb020181          ADD      r1,r2,r1,LSL #2       ;857
000140  6848              LDR      r0,[r1,#4]            ;857
000142  f7fffffe          BL       strlen
000146  4604              MOV      r4,r0                 ;857
000148  493d              LDR      r1,|L15.576|
00014a  7809              LDRB     r1,[r1,#0]            ;857  ; LKCon_CmdNum
00014c  eb010141          ADD      r1,r1,r1,LSL #1       ;857
000150  4a3c              LDR      r2,|L15.580|
000152  eb020181          ADD      r1,r2,r1,LSL #2       ;857
000156  4622              MOV      r2,r4                 ;857
000158  6848              LDR      r0,[r1,#4]            ;857
00015a  4941              LDR      r1,|L15.608|
00015c  f7fffffe          BL       RMLStrcmp
000160  2801              CMP      r0,#1                 ;857
000162  d108              BNE      |L15.374|
000164  2005              MOVS     r0,#5                 ;858
000166  4935              LDR      r1,|L15.572|
000168  7008              STRB     r0,[r1,#0]            ;858
00016a  f44f71fa          MOV      r1,#0x1f4             ;859
00016e  4837              LDR      r0,|L15.588|
000170  f7fffffe          BL       Timer_Set
000174  e018              B        |L15.424|
                  |L15.374|
000176  4835              LDR      r0,|L15.588|
000178  f7fffffe          BL       Timer_GetReached
00017c  2801              CMP      r0,#1                 ;861
00017e  d113              BNE      |L15.424|
000180  482f              LDR      r0,|L15.576|
000182  7800              LDRB     r0,[r0,#0]            ;862  ; LKCon_CmdNum
000184  eb000040          ADD      r0,r0,r0,LSL #1       ;862
000188  492e              LDR      r1,|L15.580|
00018a  eb010080          ADD      r0,r1,r0,LSL #2       ;862
00018e  7ac0              LDRB     r0,[r0,#0xb]          ;862
000190  1c40              ADDS     r0,r0,#1              ;862
000192  492b              LDR      r1,|L15.576|
000194  7809              LDRB     r1,[r1,#0]            ;862  ; LKCon_CmdNum
000196  eb010141          ADD      r1,r1,r1,LSL #1       ;862
00019a  4a2a              LDR      r2,|L15.580|
00019c  eb020181          ADD      r1,r2,r1,LSL #2       ;862
0001a0  72c8              STRB     r0,[r1,#0xb]          ;862
0001a2  2000              MOVS     r0,#0                 ;863
0001a4  4925              LDR      r1,|L15.572|
0001a6  7008              STRB     r0,[r1,#0]            ;863
                  |L15.424|
0001a8  e045              B        |L15.566|
                  |L15.426|
0001aa  4828              LDR      r0,|L15.588|
0001ac  f7fffffe          BL       Timer_GetReached
0001b0  2801              CMP      r0,#1                 ;870
0001b2  d13e              BNE      |L15.562|
0001b4  4822              LDR      r0,|L15.576|
0001b6  7800              LDRB     r0,[r0,#0]            ;871  ; LKCon_CmdNum
0001b8  2808              CMP      r0,#8                 ;871
0001ba  d104              BNE      |L15.454|
0001bc  f7fffffe          BL       Analyze_ClrReceivedServerData
0001c0  f7fffffe          BL       LKClient_GoTo_Login
0001c4  e035              B        |L15.562|
                  |L15.454|
0001c6  481e              LDR      r0,|L15.576|
0001c8  7800              LDRB     r0,[r0,#0]            ;874  ; LKCon_CmdNum
0001ca  2803              CMP      r0,#3                 ;874
0001cc  d129              BNE      |L15.546|
0001ce  4824              LDR      r0,|L15.608|
0001d0  1c80              ADDS     r0,r0,#2              ;875
0001d2  f7fffffe          BL       IsSimCardCorrect
0001d6  2801              CMP      r0,#1                 ;875
0001d8  d10e              BNE      |L15.504|
0001da  220f              MOVS     r2,#0xf               ;876
0001dc  4920              LDR      r1,|L15.608|
0001de  1c89              ADDS     r1,r1,#2              ;876
0001e0  4821              LDR      r0,|L15.616|
0001e2  f7fffffe          BL       RMLStrcpy
0001e6  4816              LDR      r0,|L15.576|
0001e8  7800              LDRB     r0,[r0,#0]            ;877  ; LKCon_CmdNum
0001ea  1c40              ADDS     r0,r0,#1              ;877
0001ec  4914              LDR      r1,|L15.576|
0001ee  7008              STRB     r0,[r1,#0]            ;877
0001f0  2000              MOVS     r0,#0                 ;878
0001f2  4912              LDR      r1,|L15.572|
0001f4  7008              STRB     r0,[r1,#0]            ;878
0001f6  e01c              B        |L15.562|
                  |L15.504|
0001f8  4811              LDR      r0,|L15.576|
0001fa  7800              LDRB     r0,[r0,#0]            ;880  ; LKCon_CmdNum
0001fc  eb000040          ADD      r0,r0,r0,LSL #1       ;880
000200  4910              LDR      r1,|L15.580|
000202  eb010080          ADD      r0,r1,r0,LSL #2       ;880
000206  7ac0              LDRB     r0,[r0,#0xb]          ;880
000208  1c40              ADDS     r0,r0,#1              ;880
00020a  490d              LDR      r1,|L15.576|
00020c  7809              LDRB     r1,[r1,#0]            ;880  ; LKCon_CmdNum
00020e  eb010141          ADD      r1,r1,r1,LSL #1       ;880
000212  4a0c              LDR      r2,|L15.580|
000214  eb020181          ADD      r1,r2,r1,LSL #2       ;880
000218  72c8              STRB     r0,[r1,#0xb]          ;880
00021a  2000              MOVS     r0,#0                 ;881
00021c  4907              LDR      r1,|L15.572|
00021e  7008              STRB     r0,[r1,#0]            ;881
000220  e007              B        |L15.562|
                  |L15.546|
000222  4807              LDR      r0,|L15.576|
000224  7800              LDRB     r0,[r0,#0]            ;884  ; LKCon_CmdNum
000226  1c40              ADDS     r0,r0,#1              ;884
000228  4905              LDR      r1,|L15.576|
00022a  7008              STRB     r0,[r1,#0]            ;884
00022c  2000              MOVS     r0,#0                 ;885
00022e  4903              LDR      r1,|L15.572|
000230  7008              STRB     r0,[r1,#0]            ;885
                  |L15.562|
000232  e000              B        |L15.566|
                  |L15.564|
000234  bf00              NOP                            ;892
                  |L15.566|
000236  bf00              NOP                            ;818
000238  bf00              NOP      
00023a  e720              B        |L15.126|
;;;896    
                          ENDP

                  |L15.572|
                          DCD      LKConUDP_Status
                  |L15.576|
                          DCD      LKCon_CmdNum
                  |L15.580|
                          DCD      LKClientConCmd
                  |L15.584|
                          DCD      LKClientOverSta
                  |L15.588|
                          DCD      LKCon_WaitTim
                  |L15.592|
000250  434f4e4e          DCB      "CONNECT OK",0
000254  45435420
000258  4f4b00  
00025b  00                DCB      0
                  |L15.604|
                          DCD      s32NumRcv
                  |L15.608|
                          DCD      caSimData
                  |L15.612|
                          DCD      LKConUDP_Times
                  |L15.616|
                          DCD      SIMCardIMSI

                          AREA ||i.LKClient_GoTo_Comm||, CODE, READONLY, ALIGN=2

                  LKClient_GoTo_Comm PROC
;;;1084   /* ------------ comm阶段 相关函数 ------------------- */			 
;;;1085   void LKClient_GoTo_Comm(void)	  
000000  b570              PUSH     {r4-r6,lr}
;;;1086   {
;;;1087   	DEBUG_LOCATION();
000002  bf00              NOP      
000004  f240443f          MOV      r4,#0x43f
000008  a02a              ADR      r0,|L16.180|
00000a  f7fffffe          BL       DebugUart_Putstr
00000e  a02b              ADR      r0,|L16.188|
000010  f7fffffe          BL       DebugUart_Putstr
000014  a030              ADR      r0,|L16.216|
000016  f7fffffe          BL       DebugUart_Putstr
00001a  a030              ADR      r0,|L16.220|
00001c  f7fffffe          BL       DebugUart_Putstr
000020  f44f707a          MOV      r0,#0x3e8
000024  fb94f0f0          SDIV     r0,r4,r0
000028  210a              MOVS     r1,#0xa
00002a  fb90f2f1          SDIV     r2,r0,r1
00002e  fb010012          MLS      r0,r1,r2,r0
000032  3030              ADDS     r0,r0,#0x30
000034  b2c5              UXTB     r5,r0
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       DebugUart_Putchar
00003c  2064              MOVS     r0,#0x64
00003e  fb94f0f0          SDIV     r0,r4,r0
000042  210a              MOVS     r1,#0xa
000044  fb90f2f1          SDIV     r2,r0,r1
000048  fb010012          MLS      r0,r1,r2,r0
00004c  3030              ADDS     r0,r0,#0x30
00004e  b2c5              UXTB     r5,r0
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       DebugUart_Putchar
000056  200a              MOVS     r0,#0xa
000058  fb94f0f0          SDIV     r0,r4,r0
00005c  210a              MOVS     r1,#0xa
00005e  fb90f2f1          SDIV     r2,r0,r1
000062  fb010012          MLS      r0,r1,r2,r0
000066  3030              ADDS     r0,r0,#0x30
000068  b2c5              UXTB     r5,r0
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       DebugUart_Putchar
000070  200a              MOVS     r0,#0xa
000072  fb94f1f0          SDIV     r1,r4,r0
000076  fb004011          MLS      r0,r0,r1,r4
00007a  3030              ADDS     r0,r0,#0x30
00007c  b2c5              UXTB     r5,r0
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       DebugUart_Putchar
000084  a017              ADR      r0,|L16.228|
000086  f7fffffe          BL       DebugUart_Putstr
00008a  bf00              NOP      
;;;1088   	DebugUart_Putstr("Connect Status=Comm\r\n");
00008c  a016              ADR      r0,|L16.232|
00008e  f7fffffe          BL       DebugUart_Putstr
;;;1089   	NowLKClientSta = Comm;
000092  2007              MOVS     r0,#7
000094  491a              LDR      r1,|L16.256|
000096  7008              STRB     r0,[r1,#0]
;;;1090   	CommTimes = 0;
000098  2000              MOVS     r0,#0
00009a  491a              LDR      r1,|L16.260|
00009c  7008              STRB     r0,[r1,#0]
;;;1091   	bConfirm=bFALSE;
00009e  491a              LDR      r1,|L16.264|
0000a0  7008              STRB     r0,[r1,#0]
;;;1092   	ConfirmOK=bFALSE;
0000a2  491a              LDR      r1,|L16.268|
0000a4  7008              STRB     r0,[r1,#0]
;;;1093   	
;;;1094   	Timer_Set(&HeartTim,(HEARTBEAT_FREQUENCY * 1000 ));
0000a6  f64e2160          MOV      r1,#0xea60
0000aa  4819              LDR      r0,|L16.272|
0000ac  f7fffffe          BL       Timer_Set
;;;1095   }
0000b0  bd70              POP      {r4-r6,pc}
;;;1096   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L16.180|
0000b4  5b46696c          DCB      "[File:",0
0000b8  653a00  
0000bb  00                DCB      0
                  |L16.188|
0000bc  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0000c0  70705c4c
0000c4  4b436c69
0000c8  656e745c
0000cc  6c6b636c
0000d0  69656e74
0000d4  2e6300  
0000d7  00                DCB      0
                  |L16.216|
0000d8  202000            DCB      "  ",0
0000db  00                DCB      0
                  |L16.220|
0000dc  6c696e65          DCB      "line:",0
0000e0  3a00    
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L16.228|
0000e4  5d0d0a00          DCB      "]\r\n",0
                  |L16.232|
0000e8  436f6e6e          DCB      "Connect Status=Comm\r\n",0
0000ec  65637420
0000f0  53746174
0000f4  75733d43
0000f8  6f6d6d0d
0000fc  0a00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L16.256|
                          DCD      NowLKClientSta
                  |L16.260|
                          DCD      CommTimes
                  |L16.264|
                          DCD      bConfirm
                  |L16.268|
                          DCD      ConfirmOK
                  |L16.272|
                          DCD      HeartTim

                          AREA ||i.LKClient_GoTo_ConnectUDP||, CODE, READONLY, ALIGN=2

                  LKClient_GoTo_ConnectUDP PROC
;;;794    
;;;795    void LKClient_GoTo_ConnectUDP(void)
000000  b570              PUSH     {r4-r6,lr}
;;;796    {
;;;797    	INT8U i;
;;;798    	NowLKClientSta = Connect;	
000002  2004              MOVS     r0,#4
000004  492e              LDR      r1,|L17.192|
000006  7008              STRB     r0,[r1,#0]
;;;799    	DEBUG_LOCATION();
000008  bf00              NOP      
00000a  f240351f          MOV      r5,#0x31f
00000e  a02d              ADR      r0,|L17.196|
000010  f7fffffe          BL       DebugUart_Putstr
000014  a02d              ADR      r0,|L17.204|
000016  f7fffffe          BL       DebugUart_Putstr
00001a  a033              ADR      r0,|L17.232|
00001c  f7fffffe          BL       DebugUart_Putstr
000020  a032              ADR      r0,|L17.236|
000022  f7fffffe          BL       DebugUart_Putstr
000026  f44f707a          MOV      r0,#0x3e8
00002a  fb95f0f0          SDIV     r0,r5,r0
00002e  210a              MOVS     r1,#0xa
000030  fb90f2f1          SDIV     r2,r0,r1
000034  fb010012          MLS      r0,r1,r2,r0
000038  3030              ADDS     r0,r0,#0x30
00003a  b2c6              UXTB     r6,r0
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       DebugUart_Putchar
000042  2064              MOVS     r0,#0x64
000044  fb95f0f0          SDIV     r0,r5,r0
000048  210a              MOVS     r1,#0xa
00004a  fb90f2f1          SDIV     r2,r0,r1
00004e  fb010012          MLS      r0,r1,r2,r0
000052  3030              ADDS     r0,r0,#0x30
000054  b2c6              UXTB     r6,r0
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       DebugUart_Putchar
00005c  200a              MOVS     r0,#0xa
00005e  fb95f0f0          SDIV     r0,r5,r0
000062  210a              MOVS     r1,#0xa
000064  fb90f2f1          SDIV     r2,r0,r1
000068  fb010012          MLS      r0,r1,r2,r0
00006c  3030              ADDS     r0,r0,#0x30
00006e  b2c6              UXTB     r6,r0
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       DebugUart_Putchar
000076  200a              MOVS     r0,#0xa
000078  fb95f1f0          SDIV     r1,r5,r0
00007c  fb005011          MLS      r0,r0,r1,r5
000080  3030              ADDS     r0,r0,#0x30
000082  b2c6              UXTB     r6,r0
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       DebugUart_Putchar
00008a  a01a              ADR      r0,|L17.244|
00008c  f7fffffe          BL       DebugUart_Putstr
000090  bf00              NOP      
;;;800    	DebugUart_Putstr("Connect Status=connect\r\n");//
000092  a019              ADR      r0,|L17.248|
000094  f7fffffe          BL       DebugUart_Putstr
;;;801    	
;;;802    	LKConUDP_Status = UDP_Ready;
000098  2000              MOVS     r0,#0
00009a  491e              LDR      r1,|L17.276|
00009c  7008              STRB     r0,[r1,#0]
;;;803        LKCon_CmdNum = 0;
00009e  491e              LDR      r1,|L17.280|
0000a0  7008              STRB     r0,[r1,#0]
;;;804    	for( i = 0 ; i < 10 ; i++ )
0000a2  2400              MOVS     r4,#0
0000a4  e008              B        |L17.184|
                  |L17.166|
;;;805    	{
;;;806    		LKClientConCmd[i].FailTime = 0;	
0000a6  2000              MOVS     r0,#0
0000a8  eb040144          ADD      r1,r4,r4,LSL #1
0000ac  4a1b              LDR      r2,|L17.284|
0000ae  eb020181          ADD      r1,r2,r1,LSL #2
0000b2  72c8              STRB     r0,[r1,#0xb]
0000b4  1c60              ADDS     r0,r4,#1              ;804
0000b6  b2c4              UXTB     r4,r0                 ;804
                  |L17.184|
0000b8  2c0a              CMP      r4,#0xa               ;804
0000ba  dbf4              BLT      |L17.166|
;;;807    	}
;;;808    }
0000bc  bd70              POP      {r4-r6,pc}
;;;809    
                          ENDP

0000be  0000              DCW      0x0000
                  |L17.192|
                          DCD      NowLKClientSta
                  |L17.196|
0000c4  5b46696c          DCB      "[File:",0
0000c8  653a00  
0000cb  00                DCB      0
                  |L17.204|
0000cc  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0000d0  70705c4c
0000d4  4b436c69
0000d8  656e745c
0000dc  6c6b636c
0000e0  69656e74
0000e4  2e6300  
0000e7  00                DCB      0
                  |L17.232|
0000e8  202000            DCB      "  ",0
0000eb  00                DCB      0
                  |L17.236|
0000ec  6c696e65          DCB      "line:",0
0000f0  3a00    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L17.244|
0000f4  5d0d0a00          DCB      "]\r\n",0
                  |L17.248|
0000f8  436f6e6e          DCB      "Connect Status=connect\r\n",0
0000fc  65637420
000100  53746174
000104  75733d63
000108  6f6e6e65
00010c  63740d0a
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L17.276|
                          DCD      LKConUDP_Status
                  |L17.280|
                          DCD      LKCon_CmdNum
                  |L17.284|
                          DCD      LKClientConCmd

                          AREA ||i.LKClient_GoTo_LogOut||, CODE, READONLY, ALIGN=2

                  LKClient_GoTo_LogOut PROC
;;;1228   /* ---------- LogOut阶段 相关函数 -----------------*/
;;;1229   void LKClient_GoTo_LogOut(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1230   {
;;;1231   	NowLKClientSta = LogOut;
000002  2008              MOVS     r0,#8
000004  492f              LDR      r1,|L18.196|
000006  7008              STRB     r0,[r1,#0]
;;;1232   	DEBUG_LOCATION();
000008  bf00              NOP      
00000a  f44f649a          MOV      r4,#0x4d0
00000e  a02e              ADR      r0,|L18.200|
000010  f7fffffe          BL       DebugUart_Putstr
000014  a02e              ADR      r0,|L18.208|
000016  f7fffffe          BL       DebugUart_Putstr
00001a  a034              ADR      r0,|L18.236|
00001c  f7fffffe          BL       DebugUart_Putstr
000020  a033              ADR      r0,|L18.240|
000022  f7fffffe          BL       DebugUart_Putstr
000026  f44f707a          MOV      r0,#0x3e8
00002a  fb94f0f0          SDIV     r0,r4,r0
00002e  210a              MOVS     r1,#0xa
000030  fb90f2f1          SDIV     r2,r0,r1
000034  fb010012          MLS      r0,r1,r2,r0
000038  3030              ADDS     r0,r0,#0x30
00003a  b2c5              UXTB     r5,r0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       DebugUart_Putchar
000042  2064              MOVS     r0,#0x64
000044  fb94f0f0          SDIV     r0,r4,r0
000048  210a              MOVS     r1,#0xa
00004a  fb90f2f1          SDIV     r2,r0,r1
00004e  fb010012          MLS      r0,r1,r2,r0
000052  3030              ADDS     r0,r0,#0x30
000054  b2c5              UXTB     r5,r0
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       DebugUart_Putchar
00005c  200a              MOVS     r0,#0xa
00005e  fb94f0f0          SDIV     r0,r4,r0
000062  210a              MOVS     r1,#0xa
000064  fb90f2f1          SDIV     r2,r0,r1
000068  fb010012          MLS      r0,r1,r2,r0
00006c  3030              ADDS     r0,r0,#0x30
00006e  b2c5              UXTB     r5,r0
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       DebugUart_Putchar
000076  200a              MOVS     r0,#0xa
000078  fb94f1f0          SDIV     r1,r4,r0
00007c  fb004011          MLS      r0,r0,r1,r4
000080  3030              ADDS     r0,r0,#0x30
000082  b2c5              UXTB     r5,r0
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       DebugUart_Putchar
00008a  a01b              ADR      r0,|L18.248|
00008c  f7fffffe          BL       DebugUart_Putstr
000090  bf00              NOP      
;;;1233   	DebugUart_Putstr("Connect Status=LogOut\r\n");//
000092  a01a              ADR      r0,|L18.252|
000094  f7fffffe          BL       DebugUart_Putstr
;;;1234   	
;;;1235   	LogOutOK = bFALSE;
000098  2000              MOVS     r0,#0
00009a  491e              LDR      r1,|L18.276|
00009c  7008              STRB     r0,[r1,#0]
;;;1236   	CommTimes = 0;
00009e  491e              LDR      r1,|L18.280|
0000a0  7008              STRB     r0,[r1,#0]
;;;1237   	LKClient_TransmitSta = Ready;
0000a2  491e              LDR      r1,|L18.284|
0000a4  7008              STRB     r0,[r1,#0]
;;;1238   	memset(LKClientMsg,0,110);//addmemset  2015.7.10
0000a6  216e              MOVS     r1,#0x6e
0000a8  481d              LDR      r0,|L18.288|
0000aa  f7fffffe          BL       __aeabi_memclr
;;;1239   	LKClient_PackLogOutInfo(LKClientMsg);
0000ae  481c              LDR      r0,|L18.288|
0000b0  f7fffffe          BL       LKClient_PackLogOutInfo
;;;1240   	LKClient_AddFlowID();
0000b4  f7fffffe          BL       LKClient_AddFlowID
;;;1241   	Timer_Set( &LogOutTim,1000 );
0000b8  f44f717a          MOV      r1,#0x3e8
0000bc  4819              LDR      r0,|L18.292|
0000be  f7fffffe          BL       Timer_Set
;;;1242   }
0000c2  bd70              POP      {r4-r6,pc}
;;;1243   
                          ENDP

                  |L18.196|
                          DCD      NowLKClientSta
                  |L18.200|
0000c8  5b46696c          DCB      "[File:",0
0000cc  653a00  
0000cf  00                DCB      0
                  |L18.208|
0000d0  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0000d4  70705c4c
0000d8  4b436c69
0000dc  656e745c
0000e0  6c6b636c
0000e4  69656e74
0000e8  2e6300  
0000eb  00                DCB      0
                  |L18.236|
0000ec  202000            DCB      "  ",0
0000ef  00                DCB      0
                  |L18.240|
0000f0  6c696e65          DCB      "line:",0
0000f4  3a00    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L18.248|
0000f8  5d0d0a00          DCB      "]\r\n",0
                  |L18.252|
0000fc  436f6e6e          DCB      "Connect Status=LogOut\r\n",0
000100  65637420
000104  53746174
000108  75733d4c
00010c  6f674f75
000110  740d0a00
                  |L18.276|
                          DCD      LogOutOK
                  |L18.280|
                          DCD      CommTimes
                  |L18.284|
                          DCD      LKClient_TransmitSta
                  |L18.288|
                          DCD      LKClientMsg
                  |L18.292|
                          DCD      LogOutTim

                          AREA ||i.LKClient_GoTo_Login||, CODE, READONLY, ALIGN=2

                  LKClient_GoTo_Login PROC
;;;898    /* ------------ Login阶段 相关函数 ------------------ */
;;;899    void LKClient_GoTo_Login(void)
000000  b570              PUSH     {r4-r6,lr}
;;;900    {
;;;901    	NowLKClientSta = Loging;
000002  2005              MOVS     r0,#5
000004  4930              LDR      r1,|L19.200|
000006  7008              STRB     r0,[r1,#0]
;;;902    	DEBUG_LOCATION();
000008  bf00              NOP      
00000a  f2403486          MOV      r4,#0x386
00000e  a02f              ADR      r0,|L19.204|
000010  f7fffffe          BL       DebugUart_Putstr
000014  a02f              ADR      r0,|L19.212|
000016  f7fffffe          BL       DebugUart_Putstr
00001a  a035              ADR      r0,|L19.240|
00001c  f7fffffe          BL       DebugUart_Putstr
000020  a034              ADR      r0,|L19.244|
000022  f7fffffe          BL       DebugUart_Putstr
000026  f44f707a          MOV      r0,#0x3e8
00002a  fb94f0f0          SDIV     r0,r4,r0
00002e  210a              MOVS     r1,#0xa
000030  fb90f2f1          SDIV     r2,r0,r1
000034  fb010012          MLS      r0,r1,r2,r0
000038  3030              ADDS     r0,r0,#0x30
00003a  b2c5              UXTB     r5,r0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       DebugUart_Putchar
000042  2064              MOVS     r0,#0x64
000044  fb94f0f0          SDIV     r0,r4,r0
000048  210a              MOVS     r1,#0xa
00004a  fb90f2f1          SDIV     r2,r0,r1
00004e  fb010012          MLS      r0,r1,r2,r0
000052  3030              ADDS     r0,r0,#0x30
000054  b2c5              UXTB     r5,r0
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       DebugUart_Putchar
00005c  200a              MOVS     r0,#0xa
00005e  fb94f0f0          SDIV     r0,r4,r0
000062  210a              MOVS     r1,#0xa
000064  fb90f2f1          SDIV     r2,r0,r1
000068  fb010012          MLS      r0,r1,r2,r0
00006c  3030              ADDS     r0,r0,#0x30
00006e  b2c5              UXTB     r5,r0
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       DebugUart_Putchar
000076  200a              MOVS     r0,#0xa
000078  fb94f1f0          SDIV     r1,r4,r0
00007c  fb004011          MLS      r0,r0,r1,r4
000080  3030              ADDS     r0,r0,#0x30
000082  b2c5              UXTB     r5,r0
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       DebugUart_Putchar
00008a  a01c              ADR      r0,|L19.252|
00008c  f7fffffe          BL       DebugUart_Putstr
000090  bf00              NOP      
;;;903    	DebugUart_Putstr("Connect Status=logging\r\n");//
000092  a01b              ADR      r0,|L19.256|
000094  f7fffffe          BL       DebugUart_Putstr
;;;904    	
;;;905    	LKClient_TransmitSta = Ready;
000098  2000              MOVS     r0,#0
00009a  4920              LDR      r1,|L19.284|
00009c  7008              STRB     r0,[r1,#0]
;;;906    	CommTimes = 0;
00009e  4920              LDR      r1,|L19.288|
0000a0  7008              STRB     r0,[r1,#0]
;;;907    	Timer_Set(&LoginTim,1000);
0000a2  f44f717a          MOV      r1,#0x3e8
0000a6  481f              LDR      r0,|L19.292|
0000a8  f7fffffe          BL       Timer_Set
;;;908    	LogSta = 0;
0000ac  2000              MOVS     r0,#0
0000ae  491e              LDR      r1,|L19.296|
0000b0  7008              STRB     r0,[r1,#0]
;;;909    memset(LKClientMsg,0,110);//addmemset  2015.7.10
0000b2  216e              MOVS     r1,#0x6e
0000b4  481d              LDR      r0,|L19.300|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;910    	LKClient_PackLogInfo(LKClientMsg);
0000ba  481c              LDR      r0,|L19.300|
0000bc  f7fffffe          BL       LKClient_PackLogInfo
;;;911    	LKClient_AddFlowID();
0000c0  f7fffffe          BL       LKClient_AddFlowID
;;;912    }
0000c4  bd70              POP      {r4-r6,pc}
;;;913    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L19.200|
                          DCD      NowLKClientSta
                  |L19.204|
0000cc  5b46696c          DCB      "[File:",0
0000d0  653a00  
0000d3  00                DCB      0
                  |L19.212|
0000d4  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0000d8  70705c4c
0000dc  4b436c69
0000e0  656e745c
0000e4  6c6b636c
0000e8  69656e74
0000ec  2e6300  
0000ef  00                DCB      0
                  |L19.240|
0000f0  202000            DCB      "  ",0
0000f3  00                DCB      0
                  |L19.244|
0000f4  6c696e65          DCB      "line:",0
0000f8  3a00    
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L19.252|
0000fc  5d0d0a00          DCB      "]\r\n",0
                  |L19.256|
000100  436f6e6e          DCB      "Connect Status=logging\r\n",0
000104  65637420
000108  53746174
00010c  75733d6c
000110  6f676769
000114  6e670d0a
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L19.284|
                          DCD      LKClient_TransmitSta
                  |L19.288|
                          DCD      CommTimes
                  |L19.292|
                          DCD      LoginTim
                  |L19.296|
                          DCD      LogSta
                  |L19.300|
                          DCD      LKClientMsg

                          AREA ||i.LKClient_GoTo_Start||, CODE, READONLY, ALIGN=2

                  LKClient_GoTo_Start PROC
;;;730    /* ------------ Start阶段 相关函数 ------------------ */
;;;731    void LKClient_GoTo_Start(void)
000000  b570              PUSH     {r4-r6,lr}
;;;732    {
;;;733    	NowLKClientSta = Start;
000002  2002              MOVS     r0,#2
000004  492a              LDR      r1,|L20.176|
000006  7008              STRB     r0,[r1,#0]
;;;734    	DEBUG_LOCATION();
000008  bf00              NOP      
00000a  f24024de          MOV      r4,#0x2de
00000e  a029              ADR      r0,|L20.180|
000010  f7fffffe          BL       DebugUart_Putstr
000014  a029              ADR      r0,|L20.188|
000016  f7fffffe          BL       DebugUart_Putstr
00001a  a02f              ADR      r0,|L20.216|
00001c  f7fffffe          BL       DebugUart_Putstr
000020  a02e              ADR      r0,|L20.220|
000022  f7fffffe          BL       DebugUart_Putstr
000026  f44f707a          MOV      r0,#0x3e8
00002a  fb94f0f0          SDIV     r0,r4,r0
00002e  210a              MOVS     r1,#0xa
000030  fb90f2f1          SDIV     r2,r0,r1
000034  fb010012          MLS      r0,r1,r2,r0
000038  3030              ADDS     r0,r0,#0x30
00003a  b2c5              UXTB     r5,r0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       DebugUart_Putchar
000042  2064              MOVS     r0,#0x64
000044  fb94f0f0          SDIV     r0,r4,r0
000048  210a              MOVS     r1,#0xa
00004a  fb90f2f1          SDIV     r2,r0,r1
00004e  fb010012          MLS      r0,r1,r2,r0
000052  3030              ADDS     r0,r0,#0x30
000054  b2c5              UXTB     r5,r0
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       DebugUart_Putchar
00005c  200a              MOVS     r0,#0xa
00005e  fb94f0f0          SDIV     r0,r4,r0
000062  210a              MOVS     r1,#0xa
000064  fb90f2f1          SDIV     r2,r0,r1
000068  fb010012          MLS      r0,r1,r2,r0
00006c  3030              ADDS     r0,r0,#0x30
00006e  b2c5              UXTB     r5,r0
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       DebugUart_Putchar
000076  200a              MOVS     r0,#0xa
000078  fb94f1f0          SDIV     r1,r4,r0
00007c  fb004011          MLS      r0,r0,r1,r4
000080  3030              ADDS     r0,r0,#0x30
000082  b2c5              UXTB     r5,r0
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       DebugUart_Putchar
00008a  a016              ADR      r0,|L20.228|
00008c  f7fffffe          BL       DebugUart_Putstr
000090  bf00              NOP      
;;;735    	DebugUart_Putstr("Connect Status=start\r\n");//
000092  a015              ADR      r0,|L20.232|
000094  f7fffffe          BL       DebugUart_Putstr
;;;736    	
;;;737    	LKClient_StartSta = Pre;
000098  2000              MOVS     r0,#0
00009a  4919              LDR      r1,|L20.256|
00009c  7008              STRB     r0,[r1,#0]
;;;738    	Sim900A_UART_Enable();			 
00009e  f7fffffe          BL       Sim900A_UART_Enable
;;;739    	Sim900A_Enable_RcvIT();
0000a2  f7fffffe          BL       Sim900A_Enable_RcvIT
;;;740    	LKClient_StartTimes = 0;
0000a6  2000              MOVS     r0,#0
0000a8  4916              LDR      r1,|L20.260|
0000aa  7008              STRB     r0,[r1,#0]
;;;741    }
0000ac  bd70              POP      {r4-r6,pc}
;;;742    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L20.176|
                          DCD      NowLKClientSta
                  |L20.180|
0000b4  5b46696c          DCB      "[File:",0
0000b8  653a00  
0000bb  00                DCB      0
                  |L20.188|
0000bc  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0000c0  70705c4c
0000c4  4b436c69
0000c8  656e745c
0000cc  6c6b636c
0000d0  69656e74
0000d4  2e6300  
0000d7  00                DCB      0
                  |L20.216|
0000d8  202000            DCB      "  ",0
0000db  00                DCB      0
                  |L20.220|
0000dc  6c696e65          DCB      "line:",0
0000e0  3a00    
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L20.228|
0000e4  5d0d0a00          DCB      "]\r\n",0
                  |L20.232|
0000e8  436f6e6e          DCB      "Connect Status=start\r\n",0
0000ec  65637420
0000f0  53746174
0000f4  75733d73
0000f8  74617274
0000fc  0d0a00  
0000ff  00                DCB      0
                  |L20.256|
                          DCD      LKClient_StartSta
                  |L20.260|
                          DCD      LKClient_StartTimes

                          AREA ||i.LKClient_GoTo_Stop||, CODE, READONLY, ALIGN=2

                  LKClient_GoTo_Stop PROC
;;;663    /* ------------- Stop阶段 相关函数 ------------------ */
;;;664    void LKClient_GoTo_Stop(INT32U StopTime)
000000  b570              PUSH     {r4-r6,lr}
;;;665    {
000002  4605              MOV      r5,r0
;;;666    	NowLKClientSta = Stop;
000004  2001              MOVS     r0,#1
000006  4929              LDR      r1,|L21.172|
000008  7008              STRB     r0,[r1,#0]
;;;667    		
;;;668    	DEBUG_LOCATION();
00000a  bf00              NOP      
00000c  f44f7427          MOV      r4,#0x29c
000010  a027              ADR      r0,|L21.176|
000012  f7fffffe          BL       DebugUart_Putstr
000016  a028              ADR      r0,|L21.184|
000018  f7fffffe          BL       DebugUart_Putstr
00001c  a02d              ADR      r0,|L21.212|
00001e  f7fffffe          BL       DebugUart_Putstr
000022  a02d              ADR      r0,|L21.216|
000024  f7fffffe          BL       DebugUart_Putstr
000028  f44f707a          MOV      r0,#0x3e8
00002c  fb94f0f0          SDIV     r0,r4,r0
000030  210a              MOVS     r1,#0xa
000032  fb90f2f1          SDIV     r2,r0,r1
000036  fb010012          MLS      r0,r1,r2,r0
00003a  3030              ADDS     r0,r0,#0x30
00003c  b2c6              UXTB     r6,r0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       DebugUart_Putchar
000044  2064              MOVS     r0,#0x64
000046  fb94f0f0          SDIV     r0,r4,r0
00004a  210a              MOVS     r1,#0xa
00004c  fb90f2f1          SDIV     r2,r0,r1
000050  fb010012          MLS      r0,r1,r2,r0
000054  3030              ADDS     r0,r0,#0x30
000056  b2c6              UXTB     r6,r0
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       DebugUart_Putchar
00005e  200a              MOVS     r0,#0xa
000060  fb94f0f0          SDIV     r0,r4,r0
000064  210a              MOVS     r1,#0xa
000066  fb90f2f1          SDIV     r2,r0,r1
00006a  fb010012          MLS      r0,r1,r2,r0
00006e  3030              ADDS     r0,r0,#0x30
000070  b2c6              UXTB     r6,r0
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       DebugUart_Putchar
000078  200a              MOVS     r0,#0xa
00007a  fb94f1f0          SDIV     r1,r4,r0
00007e  fb004011          MLS      r0,r0,r1,r4
000082  3030              ADDS     r0,r0,#0x30
000084  b2c6              UXTB     r6,r0
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       DebugUart_Putchar
00008c  a014              ADR      r0,|L21.224|
00008e  f7fffffe          BL       DebugUart_Putstr
000092  bf00              NOP      
;;;669    	DebugUart_Putstr("Connect Status=stop\r\n");//
000094  a013              ADR      r0,|L21.228|
000096  f7fffffe          BL       DebugUart_Putstr
;;;670    	LKClient_StopSta = PreStop;
00009a  2000              MOVS     r0,#0
00009c  4917              LDR      r1,|L21.252|
00009e  7008              STRB     r0,[r1,#0]
;;;671    	LKClient_StopTime = StopTime;
0000a0  4817              LDR      r0,|L21.256|
0000a2  6005              STR      r5,[r0,#0]  ; LKClient_StopTime
;;;672    	LKClient_StopTimes = 0;
0000a4  2000              MOVS     r0,#0
0000a6  4917              LDR      r1,|L21.260|
0000a8  7008              STRB     r0,[r1,#0]
;;;673    }
0000aa  bd70              POP      {r4-r6,pc}
;;;674    
                          ENDP

                  |L21.172|
                          DCD      NowLKClientSta
                  |L21.176|
0000b0  5b46696c          DCB      "[File:",0
0000b4  653a00  
0000b7  00                DCB      0
                  |L21.184|
0000b8  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0000bc  70705c4c
0000c0  4b436c69
0000c4  656e745c
0000c8  6c6b636c
0000cc  69656e74
0000d0  2e6300  
0000d3  00                DCB      0
                  |L21.212|
0000d4  202000            DCB      "  ",0
0000d7  00                DCB      0
                  |L21.216|
0000d8  6c696e65          DCB      "line:",0
0000dc  3a00    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L21.224|
0000e0  5d0d0a00          DCB      "]\r\n",0
                  |L21.228|
0000e4  436f6e6e          DCB      "Connect Status=stop\r\n",0
0000e8  65637420
0000ec  53746174
0000f0  75733d73
0000f4  746f700d
0000f8  0a00    
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L21.252|
                          DCD      LKClient_StopSta
                  |L21.256|
                          DCD      LKClient_StopTime
                  |L21.260|
                          DCD      LKClient_StopTimes

                          AREA ||i.LKClient_GoTo_Update||, CODE, READONLY, ALIGN=2

                  LKClient_GoTo_Update PROC
;;;993    /* ------------ Update阶段 相关函数 ----------------- */
;;;994    void LKClient_GoTo_Update(void)
000000  b570              PUSH     {r4-r6,lr}
;;;995    {
;;;996    	NowLKClientSta = Update;
000002  2006              MOVS     r0,#6
000004  492e              LDR      r1,|L22.192|
000006  7008              STRB     r0,[r1,#0]
;;;997    			DEBUG_LOCATION();
000008  bf00              NOP      
00000a  f24034e5          MOV      r4,#0x3e5
00000e  a02d              ADR      r0,|L22.196|
000010  f7fffffe          BL       DebugUart_Putstr
000014  a02d              ADR      r0,|L22.204|
000016  f7fffffe          BL       DebugUart_Putstr
00001a  a033              ADR      r0,|L22.232|
00001c  f7fffffe          BL       DebugUart_Putstr
000020  a032              ADR      r0,|L22.236|
000022  f7fffffe          BL       DebugUart_Putstr
000026  1ce0              ADDS     r0,r4,#3
000028  fb94f0f0          SDIV     r0,r4,r0
00002c  210a              MOVS     r1,#0xa
00002e  fb90f2f1          SDIV     r2,r0,r1
000032  fb010012          MLS      r0,r1,r2,r0
000036  3030              ADDS     r0,r0,#0x30
000038  b2c5              UXTB     r5,r0
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       DebugUart_Putchar
000040  2064              MOVS     r0,#0x64
000042  fb94f0f0          SDIV     r0,r4,r0
000046  210a              MOVS     r1,#0xa
000048  fb90f2f1          SDIV     r2,r0,r1
00004c  fb010012          MLS      r0,r1,r2,r0
000050  3030              ADDS     r0,r0,#0x30
000052  b2c5              UXTB     r5,r0
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       DebugUart_Putchar
00005a  200a              MOVS     r0,#0xa
00005c  fb94f0f0          SDIV     r0,r4,r0
000060  210a              MOVS     r1,#0xa
000062  fb90f2f1          SDIV     r2,r0,r1
000066  fb010012          MLS      r0,r1,r2,r0
00006a  3030              ADDS     r0,r0,#0x30
00006c  b2c5              UXTB     r5,r0
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       DebugUart_Putchar
000074  200a              MOVS     r0,#0xa
000076  fb94f1f0          SDIV     r1,r4,r0
00007a  fb004011          MLS      r0,r0,r1,r4
00007e  3030              ADDS     r0,r0,#0x30
000080  b2c5              UXTB     r5,r0
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       DebugUart_Putchar
000088  a01a              ADR      r0,|L22.244|
00008a  f7fffffe          BL       DebugUart_Putstr
00008e  bf00              NOP      
;;;998    	DebugUart_Putstr("Connect Status=Update\r\n");//
000090  a019              ADR      r0,|L22.248|
000092  f7fffffe          BL       DebugUart_Putstr
;;;999    	
;;;1000   	LKClient_TransmitSta = Ready;
000096  2000              MOVS     r0,#0
000098  491d              LDR      r1,|L22.272|
00009a  7008              STRB     r0,[r1,#0]
;;;1001   	IAPOver = bFALSE;
00009c  491d              LDR      r1,|L22.276|
00009e  7008              STRB     r0,[r1,#0]
;;;1002   	CommTimes = 0;
0000a0  491d              LDR      r1,|L22.280|
0000a2  7008              STRB     r0,[r1,#0]
;;;1003   	
;;;1004   	Timer_Set(&IAPTim,1000);
0000a4  1ce1              ADDS     r1,r4,#3
0000a6  481d              LDR      r0,|L22.284|
0000a8  f7fffffe          BL       Timer_Set
;;;1005   	memset(LKClientMsg,0,110);//addmemset  2015.7.10
0000ac  216e              MOVS     r1,#0x6e
0000ae  481c              LDR      r0,|L22.288|
0000b0  f7fffffe          BL       __aeabi_memclr
;;;1006   	LKClient_PackIAPInfo(LKClientMsg);
0000b4  481a              LDR      r0,|L22.288|
0000b6  f7fffffe          BL       LKClient_PackIAPInfo
;;;1007   	LKClient_AddFlowID();
0000ba  f7fffffe          BL       LKClient_AddFlowID
;;;1008   }
0000be  bd70              POP      {r4-r6,pc}
;;;1009   
                          ENDP

                  |L22.192|
                          DCD      NowLKClientSta
                  |L22.196|
0000c4  5b46696c          DCB      "[File:",0
0000c8  653a00  
0000cb  00                DCB      0
                  |L22.204|
0000cc  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0000d0  70705c4c
0000d4  4b436c69
0000d8  656e745c
0000dc  6c6b636c
0000e0  69656e74
0000e4  2e6300  
0000e7  00                DCB      0
                  |L22.232|
0000e8  202000            DCB      "  ",0
0000eb  00                DCB      0
                  |L22.236|
0000ec  6c696e65          DCB      "line:",0
0000f0  3a00    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L22.244|
0000f4  5d0d0a00          DCB      "]\r\n",0
                  |L22.248|
0000f8  436f6e6e          DCB      "Connect Status=Update\r\n",0
0000fc  65637420
000100  53746174
000104  75733d55
000108  70646174
00010c  650d0a00
                  |L22.272|
                          DCD      LKClient_TransmitSta
                  |L22.276|
                          DCD      IAPOver
                  |L22.280|
                          DCD      CommTimes
                  |L22.284|
                          DCD      IAPTim
                  |L22.288|
                          DCD      LKClientMsg

                          AREA ||i.LKClient_LogOut_Run||, CODE, READONLY, ALIGN=1

                  LKClient_LogOut_Run PROC
;;;1310   
;;;1311   void LKClient_LogOut_Run(void)
000000  b510              PUSH     {r4,lr}
;;;1312   {
;;;1313   	LKClient_RcvMsg_Task();
000002  f7fffffe          BL       LKClient_RcvMsg_Task
;;;1314   	LKClient_LogOut_Task();
000006  f7fffffe          BL       LKClient_LogOut_Task
;;;1315   }
00000a  bd10              POP      {r4,pc}
;;;1316   
                          ENDP


                          AREA ||i.LKClient_LogOut_Task||, CODE, READONLY, ALIGN=2

                  LKClient_LogOut_Task PROC
;;;1244   
;;;1245   void LKClient_LogOut_Task(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;1246   {
;;;1247   	switch (LKClient_TransmitSta)
000002  4869              LDR      r0,|L24.424|
000004  7800              LDRB     r0,[r0,#0]  ; LKClient_TransmitSta
000006  b130              CBZ      r0,|L24.22|
000008  2801              CMP      r0,#1
00000a  d01f              BEQ      |L24.76|
00000c  2802              CMP      r0,#2
00000e  d02c              BEQ      |L24.106|
000010  2803              CMP      r0,#3
000012  d17d              BNE      |L24.272|
000014  e0ae              B        |L24.372|
                  |L24.22|
;;;1248       {
;;;1249   		case (Ready):
;;;1250   			if(Timer_GetReached(&LogOutTim) == bTRUE){
000016  4865              LDR      r0,|L24.428|
000018  f7fffffe          BL       Timer_GetReached
00001c  2801              CMP      r0,#1
00001e  d10c              BNE      |L24.58|
;;;1251   				/* 通信断开 */
;;;1252   				if(CommTimes == 5){
000020  4863              LDR      r0,|L24.432|
000022  7800              LDRB     r0,[r0,#0]  ; CommTimes
000024  2805              CMP      r0,#5
000026  d104              BNE      |L24.50|
;;;1253   					LKClient_GoTo_Stop(5000);
000028  f2413088          MOV      r0,#0x1388
00002c  f7fffffe          BL       LKClient_GoTo_Stop
000030  e00b              B        |L24.74|
                  |L24.50|
;;;1254   				/* 重发 */
;;;1255   				}else{
;;;1256   					LKClient_TransmitSta = Prepare;				
000032  2001              MOVS     r0,#1
000034  495c              LDR      r1,|L24.424|
000036  7008              STRB     r0,[r1,#0]
000038  e007              B        |L24.74|
                  |L24.58|
;;;1257   				}
;;;1258   			}else{
;;;1259   				if(LogOutOK == bTRUE){
00003a  485e              LDR      r0,|L24.436|
00003c  7800              LDRB     r0,[r0,#0]  ; LogOutOK
00003e  2801              CMP      r0,#1
000040  d103              BNE      |L24.74|
;;;1260   					LKClient_GoTo_Stop(5000);
000042  f2413088          MOV      r0,#0x1388
000046  f7fffffe          BL       LKClient_GoTo_Stop
                  |L24.74|
;;;1261   				}						
;;;1262   			}
;;;1263   			break;
00004a  e0aa              B        |L24.418|
                  |L24.76|
;;;1264   
;;;1265   		case (Prepare):
;;;1266   			Sim900_CheckPreSendInfoStart();
00004c  f7fffffe          BL       Sim900_CheckPreSendInfoStart
;;;1267   			SendMsgToSim900A((BYTE *)"AT+CIPSEND=16\r\n",15);
000050  210f              MOVS     r1,#0xf
000052  a059              ADR      r0,|L24.440|
000054  f7fffffe          BL       SendMsgToSim900A
;;;1268   			LKClient_TransmitSta = Sending;
000058  2002              MOVS     r0,#2
00005a  4953              LDR      r1,|L24.424|
00005c  7008              STRB     r0,[r1,#0]
;;;1269   			Timer_Set(&LKMsgTim,500);
00005e  f44f71fa          MOV      r1,#0x1f4
000062  4859              LDR      r0,|L24.456|
000064  f7fffffe          BL       Timer_Set
;;;1270   			break;
000068  e09b              B        |L24.418|
                  |L24.106|
;;;1271   
;;;1272   		case (Sending):
;;;1273   			if( (Sim900_bPreSendInfo()) || (Timer_GetReached(&LKMsgTim) == bTRUE) ){
00006a  f7fffffe          BL       Sim900_bPreSendInfo
00006e  b920              CBNZ     r0,|L24.122|
000070  4855              LDR      r0,|L24.456|
000072  f7fffffe          BL       Timer_GetReached
000076  2801              CMP      r0,#1
000078  d17b              BNE      |L24.370|
                  |L24.122|
;;;1274   				
;;;1275   				DEBUG_LOCATION();
00007a  bf00              NOP      
00007c  f24044fb          MOV      r4,#0x4fb
000080  a052              ADR      r0,|L24.460|
000082  f7fffffe          BL       DebugUart_Putstr
000086  a053              ADR      r0,|L24.468|
000088  f7fffffe          BL       DebugUart_Putstr
00008c  a058              ADR      r0,|L24.496|
00008e  f7fffffe          BL       DebugUart_Putstr
000092  a058              ADR      r0,|L24.500|
000094  f7fffffe          BL       DebugUart_Putstr
000098  f44f707a          MOV      r0,#0x3e8
00009c  fb94f0f0          SDIV     r0,r4,r0
0000a0  210a              MOVS     r1,#0xa
0000a2  fb90f2f1          SDIV     r2,r0,r1
0000a6  fb010012          MLS      r0,r1,r2,r0
0000aa  3030              ADDS     r0,r0,#0x30
0000ac  b2c5              UXTB     r5,r0
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       DebugUart_Putchar
0000b4  2064              MOVS     r0,#0x64
0000b6  fb94f0f0          SDIV     r0,r4,r0
0000ba  210a              MOVS     r1,#0xa
0000bc  fb90f2f1          SDIV     r2,r0,r1
0000c0  fb010012          MLS      r0,r1,r2,r0
0000c4  3030              ADDS     r0,r0,#0x30
0000c6  b2c5              UXTB     r5,r0
0000c8  4628              MOV      r0,r5
0000ca  f7fffffe          BL       DebugUart_Putchar
0000ce  200a              MOVS     r0,#0xa
0000d0  fb94f0f0          SDIV     r0,r4,r0
0000d4  210a              MOVS     r1,#0xa
0000d6  fb90f2f1          SDIV     r2,r0,r1
0000da  fb010012          MLS      r0,r1,r2,r0
0000de  3030              ADDS     r0,r0,#0x30
0000e0  b2c5              UXTB     r5,r0
0000e2  4628              MOV      r0,r5
0000e4  f7fffffe          BL       DebugUart_Putchar
0000e8  200a              MOVS     r0,#0xa
0000ea  fb94f1f0          SDIV     r1,r4,r0
0000ee  fb004011          MLS      r0,r0,r1,r4
0000f2  3030              ADDS     r0,r0,#0x30
0000f4  b2c5              UXTB     r5,r0
0000f6  4628              MOV      r0,r5
0000f8  f7fffffe          BL       DebugUart_Putchar
0000fc  a03f              ADR      r0,|L24.508|
0000fe  f7fffffe          BL       DebugUart_Putstr
000102  bf00              NOP      
;;;1276   				DebugUart_Putstr("\r\n********************send************************\r\n");
000104  a03e              ADR      r0,|L24.512|
000106  f7fffffe          BL       DebugUart_Putstr
;;;1277   				do 
00010a  bf00              NOP      
;;;1278   				{
;;;1279   					char hexBuf[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
00010c  a34a              ADR      r3,|L24.568|
00010e  e000              B        |L24.274|
                  |L24.272|
000110  e046              B        |L24.416|
                  |L24.274|
000112  e9d32000          LDRD     r2,r0,[r3,#0]
000116  e9d31302          LDRD     r1,r3,[r3,#8]
00011a  ae01              ADD      r6,sp,#4
00011c  c60b              STM      r6!,{r0,r1,r3}
00011e  9200              STR      r2,[sp,#0]
;;;1280   					int i;
;;;1281   					
;;;1282   					for(i=0; i<16; i++)
000120  2400              MOVS     r4,#0
000122  e010              B        |L24.326|
                  |L24.292|
;;;1283   					{
;;;1284   						DebugUart_Putchar(hexBuf[(LKClientMsg[i]>>4) & 0xf]);
000124  4948              LDR      r1,|L24.584|
000126  5d09              LDRB     r1,[r1,r4]
000128  466a              MOV      r2,sp
00012a  eb021111          ADD      r1,r2,r1,LSR #4
00012e  7808              LDRB     r0,[r1,#0]
000130  f7fffffe          BL       DebugUart_Putchar
;;;1285   						DebugUart_Putchar(hexBuf[(LKClientMsg[i]) & 0xf]);
000134  4944              LDR      r1,|L24.584|
000136  5d09              LDRB     r1,[r1,r4]
000138  f001010f          AND      r1,r1,#0xf
00013c  f81d0001          LDRB     r0,[sp,r1]
000140  f7fffffe          BL       DebugUart_Putchar
000144  1c64              ADDS     r4,r4,#1              ;1282
                  |L24.326|
000146  2c10              CMP      r4,#0x10              ;1282
000148  dbec              BLT      |L24.292|
;;;1286   					}
;;;1287   				}while(0);
00014a  bf00              NOP      
;;;1288   				DebugUart_Putstr("\r\n********************end*************************\r\n");
00014c  e000              B        |L24.336|
00014e  e010              B        |L24.370|
                  |L24.336|
000150  a03e              ADR      r0,|L24.588|
000152  f7fffffe          BL       DebugUart_Putstr
;;;1289   				
;;;1290   				Sim900_CheckSendOKStart();				
000156  f7fffffe          BL       Sim900_CheckSendOKStart
;;;1291   				SendMsgToSim900A(LKClientMsg,16);
00015a  2110              MOVS     r1,#0x10
00015c  483a              LDR      r0,|L24.584|
00015e  f7fffffe          BL       SendMsgToSim900A
;;;1292   				Timer_Set(&LKMsgTim,1000);
000162  f44f717a          MOV      r1,#0x3e8
000166  4818              LDR      r0,|L24.456|
000168  f7fffffe          BL       Timer_Set
;;;1293   				LKClient_TransmitSta = SendOver;			
00016c  2003              MOVS     r0,#3
00016e  490e              LDR      r1,|L24.424|
000170  7008              STRB     r0,[r1,#0]
                  |L24.370|
;;;1294   			}
;;;1295   			break;
000172  e016              B        |L24.418|
                  |L24.372|
;;;1296   
;;;1297   		case (SendOver):
;;;1298   			if((Sim900_bInfoSendOK()) || (Timer_GetReached(&LKMsgTim) == bTRUE ) ){
000174  f7fffffe          BL       Sim900_bInfoSendOK
000178  b920              CBNZ     r0,|L24.388|
00017a  4813              LDR      r0,|L24.456|
00017c  f7fffffe          BL       Timer_GetReached
000180  2801              CMP      r0,#1
000182  d10c              BNE      |L24.414|
                  |L24.388|
;;;1299   				LKClient_TransmitSta = Ready;
000184  2000              MOVS     r0,#0
000186  4908              LDR      r1,|L24.424|
000188  7008              STRB     r0,[r1,#0]
;;;1300   				CommTimes++;
00018a  4809              LDR      r0,|L24.432|
00018c  7800              LDRB     r0,[r0,#0]  ; CommTimes
00018e  1c40              ADDS     r0,r0,#1
000190  4907              LDR      r1,|L24.432|
000192  7008              STRB     r0,[r1,#0]
;;;1301   				Timer_Set(&LogOutTim,10000);
000194  f2427110          MOV      r1,#0x2710
000198  4804              LDR      r0,|L24.428|
00019a  f7fffffe          BL       Timer_Set
                  |L24.414|
;;;1302   			}
;;;1303   			break;
00019e  e000              B        |L24.418|
                  |L24.416|
;;;1304   			
;;;1305   		default:
;;;1306   			break;	
0001a0  bf00              NOP      
                  |L24.418|
0001a2  bf00              NOP                            ;1263
;;;1307   	}
;;;1308   }
0001a4  bd7f              POP      {r0-r6,pc}
;;;1309   
                          ENDP

0001a6  0000              DCW      0x0000
                  |L24.424|
                          DCD      LKClient_TransmitSta
                  |L24.428|
                          DCD      LogOutTim
                  |L24.432|
                          DCD      CommTimes
                  |L24.436|
                          DCD      LogOutOK
                  |L24.440|
0001b8  41542b43          DCB      "AT+CIPSEND=16\r\n",0
0001bc  49505345
0001c0  4e443d31
0001c4  360d0a00
                  |L24.456|
                          DCD      LKMsgTim
                  |L24.460|
0001cc  5b46696c          DCB      "[File:",0
0001d0  653a00  
0001d3  00                DCB      0
                  |L24.468|
0001d4  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0001d8  70705c4c
0001dc  4b436c69
0001e0  656e745c
0001e4  6c6b636c
0001e8  69656e74
0001ec  2e6300  
0001ef  00                DCB      0
                  |L24.496|
0001f0  202000            DCB      "  ",0
0001f3  00                DCB      0
                  |L24.500|
0001f4  6c696e65          DCB      "line:",0
0001f8  3a00    
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L24.508|
0001fc  5d0d0a00          DCB      "]\r\n",0
                  |L24.512|
000200  0d0a2a2a          DCB      "\r\n********************send************************\r\n"
000204  2a2a2a2a
000208  2a2a2a2a
00020c  2a2a2a2a
000210  2a2a2a2a
000214  2a2a7365
000218  6e642a2a
00021c  2a2a2a2a
000220  2a2a2a2a
000224  2a2a2a2a
000228  2a2a2a2a
00022c  2a2a2a2a
000230  2a2a0d0a
000234  00                DCB      0
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0
                  |L24.568|
000238  30313233          DCB      "0123456789ABCDEF"
00023c  34353637
000240  38394142
000244  43444546
                  |L24.584|
                          DCD      LKClientMsg
                  |L24.588|
00024c  0d0a2a2a          DCB      "\r\n********************end*************************\r\n"
000250  2a2a2a2a
000254  2a2a2a2a
000258  2a2a2a2a
00025c  2a2a2a2a
000260  2a2a656e
000264  642a2a2a
000268  2a2a2a2a
00026c  2a2a2a2a
000270  2a2a2a2a
000274  2a2a2a2a
000278  2a2a2a2a
00027c  2a2a0d0a
000280  00                DCB      0
000281  00                DCB      0
000282  00                DCB      0
000283  00                DCB      0

                          AREA ||i.LKClient_Login_Run||, CODE, READONLY, ALIGN=1

                  LKClient_Login_Run PROC
;;;985    
;;;986    void LKClient_Login_Run(void)
000000  b510              PUSH     {r4,lr}
;;;987    {
;;;988    	LKClient_RcvMsg_Task();
000002  f7fffffe          BL       LKClient_RcvMsg_Task
;;;989    	LKClient_Login_Task();
000006  f7fffffe          BL       LKClient_Login_Task
;;;990    }
00000a  bd10              POP      {r4,pc}
;;;991    
                          ENDP


                          AREA ||i.LKClient_Login_Task||, CODE, READONLY, ALIGN=2

                  LKClient_Login_Task PROC
;;;914    
;;;915    void LKClient_Login_Task(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;916    {
;;;917    	switch (LKClient_TransmitSta)
000002  4871              LDR      r0,|L26.456|
000004  7800              LDRB     r0,[r0,#0]  ; LKClient_TransmitSta
000006  b130              CBZ      r0,|L26.22|
000008  2801              CMP      r0,#1
00000a  d031              BEQ      |L26.112|
00000c  2802              CMP      r0,#2
00000e  d03e              BEQ      |L26.142|
000010  2803              CMP      r0,#3
000012  d17d              BNE      |L26.272|
000014  e0be              B        |L26.404|
                  |L26.22|
;;;918    	{
;;;919    		case (Ready):
;;;920    			if(Timer_GetReached(&LoginTim) == bTRUE){
000016  486d              LDR      r0,|L26.460|
000018  f7fffffe          BL       Timer_GetReached
00001c  2801              CMP      r0,#1
00001e  d111              BNE      |L26.68|
;;;921    				/* 通信断开 */
;;;922    				if(CommTimes == 5){
000020  486b              LDR      r0,|L26.464|
000022  7800              LDRB     r0,[r0,#0]  ; CommTimes
000024  2805              CMP      r0,#5
000026  d109              BNE      |L26.60|
;;;923    					LKConUDP_Times++;
000028  486a              LDR      r0,|L26.468|
00002a  7800              LDRB     r0,[r0,#0]  ; LKConUDP_Times
00002c  1c40              ADDS     r0,r0,#1
00002e  4969              LDR      r1,|L26.468|
000030  7008              STRB     r0,[r1,#0]
;;;924    					LKClient_GoTo_Stop(5000);
000032  f2413088          MOV      r0,#0x1388
000036  f7fffffe          BL       LKClient_GoTo_Stop
00003a  e018              B        |L26.110|
                  |L26.60|
;;;925    				/* 重发 */
;;;926    				}else{
;;;927    					LKClient_TransmitSta = Prepare;				
00003c  2001              MOVS     r0,#1
00003e  4962              LDR      r1,|L26.456|
000040  7008              STRB     r0,[r1,#0]
000042  e014              B        |L26.110|
                  |L26.68|
;;;928    				}
;;;929    			}else{
;;;930    				if(LogSta == 1){
000044  4864              LDR      r0,|L26.472|
000046  7800              LDRB     r0,[r0,#0]  ; LogSta
000048  2801              CMP      r0,#1
00004a  d102              BNE      |L26.82|
;;;931    					LKClient_GoTo_Update();					
00004c  f7fffffe          BL       LKClient_GoTo_Update
000050  e00d              B        |L26.110|
                  |L26.82|
;;;932    				}else if(LogSta == 2){
000052  4861              LDR      r0,|L26.472|
000054  7800              LDRB     r0,[r0,#0]  ; LogSta
000056  2802              CMP      r0,#2
000058  d102              BNE      |L26.96|
;;;933    					LKClient_GoTo_Comm();
00005a  f7fffffe          BL       LKClient_GoTo_Comm
00005e  e006              B        |L26.110|
                  |L26.96|
;;;934    				}else if(LogSta == 3){
000060  485d              LDR      r0,|L26.472|
000062  7800              LDRB     r0,[r0,#0]  ; LogSta
000064  2803              CMP      r0,#3
000066  d102              BNE      |L26.110|
;;;935    					LKClient_GoTo_Stop(600000);
000068  485c              LDR      r0,|L26.476|
00006a  f7fffffe          BL       LKClient_GoTo_Stop
                  |L26.110|
;;;936    				}										
;;;937    			}
;;;938    			break;
00006e  e0a8              B        |L26.450|
                  |L26.112|
;;;939    
;;;940    		case (Prepare):
;;;941    			Sim900_CheckPreSendInfoStart();
000070  f7fffffe          BL       Sim900_CheckPreSendInfoStart
;;;942    			SendMsgToSim900A((BYTE *)"AT+CIPSEND=35\r\n",15);
000074  210f              MOVS     r1,#0xf
000076  a05a              ADR      r0,|L26.480|
000078  f7fffffe          BL       SendMsgToSim900A
;;;943    			LKClient_TransmitSta = Sending;
00007c  2002              MOVS     r0,#2
00007e  4952              LDR      r1,|L26.456|
000080  7008              STRB     r0,[r1,#0]
;;;944    			Timer_Set(&LKMsgTim,500);
000082  f44f71fa          MOV      r1,#0x1f4
000086  485a              LDR      r0,|L26.496|
000088  f7fffffe          BL       Timer_Set
;;;945    			break;
00008c  e099              B        |L26.450|
                  |L26.142|
;;;946    
;;;947    		case (Sending):
;;;948    			if( (Sim900_bPreSendInfo()) ||  (Timer_GetReached(&LKMsgTim) == bTRUE) ){
00008e  f7fffffe          BL       Sim900_bPreSendInfo
000092  b920              CBNZ     r0,|L26.158|
000094  4856              LDR      r0,|L26.496|
000096  f7fffffe          BL       Timer_GetReached
00009a  2801              CMP      r0,#1
00009c  d179              BNE      |L26.402|
                  |L26.158|
;;;949    				
;;;950    				DEBUG_LOCATION();
00009e  bf00              NOP      
0000a0  f24034b6          MOV      r4,#0x3b6
0000a4  a053              ADR      r0,|L26.500|
0000a6  f7fffffe          BL       DebugUart_Putstr
0000aa  a054              ADR      r0,|L26.508|
0000ac  f7fffffe          BL       DebugUart_Putstr
0000b0  a059              ADR      r0,|L26.536|
0000b2  f7fffffe          BL       DebugUart_Putstr
0000b6  a059              ADR      r0,|L26.540|
0000b8  f7fffffe          BL       DebugUart_Putstr
0000bc  f44f707a          MOV      r0,#0x3e8
0000c0  fb94f0f0          SDIV     r0,r4,r0
0000c4  210a              MOVS     r1,#0xa
0000c6  fb90f2f1          SDIV     r2,r0,r1
0000ca  fb010012          MLS      r0,r1,r2,r0
0000ce  3030              ADDS     r0,r0,#0x30
0000d0  b2c5              UXTB     r5,r0
0000d2  4628              MOV      r0,r5
0000d4  f7fffffe          BL       DebugUart_Putchar
0000d8  2064              MOVS     r0,#0x64
0000da  fb94f0f0          SDIV     r0,r4,r0
0000de  210a              MOVS     r1,#0xa
0000e0  fb90f2f1          SDIV     r2,r0,r1
0000e4  fb010012          MLS      r0,r1,r2,r0
0000e8  3030              ADDS     r0,r0,#0x30
0000ea  b2c5              UXTB     r5,r0
0000ec  4628              MOV      r0,r5
0000ee  f7fffffe          BL       DebugUart_Putchar
0000f2  200a              MOVS     r0,#0xa
0000f4  fb94f0f0          SDIV     r0,r4,r0
0000f8  210a              MOVS     r1,#0xa
0000fa  fb90f2f1          SDIV     r2,r0,r1
0000fe  fb010012          MLS      r0,r1,r2,r0
000102  3030              ADDS     r0,r0,#0x30
000104  b2c5              UXTB     r5,r0
000106  4628              MOV      r0,r5
000108  f7fffffe          BL       DebugUart_Putchar
00010c  200a              MOVS     r0,#0xa
00010e  e000              B        |L26.274|
                  |L26.272|
000110  e056              B        |L26.448|
                  |L26.274|
000112  fb94f1f0          SDIV     r1,r4,r0
000116  fb004011          MLS      r0,r0,r1,r4
00011a  3030              ADDS     r0,r0,#0x30
00011c  b2c5              UXTB     r5,r0
00011e  4628              MOV      r0,r5
000120  f7fffffe          BL       DebugUart_Putchar
000124  a03f              ADR      r0,|L26.548|
000126  f7fffffe          BL       DebugUart_Putstr
00012a  bf00              NOP      
;;;951    				DebugUart_Putstr("\r\n********************send************************\r\n");
00012c  a03e              ADR      r0,|L26.552|
00012e  f7fffffe          BL       DebugUart_Putstr
;;;952    				do 
000132  bf00              NOP      
;;;953    				{
;;;954    					char hexBuf[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
000134  a34a              ADR      r3,|L26.608|
000136  e9d32000          LDRD     r2,r0,[r3,#0]
00013a  e9d31302          LDRD     r1,r3,[r3,#8]
00013e  ae01              ADD      r6,sp,#4
000140  c60b              STM      r6!,{r0,r1,r3}
000142  9200              STR      r2,[sp,#0]
;;;955    					int i;
;;;956    					
;;;957    					for(i=0; i<35; i++)
000144  2400              MOVS     r4,#0
000146  e010              B        |L26.362|
                  |L26.328|
;;;958    					{
;;;959    						DebugUart_Putchar(hexBuf[(LKClientMsg[i]>>4) & 0xf]);
000148  4949              LDR      r1,|L26.624|
00014a  5d09              LDRB     r1,[r1,r4]
00014c  466a              MOV      r2,sp
00014e  eb021111          ADD      r1,r2,r1,LSR #4
000152  7808              LDRB     r0,[r1,#0]
000154  f7fffffe          BL       DebugUart_Putchar
;;;960    						DebugUart_Putchar(hexBuf[(LKClientMsg[i]) & 0xf]);
000158  4945              LDR      r1,|L26.624|
00015a  5d09              LDRB     r1,[r1,r4]
00015c  f001010f          AND      r1,r1,#0xf
000160  f81d0001          LDRB     r0,[sp,r1]
000164  f7fffffe          BL       DebugUart_Putchar
000168  1c64              ADDS     r4,r4,#1              ;957
                  |L26.362|
00016a  2c23              CMP      r4,#0x23              ;957
00016c  dbec              BLT      |L26.328|
;;;961    					}
;;;962    				}while(0);
00016e  bf00              NOP      
;;;963    				DebugUart_Putstr("\r\n********************end*************************\r\n");
000170  a040              ADR      r0,|L26.628|
000172  f7fffffe          BL       DebugUart_Putstr
;;;964    	
;;;965    				Sim900_CheckSendOKStart();
000176  f7fffffe          BL       Sim900_CheckSendOKStart
;;;966    				SendMsgToSim900A(LKClientMsg,35);
00017a  2123              MOVS     r1,#0x23
00017c  483c              LDR      r0,|L26.624|
00017e  f7fffffe          BL       SendMsgToSim900A
;;;967    				Timer_Set(&LKMsgTim,1000);
000182  f44f717a          MOV      r1,#0x3e8
000186  481a              LDR      r0,|L26.496|
000188  f7fffffe          BL       Timer_Set
;;;968    				LKClient_TransmitSta = SendOver;			
00018c  2003              MOVS     r0,#3
00018e  490e              LDR      r1,|L26.456|
000190  7008              STRB     r0,[r1,#0]
                  |L26.402|
;;;969    			}
;;;970    			break;
000192  e016              B        |L26.450|
                  |L26.404|
;;;971    
;;;972    		case (SendOver):
;;;973    			if((Sim900_bInfoSendOK()) || (Timer_GetReached(&LKMsgTim) == bTRUE ) ){
000194  f7fffffe          BL       Sim900_bInfoSendOK
000198  b920              CBNZ     r0,|L26.420|
00019a  4815              LDR      r0,|L26.496|
00019c  f7fffffe          BL       Timer_GetReached
0001a0  2801              CMP      r0,#1
0001a2  d10c              BNE      |L26.446|
                  |L26.420|
;;;974    				LKClient_TransmitSta = Ready;
0001a4  2000              MOVS     r0,#0
0001a6  4908              LDR      r1,|L26.456|
0001a8  7008              STRB     r0,[r1,#0]
;;;975    				CommTimes++;
0001aa  4809              LDR      r0,|L26.464|
0001ac  7800              LDRB     r0,[r0,#0]  ; CommTimes
0001ae  1c40              ADDS     r0,r0,#1
0001b0  4907              LDR      r1,|L26.464|
0001b2  7008              STRB     r0,[r1,#0]
;;;976    				Timer_Set(&LoginTim,10000);
0001b4  f2427110          MOV      r1,#0x2710
0001b8  4804              LDR      r0,|L26.460|
0001ba  f7fffffe          BL       Timer_Set
                  |L26.446|
;;;977    			}
;;;978    			break;
0001be  e000              B        |L26.450|
                  |L26.448|
;;;979    			
;;;980    		default:
;;;981    			break;	
0001c0  bf00              NOP      
                  |L26.450|
0001c2  bf00              NOP                            ;938
;;;982    	}    
;;;983    }
0001c4  bd7f              POP      {r0-r6,pc}
;;;984    
                          ENDP

0001c6  0000              DCW      0x0000
                  |L26.456|
                          DCD      LKClient_TransmitSta
                  |L26.460|
                          DCD      LoginTim
                  |L26.464|
                          DCD      CommTimes
                  |L26.468|
                          DCD      LKConUDP_Times
                  |L26.472|
                          DCD      LogSta
                  |L26.476|
                          DCD      0x000927c0
                  |L26.480|
0001e0  41542b43          DCB      "AT+CIPSEND=35\r\n",0
0001e4  49505345
0001e8  4e443d33
0001ec  350d0a00
                  |L26.496|
                          DCD      LKMsgTim
                  |L26.500|
0001f4  5b46696c          DCB      "[File:",0
0001f8  653a00  
0001fb  00                DCB      0
                  |L26.508|
0001fc  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
000200  70705c4c
000204  4b436c69
000208  656e745c
00020c  6c6b636c
000210  69656e74
000214  2e6300  
000217  00                DCB      0
                  |L26.536|
000218  202000            DCB      "  ",0
00021b  00                DCB      0
                  |L26.540|
00021c  6c696e65          DCB      "line:",0
000220  3a00    
000222  00                DCB      0
000223  00                DCB      0
                  |L26.548|
000224  5d0d0a00          DCB      "]\r\n",0
                  |L26.552|
000228  0d0a2a2a          DCB      "\r\n********************send************************\r\n"
00022c  2a2a2a2a
000230  2a2a2a2a
000234  2a2a2a2a
000238  2a2a2a2a
00023c  2a2a7365
000240  6e642a2a
000244  2a2a2a2a
000248  2a2a2a2a
00024c  2a2a2a2a
000250  2a2a2a2a
000254  2a2a2a2a
000258  2a2a0d0a
00025c  00                DCB      0
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L26.608|
000260  30313233          DCB      "0123456789ABCDEF"
000264  34353637
000268  38394142
00026c  43444546
                  |L26.624|
                          DCD      LKClientMsg
                  |L26.628|
000274  0d0a2a2a          DCB      "\r\n********************end*************************\r\n"
000278  2a2a2a2a
00027c  2a2a2a2a
000280  2a2a2a2a
000284  2a2a2a2a
000288  2a2a656e
00028c  642a2a2a
000290  2a2a2a2a
000294  2a2a2a2a
000298  2a2a2a2a
00029c  2a2a2a2a
0002a0  2a2a2a2a
0002a4  2a2a0d0a
0002a8  00                DCB      0
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0

                          AREA ||i.LKClient_PackHeartBeatInfo||, CODE, READONLY, ALIGN=2

                  LKClient_PackHeartBeatInfo PROC
;;;161    /* 打包心跳报文数据 */
;;;162    void LKClient_PackHeartBeatInfo(BYTE *Data)
000000  21aa              MOVS     r1,#0xaa
;;;163    {
;;;164    	*Data++ = 0xAA;
000002  f8001b01          STRB     r1,[r0],#1
;;;165    	*Data++ = 0xBB;
000006  21bb              MOVS     r1,#0xbb
000008  f8001b01          STRB     r1,[r0],#1
;;;166    	*Data++ = 0x00;
00000c  2100              MOVS     r1,#0
00000e  f8001b01          STRB     r1,[r0],#1
;;;167    	*Data++ = 0x0F;
000012  210f              MOVS     r1,#0xf
000014  f8001b01          STRB     r1,[r0],#1
;;;168    	*Data++ = 0x00;
000018  2100              MOVS     r1,#0
00001a  f8001b01          STRB     r1,[r0],#1
;;;169    	*Data++ = 0x04;
00001e  2104              MOVS     r1,#4
000020  f8001b01          STRB     r1,[r0],#1
;;;170    	*Data++ = 0x00;
000024  2100              MOVS     r1,#0
000026  f8001b01          STRB     r1,[r0],#1
;;;171    	*Data++ = 0x00;
00002a  f8001b01          STRB     r1,[r0],#1
;;;172    	*Data++ = caDeviceID[0];
00002e  490d              LDR      r1,|L27.100|
000030  7809              LDRB     r1,[r1,#0]  ; caDeviceID
000032  f8001b01          STRB     r1,[r0],#1
;;;173    	*Data++ = caDeviceID[1];
000036  490b              LDR      r1,|L27.100|
000038  7849              LDRB     r1,[r1,#1]  ; caDeviceID
00003a  f8001b01          STRB     r1,[r0],#1
;;;174    	*Data++ = caDeviceID[2];
00003e  4909              LDR      r1,|L27.100|
000040  7889              LDRB     r1,[r1,#2]  ; caDeviceID
000042  f8001b01          STRB     r1,[r0],#1
;;;175    	*Data++ = caDeviceID[3];
000046  4907              LDR      r1,|L27.100|
000048  78c9              LDRB     r1,[r1,#3]  ; caDeviceID
00004a  f8001b01          STRB     r1,[r0],#1
;;;176    	*Data++ = 0x00;
00004e  2100              MOVS     r1,#0
000050  f8001b01          STRB     r1,[r0],#1
;;;177    	*Data++ = 0x99;
000054  2199              MOVS     r1,#0x99
000056  f8001b01          STRB     r1,[r0],#1
;;;178    	*Data++ = 0xFF;
00005a  21ff              MOVS     r1,#0xff
00005c  f8001b01          STRB     r1,[r0],#1
;;;179    }
000060  4770              BX       lr
;;;180    
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      caDeviceID

                          AREA ||i.LKClient_PackIAPInfo||, CODE, READONLY, ALIGN=2

                  LKClient_PackIAPInfo PROC
;;;210    /* 打包远程更新数据 */
;;;211    void LKClient_PackIAPInfo(BYTE *Data)
000000  b570              PUSH     {r4-r6,lr}
;;;212    {
000002  4604              MOV      r4,r0
;;;213    	BYTE * Tmp;
;;;214    	*Data++ = 0xAA;
000004  20aa              MOVS     r0,#0xaa
000006  f8040b01          STRB     r0,[r4],#1
;;;215    	*Data++ = 0xBB;
00000a  20bb              MOVS     r0,#0xbb
00000c  f8040b01          STRB     r0,[r4],#1
;;;216    	*Data++ = 0x00;
000010  2000              MOVS     r0,#0
000012  f8040b01          STRB     r0,[r4],#1
;;;217    	*Data++ = 0x15;
000016  2015              MOVS     r0,#0x15
000018  f8040b01          STRB     r0,[r4],#1
;;;218    	*Data++ = 0x00;
00001c  2000              MOVS     r0,#0
00001e  f8040b01          STRB     r0,[r4],#1
;;;219    	*Data++ = 0x41;
000022  2041              MOVS     r0,#0x41
000024  f8040b01          STRB     r0,[r4],#1
;;;220    	*Data++ = 0x00;
000028  2000              MOVS     r0,#0
00002a  f8040b01          STRB     r0,[r4],#1
;;;221    	*Data++ = 0x00;
00002e  f8040b01          STRB     r0,[r4],#1
;;;222    	*Data++ = caDeviceID[0];
000032  481c              LDR      r0,|L28.164|
000034  7800              LDRB     r0,[r0,#0]  ; caDeviceID
000036  f8040b01          STRB     r0,[r4],#1
;;;223    	*Data++ = caDeviceID[1];
00003a  481a              LDR      r0,|L28.164|
00003c  7840              LDRB     r0,[r0,#1]  ; caDeviceID
00003e  f8040b01          STRB     r0,[r4],#1
;;;224    	*Data++ = caDeviceID[2];
000042  4818              LDR      r0,|L28.164|
000044  7880              LDRB     r0,[r0,#2]  ; caDeviceID
000046  f8040b01          STRB     r0,[r4],#1
;;;225    	*Data++ = caDeviceID[3];
00004a  4816              LDR      r0,|L28.164|
00004c  78c0              LDRB     r0,[r0,#3]  ; caDeviceID
00004e  f8040b01          STRB     r0,[r4],#1
;;;226    	Tmp = Data;
000052  4625              MOV      r5,r4
;;;227    	*Data++ = ProductID[0];
000054  4814              LDR      r0,|L28.168|
000056  7800              LDRB     r0,[r0,#0]  ; ProductID
000058  f8040b01          STRB     r0,[r4],#1
;;;228    	*Data++ = ProductID[1];
00005c  4812              LDR      r0,|L28.168|
00005e  7840              LDRB     r0,[r0,#1]  ; ProductID
000060  f8040b01          STRB     r0,[r4],#1
;;;229    	*Data++ = SoftVer >> 8;
000064  4811              LDR      r0,|L28.172|
000066  8800              LDRH     r0,[r0,#0]  ; SoftVer
000068  1200              ASRS     r0,r0,#8
00006a  f8040b01          STRB     r0,[r4],#1
;;;230    	*Data++ = SoftVer;
00006e  480f              LDR      r0,|L28.172|
000070  7800              LDRB     r0,[r0,#0]  ; SoftVer
000072  f8040b01          STRB     r0,[r4],#1
;;;231    	*Data++ = NeedRcvPacNum >> 8;
000076  480e              LDR      r0,|L28.176|
000078  8800              LDRH     r0,[r0,#0]  ; NeedRcvPacNum
00007a  1200              ASRS     r0,r0,#8
00007c  f8040b01          STRB     r0,[r4],#1
;;;232    	*Data++ = NeedRcvPacNum;
000080  480b              LDR      r0,|L28.176|
000082  7800              LDRB     r0,[r0,#0]  ; NeedRcvPacNum
000084  f8040b01          STRB     r0,[r4],#1
;;;233    	*Data++ = Calculate_CRC(Tmp,6);
000088  2106              MOVS     r1,#6
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       Calculate_CRC
000090  f8040b01          STRB     r0,[r4],#1
;;;234    	*Data++ = 0x99;
000094  2099              MOVS     r0,#0x99
000096  f8040b01          STRB     r0,[r4],#1
;;;235    	*Data++ = 0xFF;
00009a  20ff              MOVS     r0,#0xff
00009c  f8040b01          STRB     r0,[r4],#1
;;;236    }
0000a0  bd70              POP      {r4-r6,pc}
;;;237    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L28.164|
                          DCD      caDeviceID
                  |L28.168|
                          DCD      ProductID
                  |L28.172|
                          DCD      SoftVer
                  |L28.176|
                          DCD      NeedRcvPacNum

                          AREA ||i.LKClient_PackLogInfo||, CODE, READONLY, ALIGN=2

                  LKClient_PackLogInfo PROC
;;;132    /* 打包登陆报文数据 */
;;;133    void LKClient_PackLogInfo(BYTE *Data)
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
000002  4604              MOV      r4,r0
;;;135    	BYTE * Tmp;
;;;136    	*Data++ = 0xAA;
000004  20aa              MOVS     r0,#0xaa
000006  f8040b01          STRB     r0,[r4],#1
;;;137    	*Data++ = 0xBB;
00000a  20bb              MOVS     r0,#0xbb
00000c  f8040b01          STRB     r0,[r4],#1
;;;138    	*Data++ = 0x00;
000010  2000              MOVS     r0,#0
000012  f8040b01          STRB     r0,[r4],#1
;;;139    	*Data++ = 0x23;
000016  2023              MOVS     r0,#0x23
000018  f8040b01          STRB     r0,[r4],#1
;;;140    	*Data++ = 0x00;
00001c  2000              MOVS     r0,#0
00001e  f8040b01          STRB     r0,[r4],#1
;;;141    	*Data++ = 0x02;
000022  2002              MOVS     r0,#2
000024  f8040b01          STRB     r0,[r4],#1
;;;142    	*Data++ = 0x00;
000028  2000              MOVS     r0,#0
00002a  f8040b01          STRB     r0,[r4],#1
;;;143    	*Data++ = 0x00;
00002e  f8040b01          STRB     r0,[r4],#1
;;;144    	*Data++ = caDeviceID[0];
000032  4818              LDR      r0,|L29.148|
000034  7800              LDRB     r0,[r0,#0]  ; caDeviceID
000036  f8040b01          STRB     r0,[r4],#1
;;;145    	*Data++ = caDeviceID[1];
00003a  4816              LDR      r0,|L29.148|
00003c  7840              LDRB     r0,[r0,#1]  ; caDeviceID
00003e  f8040b01          STRB     r0,[r4],#1
;;;146    	*Data++ = caDeviceID[2];
000042  4814              LDR      r0,|L29.148|
000044  7880              LDRB     r0,[r0,#2]  ; caDeviceID
000046  f8040b01          STRB     r0,[r4],#1
;;;147    	*Data++ = caDeviceID[3];
00004a  4812              LDR      r0,|L29.148|
00004c  78c0              LDRB     r0,[r0,#3]  ; caDeviceID
00004e  f8040b01          STRB     r0,[r4],#1
;;;148    	Tmp = Data;
000052  4625              MOV      r5,r4
;;;149    	RMLStrcpy(Data,SIMCardIMSI,16);
000054  2210              MOVS     r2,#0x10
000056  4910              LDR      r1,|L29.152|
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       RMLStrcpy
;;;150    	Data += 16;
00005e  3410              ADDS     r4,r4,#0x10
;;;151    	RMLStrcpy(Data,(BYTE *)ProductID,2);
000060  2202              MOVS     r2,#2
000062  490e              LDR      r1,|L29.156|
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       RMLStrcpy
;;;152    	Data += 2;
00006a  1ca4              ADDS     r4,r4,#2
;;;153    	RMLStrcpy(Data,(BYTE *)FirmWare_Ver,2);
00006c  2202              MOVS     r2,#2
00006e  490c              LDR      r1,|L29.160|
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       RMLStrcpy
;;;154    	Data += 2;
000076  1ca4              ADDS     r4,r4,#2
;;;155    	*Data++ = Calculate_CRC(Tmp,20);
000078  2114              MOVS     r1,#0x14
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       Calculate_CRC
000080  f8040b01          STRB     r0,[r4],#1
;;;156    	*Data++ = 0x99;
000084  2099              MOVS     r0,#0x99
000086  f8040b01          STRB     r0,[r4],#1
;;;157    	*Data++ = 0xFF;
00008a  20ff              MOVS     r0,#0xff
00008c  f8040b01          STRB     r0,[r4],#1
;;;158    }
000090  bd70              POP      {r4-r6,pc}
;;;159    
                          ENDP

000092  0000              DCW      0x0000
                  |L29.148|
                          DCD      caDeviceID
                  |L29.152|
                          DCD      SIMCardIMSI
                  |L29.156|
                          DCD      ProductID
                  |L29.160|
                          DCD      FirmWare_Ver

                          AREA ||i.LKClient_PackLogOutInfo||, CODE, READONLY, ALIGN=2

                  LKClient_PackLogOutInfo PROC
;;;182    /* 打包注销报文数据 */
;;;183    void LKClient_PackLogOutInfo(BYTE *Data)
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
000002  4604              MOV      r4,r0
;;;185    	BYTE * Tmp;
;;;186    	*Data++ = 0xAA;
000004  20aa              MOVS     r0,#0xaa
000006  f8040b01          STRB     r0,[r4],#1
;;;187    	*Data++ = 0xBB;
00000a  20bb              MOVS     r0,#0xbb
00000c  f8040b01          STRB     r0,[r4],#1
;;;188    	*Data++ = 0x00;
000010  2000              MOVS     r0,#0
000012  f8040b01          STRB     r0,[r4],#1
;;;189    	*Data++ = 0x10;
000016  2010              MOVS     r0,#0x10
000018  f8040b01          STRB     r0,[r4],#1
;;;190    	*Data++ = 0x00;
00001c  2000              MOVS     r0,#0
00001e  f8040b01          STRB     r0,[r4],#1
;;;191    	*Data++ = 0x03;
000022  2003              MOVS     r0,#3
000024  f8040b01          STRB     r0,[r4],#1
;;;192    	*Data++ = 0x00;
000028  2000              MOVS     r0,#0
00002a  f8040b01          STRB     r0,[r4],#1
;;;193    	*Data++ = 0x00;
00002e  f8040b01          STRB     r0,[r4],#1
;;;194    	*Data++ = caDeviceID[0];
000032  4814              LDR      r0,|L30.132|
000034  7800              LDRB     r0,[r0,#0]  ; caDeviceID
000036  f8040b01          STRB     r0,[r4],#1
;;;195    	*Data++ = caDeviceID[1];
00003a  4812              LDR      r0,|L30.132|
00003c  7840              LDRB     r0,[r0,#1]  ; caDeviceID
00003e  f8040b01          STRB     r0,[r4],#1
;;;196    	*Data++ = caDeviceID[2];
000042  4810              LDR      r0,|L30.132|
000044  7880              LDRB     r0,[r0,#2]  ; caDeviceID
000046  f8040b01          STRB     r0,[r4],#1
;;;197    	*Data++ = caDeviceID[3];
00004a  480e              LDR      r0,|L30.132|
00004c  78c0              LDRB     r0,[r0,#3]  ; caDeviceID
00004e  f8040b01          STRB     r0,[r4],#1
;;;198    	Tmp = Data;
000052  4625              MOV      r5,r4
;;;199    	if(Is_Need_ResetToUpdate() == bTRUE){
000054  f7fffffe          BL       Is_Need_ResetToUpdate
000058  2801              CMP      r0,#1
00005a  d102              BNE      |L30.98|
;;;200    		*Data++ = 0x01;
00005c  f8040b01          STRB     r0,[r4],#1
000060  e002              B        |L30.104|
                  |L30.98|
;;;201    	}else{
;;;202    		*Data++ = 0x00;
000062  2000              MOVS     r0,#0
000064  f8040b01          STRB     r0,[r4],#1
                  |L30.104|
;;;203    	}
;;;204    	*Data++ = Calculate_CRC(Tmp,1);
000068  2101              MOVS     r1,#1
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       Calculate_CRC
000070  f8040b01          STRB     r0,[r4],#1
;;;205    	*Data++ = 0x99;
000074  2099              MOVS     r0,#0x99
000076  f8040b01          STRB     r0,[r4],#1
;;;206    	*Data++ = 0xFF;
00007a  20ff              MOVS     r0,#0xff
00007c  f8040b01          STRB     r0,[r4],#1
;;;207    }
000080  bd70              POP      {r4-r6,pc}
;;;208    
                          ENDP

000082  0000              DCW      0x0000
                  |L30.132|
                          DCD      caDeviceID

                          AREA ||i.LKClient_PackParamListAck||, CODE, READONLY, ALIGN=2

                  LKClient_PackParamListAck PROC
;;;239    /* 打包参数表设置应答报文 */
;;;240    void LKClient_PackParamListAck(BYTE *Data,INT16U tmp)
000000  22aa              MOVS     r2,#0xaa
;;;241    {
;;;242    	*Data++ = 0xAA;
000002  f8002b01          STRB     r2,[r0],#1
;;;243    	*Data++ = 0xBB;
000006  22bb              MOVS     r2,#0xbb
000008  f8002b01          STRB     r2,[r0],#1
;;;244    	*Data++ = 0x00;
00000c  2200              MOVS     r2,#0
00000e  f8002b01          STRB     r2,[r0],#1
;;;245    	*Data++ = 0x0F;
000012  220f              MOVS     r2,#0xf
000014  f8002b01          STRB     r2,[r0],#1
;;;246    	*Data++ = 0x80;
000018  2280              MOVS     r2,#0x80
00001a  f8002b01          STRB     r2,[r0],#1
;;;247    	*Data++ = 0x31;
00001e  2231              MOVS     r2,#0x31
000020  f8002b01          STRB     r2,[r0],#1
;;;248    	*Data++ = tmp>>8;
000024  120a              ASRS     r2,r1,#8
000026  f8002b01          STRB     r2,[r0],#1
;;;249    	*Data++ = tmp;
00002a  f8001b01          STRB     r1,[r0],#1
;;;250    	*Data++ = caDeviceID[0];
00002e  4a0d              LDR      r2,|L31.100|
000030  7812              LDRB     r2,[r2,#0]  ; caDeviceID
000032  f8002b01          STRB     r2,[r0],#1
;;;251    	*Data++ = caDeviceID[1];
000036  4a0b              LDR      r2,|L31.100|
000038  7852              LDRB     r2,[r2,#1]  ; caDeviceID
00003a  f8002b01          STRB     r2,[r0],#1
;;;252    	*Data++ = caDeviceID[2];
00003e  4a09              LDR      r2,|L31.100|
000040  7892              LDRB     r2,[r2,#2]  ; caDeviceID
000042  f8002b01          STRB     r2,[r0],#1
;;;253    	*Data++ = caDeviceID[3];
000046  4a07              LDR      r2,|L31.100|
000048  78d2              LDRB     r2,[r2,#3]  ; caDeviceID
00004a  f8002b01          STRB     r2,[r0],#1
;;;254    	*Data++ = 0x00;
00004e  2200              MOVS     r2,#0
000050  f8002b01          STRB     r2,[r0],#1
;;;255    	*Data++ = 0x99;
000054  2299              MOVS     r2,#0x99
000056  f8002b01          STRB     r2,[r0],#1
;;;256    	*Data++ = 0xFF;
00005a  22ff              MOVS     r2,#0xff
00005c  f8002b01          STRB     r2,[r0],#1
;;;257    }
000060  4770              BX       lr
;;;258    
                          ENDP

000062  0000              DCW      0x0000
                  |L31.100|
                          DCD      caDeviceID

                          AREA ||i.LKClient_RcvMsg_Task||, CODE, READONLY, ALIGN=1

                  LKClient_RcvMsg_Task PROC
;;;651    /* Receive 任务 */
;;;652    void LKClient_RcvMsg_Task(void)
000000  b510              PUSH     {r4,lr}
;;;653    {
;;;654    	if( Analyze_IsReceivedServerData() == bTRUE ){							
000002  f7fffffe          BL       Analyze_IsReceivedServerData
000006  2801              CMP      r0,#1
000008  d103              BNE      |L32.18|
;;;655    		Analyze_ServerPacket();								// 解析平台发下来的消息
00000a  f7fffffe          BL       Analyze_ServerPacket
;;;656    		Analyze_ClrReceivedServerData();	
00000e  f7fffffe          BL       Analyze_ClrReceivedServerData
                  |L32.18|
;;;657    	}	
;;;658    }
000012  bd10              POP      {r4,pc}
;;;659    
                          ENDP


                          AREA ||i.LKClient_Start_Run||, CODE, READONLY, ALIGN=2

                  LKClient_Start_Run PROC
;;;743    
;;;744    void LKClient_Start_Run(void)
000000  b510              PUSH     {r4,lr}
;;;745    {
;;;746    	switch (LKClient_StartSta)
000002  4823              LDR      r0,|L33.144|
000004  7800              LDRB     r0,[r0,#0]  ; LKClient_StartSta
000006  b120              CBZ      r0,|L33.18|
000008  2801              CMP      r0,#1
00000a  d00d              BEQ      |L33.40|
00000c  2802              CMP      r0,#2
00000e  d13c              BNE      |L33.138|
000010  e01a              B        |L33.72|
                  |L33.18|
;;;747    	{
;;;748    		case (Pre):  	
;;;749    			Set_Sim900_PowerPin();
000012  f7fffffe          BL       Set_Sim900_PowerPin
;;;750    			LKClient_StartSta = PreOK;
000016  2001              MOVS     r0,#1
000018  491d              LDR      r1,|L33.144|
00001a  7008              STRB     r0,[r1,#0]
;;;751    			Timer_Set(&LKClient_StartTim,3000); 
00001c  f64031b8          MOV      r1,#0xbb8
000020  481c              LDR      r0,|L33.148|
000022  f7fffffe          BL       Timer_Set
;;;752    			break;
000026  e031              B        |L33.140|
                  |L33.40|
;;;753    
;;;754    		case (PreOK):
;;;755    			if(Timer_GetReached(&LKClient_StartTim) == bTRUE){
000028  481a              LDR      r0,|L33.148|
00002a  f7fffffe          BL       Timer_GetReached
00002e  2801              CMP      r0,#1
000030  d109              BNE      |L33.70|
;;;756    				Reset_Sim900_PowerPin();
000032  f7fffffe          BL       Reset_Sim900_PowerPin
;;;757    				LKClient_StartSta = WaitStartOK;
000036  2002              MOVS     r0,#2
000038  4915              LDR      r1,|L33.144|
00003a  7008              STRB     r0,[r1,#0]
;;;758    				Timer_Set(&LKClient_StartTim,3000); 
00003c  f64031b8          MOV      r1,#0xbb8
000040  4814              LDR      r0,|L33.148|
000042  f7fffffe          BL       Timer_Set
                  |L33.70|
;;;759    			}
;;;760    			break;
000046  e021              B        |L33.140|
                  |L33.72|
;;;761    
;;;762    		case (WaitStartOK):
;;;763    			if(Timer_GetReached(&LKClient_StartTim) == bTRUE){
000048  4812              LDR      r0,|L33.148|
00004a  f7fffffe          BL       Timer_GetReached
00004e  2801              CMP      r0,#1
000050  d11a              BNE      |L33.136|
;;;764    				if(Sim900A_GetStatus() == bTRUE){			
000052  f7fffffe          BL       Sim900A_GetStatus
000056  2801              CMP      r0,#1
000058  d102              BNE      |L33.96|
;;;765    					LKClient_GoTo_ConnectUDP();
00005a  f7fffffe          BL       LKClient_GoTo_ConnectUDP
00005e  e013              B        |L33.136|
                  |L33.96|
;;;766    				}else{
;;;767    					if(LKClient_StartTimes == 10){
000060  480d              LDR      r0,|L33.152|
000062  7800              LDRB     r0,[r0,#0]  ; LKClient_StartTimes
000064  280a              CMP      r0,#0xa
000066  d107              BNE      |L33.120|
;;;768    						LKClientOverSta = PowerError;
000068  2001              MOVS     r0,#1
00006a  490c              LDR      r1,|L33.156|
00006c  7008              STRB     r0,[r1,#0]
;;;769    						LKClient_GoTo_Stop(5000);
00006e  f2413088          MOV      r0,#0x1388
000072  f7fffffe          BL       LKClient_GoTo_Stop
000076  e007              B        |L33.136|
                  |L33.120|
;;;770    					}else{
;;;771    						LKClient_StartSta = Pre;
000078  2000              MOVS     r0,#0
00007a  4905              LDR      r1,|L33.144|
00007c  7008              STRB     r0,[r1,#0]
;;;772    						LKClient_StartTimes++;					
00007e  4806              LDR      r0,|L33.152|
000080  7800              LDRB     r0,[r0,#0]  ; LKClient_StartTimes
000082  1c40              ADDS     r0,r0,#1
000084  4904              LDR      r1,|L33.152|
000086  7008              STRB     r0,[r1,#0]
                  |L33.136|
;;;773    					}
;;;774    				}
;;;775    			}
;;;776    		default :
000088  bf00              NOP      
                  |L33.138|
;;;777    			break;
00008a  bf00              NOP      
                  |L33.140|
00008c  bf00              NOP                            ;752
;;;778    	}
;;;779    }
00008e  bd10              POP      {r4,pc}
;;;780    
                          ENDP

                  |L33.144|
                          DCD      LKClient_StartSta
                  |L33.148|
                          DCD      LKClient_StartTim
                  |L33.152|
                          DCD      LKClient_StartTimes
                  |L33.156|
                          DCD      LKClientOverSta

                          AREA ||i.LKClient_Stop_Run||, CODE, READONLY, ALIGN=2

                  LKClient_Stop_Run PROC
;;;675    
;;;676    void LKClient_Stop_Run(void)
000000  b510              PUSH     {r4,lr}
;;;677    {
;;;678    	switch (LKClient_StopSta)
000002  482c              LDR      r0,|L34.180|
000004  7800              LDRB     r0,[r0,#0]  ; LKClient_StopSta
000006  b130              CBZ      r0,|L34.22|
000008  2801              CMP      r0,#1
00000a  d00f              BEQ      |L34.44|
00000c  2802              CMP      r0,#2
00000e  d01d              BEQ      |L34.76|
000010  2803              CMP      r0,#3
000012  d14c              BNE      |L34.174|
000014  e043              B        |L34.158|
                  |L34.22|
;;;679    	{
;;;680    		case (PreStop):
;;;681    			Set_Sim900_PowerPin();
000016  f7fffffe          BL       Set_Sim900_PowerPin
;;;682    			LKClient_StopSta = Stopping;
00001a  2001              MOVS     r0,#1
00001c  4925              LDR      r1,|L34.180|
00001e  7008              STRB     r0,[r1,#0]
;;;683    			Timer_Set(&LKClient_StopTim,3000); 
000020  f64031b8          MOV      r1,#0xbb8
000024  4824              LDR      r0,|L34.184|
000026  f7fffffe          BL       Timer_Set
;;;684    			break;
00002a  e040              B        |L34.174|
                  |L34.44|
;;;685    		
;;;686    		case (Stopping):
;;;687     			if(Timer_GetReached(&LKClient_StopTim) == bTRUE){
00002c  4822              LDR      r0,|L34.184|
00002e  f7fffffe          BL       Timer_GetReached
000032  2801              CMP      r0,#1
000034  d109              BNE      |L34.74|
;;;688    				Reset_Sim900_PowerPin();
000036  f7fffffe          BL       Reset_Sim900_PowerPin
;;;689    				Timer_Set(&LKClient_StopTim,3000);
00003a  f64031b8          MOV      r1,#0xbb8
00003e  481e              LDR      r0,|L34.184|
000040  f7fffffe          BL       Timer_Set
;;;690    				LKClient_StopSta = Stoped;
000044  2002              MOVS     r0,#2
000046  491b              LDR      r1,|L34.180|
000048  7008              STRB     r0,[r1,#0]
                  |L34.74|
;;;691    			}
;;;692    			break;
00004a  e030              B        |L34.174|
                  |L34.76|
;;;693    
;;;694    		case (Stoped): 
;;;695    			if(Timer_GetReached(&LKClient_StopTim) == bTRUE){
00004c  481a              LDR      r0,|L34.184|
00004e  f7fffffe          BL       Timer_GetReached
000052  2801              CMP      r0,#1
000054  d122              BNE      |L34.156|
;;;696    				if(Sim900A_GetStatus() == bTRUE){
000056  f7fffffe          BL       Sim900A_GetStatus
00005a  2801              CMP      r0,#1
00005c  d114              BNE      |L34.136|
;;;697    					if(LKClient_StopTimes == 10){
00005e  4817              LDR      r0,|L34.188|
000060  7800              LDRB     r0,[r0,#0]  ; LKClient_StopTimes
000062  280a              CMP      r0,#0xa
000064  d107              BNE      |L34.118|
;;;698    						LKClientOverSta = PowerError;
000066  2001              MOVS     r0,#1
000068  4915              LDR      r1,|L34.192|
00006a  7008              STRB     r0,[r1,#0]
;;;699    						LKClient_GoTo_Stop(5000);			
00006c  f2413088          MOV      r0,#0x1388
000070  f7fffffe          BL       LKClient_GoTo_Stop
000074  e012              B        |L34.156|
                  |L34.118|
;;;700    					}else{
;;;701    						LKClient_StopTimes++;		
000076  4811              LDR      r0,|L34.188|
000078  7800              LDRB     r0,[r0,#0]  ; LKClient_StopTimes
00007a  1c40              ADDS     r0,r0,#1
00007c  490f              LDR      r1,|L34.188|
00007e  7008              STRB     r0,[r1,#0]
;;;702    						LKClient_StopSta = PreStop;
000080  2000              MOVS     r0,#0
000082  490c              LDR      r1,|L34.180|
000084  7008              STRB     r0,[r1,#0]
000086  e009              B        |L34.156|
                  |L34.136|
;;;703    					}
;;;704    				}else{
;;;705    					LKClient_StopSta = PowerOff;					
000088  2003              MOVS     r0,#3
00008a  490a              LDR      r1,|L34.180|
00008c  7008              STRB     r0,[r1,#0]
;;;706    					Sim900A_Disable_RcvIT();
00008e  f7fffffe          BL       Sim900A_Disable_RcvIT
;;;707    					Timer_Set(&LKClient_StopTim,LKClient_StopTime);					
000092  480c              LDR      r0,|L34.196|
000094  6801              LDR      r1,[r0,#0]  ; LKClient_StopTime
000096  4808              LDR      r0,|L34.184|
000098  f7fffffe          BL       Timer_Set
                  |L34.156|
;;;708    				}				
;;;709    			}		
;;;710    			break;
00009c  e007              B        |L34.174|
                  |L34.158|
;;;711    
;;;712    		case (PowerOff):
;;;713     			if(Timer_GetReached(&LKClient_StopTim) == bTRUE){
00009e  4806              LDR      r0,|L34.184|
0000a0  f7fffffe          BL       Timer_GetReached
0000a4  2801              CMP      r0,#1
0000a6  d101              BNE      |L34.172|
;;;714    				LKClient_GoTo_Start();
0000a8  f7fffffe          BL       LKClient_GoTo_Start
                  |L34.172|
;;;715    			}
;;;716    			break;
0000ac  bf00              NOP      
                  |L34.174|
0000ae  bf00              NOP                            ;684
;;;717    	}
;;;718    }
0000b0  bd10              POP      {r4,pc}
;;;719    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L34.180|
                          DCD      LKClient_StopSta
                  |L34.184|
                          DCD      LKClient_StopTim
                  |L34.188|
                          DCD      LKClient_StopTimes
                  |L34.192|
                          DCD      LKClientOverSta
                  |L34.196|
                          DCD      LKClient_StopTime

                          AREA ||i.LKClient_TTSAck||, CODE, READONLY, ALIGN=2

                  LKClient_TTSAck PROC
;;;260    /* 打包语音下发应答报文 */
;;;261    void LKClient_TTSAck(BYTE *Data,INT16U tmp)
000000  22aa              MOVS     r2,#0xaa
;;;262    {
;;;263    	*Data++ = 0xAA;
000002  f8002b01          STRB     r2,[r0],#1
;;;264    	*Data++ = 0xBB;
000006  22bb              MOVS     r2,#0xbb
000008  f8002b01          STRB     r2,[r0],#1
;;;265    	*Data++ = 0x00;
00000c  2200              MOVS     r2,#0
00000e  f8002b01          STRB     r2,[r0],#1
;;;266    	*Data++ = 0x0F;
000012  220f              MOVS     r2,#0xf
000014  f8002b01          STRB     r2,[r0],#1
;;;267    	*Data++ = 0x80;
000018  2280              MOVS     r2,#0x80
00001a  f8002b01          STRB     r2,[r0],#1
;;;268    	*Data++ = 0x34;
00001e  2234              MOVS     r2,#0x34
000020  f8002b01          STRB     r2,[r0],#1
;;;269    	*Data++ = tmp>>8;
000024  120a              ASRS     r2,r1,#8
000026  f8002b01          STRB     r2,[r0],#1
;;;270    	*Data++ = tmp;
00002a  f8001b01          STRB     r1,[r0],#1
;;;271    	*Data++ = caDeviceID[0];
00002e  4a0d              LDR      r2,|L35.100|
000030  7812              LDRB     r2,[r2,#0]  ; caDeviceID
000032  f8002b01          STRB     r2,[r0],#1
;;;272    	*Data++ = caDeviceID[1];
000036  4a0b              LDR      r2,|L35.100|
000038  7852              LDRB     r2,[r2,#1]  ; caDeviceID
00003a  f8002b01          STRB     r2,[r0],#1
;;;273    	*Data++ = caDeviceID[2];
00003e  4a09              LDR      r2,|L35.100|
000040  7892              LDRB     r2,[r2,#2]  ; caDeviceID
000042  f8002b01          STRB     r2,[r0],#1
;;;274    	*Data++ = caDeviceID[3];
000046  4a07              LDR      r2,|L35.100|
000048  78d2              LDRB     r2,[r2,#3]  ; caDeviceID
00004a  f8002b01          STRB     r2,[r0],#1
;;;275    	*Data++ = 0x00;
00004e  2200              MOVS     r2,#0
000050  f8002b01          STRB     r2,[r0],#1
;;;276    	*Data++ = 0x99;
000054  2299              MOVS     r2,#0x99
000056  f8002b01          STRB     r2,[r0],#1
;;;277    	*Data++ = 0xFF;
00005a  22ff              MOVS     r2,#0xff
00005c  f8002b01          STRB     r2,[r0],#1
;;;278    }
000060  4770              BX       lr
;;;279    
                          ENDP

000062  0000              DCW      0x0000
                  |L35.100|
                          DCD      caDeviceID

                          AREA ||i.LKClient_Update_Run||, CODE, READONLY, ALIGN=1

                  LKClient_Update_Run PROC
;;;1076   
;;;1077   void LKClient_Update_Run(void)
000000  b510              PUSH     {r4,lr}
;;;1078   {
;;;1079   	LKClient_RcvMsg_Task();
000002  f7fffffe          BL       LKClient_RcvMsg_Task
;;;1080   	LKClient_Update_Task();
000006  f7fffffe          BL       LKClient_Update_Task
;;;1081   }
00000a  bd10              POP      {r4,pc}
;;;1082   
                          ENDP


                          AREA ||i.LKClient_Update_Task||, CODE, READONLY, ALIGN=2

                  LKClient_Update_Task PROC
;;;1010   
;;;1011   void LKClient_Update_Task(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;1012   {
;;;1013   	switch (LKClient_TransmitSta)
000002  4868              LDR      r0,|L37.420|
000004  7800              LDRB     r0,[r0,#0]  ; LKClient_TransmitSta
000006  b130              CBZ      r0,|L37.22|
000008  2801              CMP      r0,#1
00000a  d01d              BEQ      |L37.72|
00000c  2802              CMP      r0,#2
00000e  d02a              BEQ      |L37.102|
000010  2803              CMP      r0,#3
000012  d17d              BNE      |L37.272|
000014  e0ac              B        |L37.368|
                  |L37.22|
;;;1014   	{
;;;1015   		case (Ready):
;;;1016   			if(IAPOver == bTRUE){
000016  4864              LDR      r0,|L37.424|
000018  7800              LDRB     r0,[r0,#0]  ; IAPOver
00001a  2801              CMP      r0,#1
00001c  d102              BNE      |L37.36|
;;;1017   				LKClient_GoTo_Comm();
00001e  f7fffffe          BL       LKClient_GoTo_Comm
000022  e010              B        |L37.70|
                  |L37.36|
;;;1018   			}else{
;;;1019   				if(Timer_GetReached(&IAPTim) == bTRUE){
000024  4861              LDR      r0,|L37.428|
000026  f7fffffe          BL       Timer_GetReached
00002a  2801              CMP      r0,#1
00002c  d10b              BNE      |L37.70|
;;;1020   					/* 通信断开 */
;;;1021   					if(CommTimes == 5){
00002e  4860              LDR      r0,|L37.432|
000030  7800              LDRB     r0,[r0,#0]  ; CommTimes
000032  2805              CMP      r0,#5
000034  d104              BNE      |L37.64|
;;;1022   						LKClient_GoTo_Stop(5000);
000036  f2413088          MOV      r0,#0x1388
00003a  f7fffffe          BL       LKClient_GoTo_Stop
00003e  e002              B        |L37.70|
                  |L37.64|
;;;1023   					}else{
;;;1024   						LKClient_TransmitSta = Prepare;
000040  2001              MOVS     r0,#1
000042  4958              LDR      r1,|L37.420|
000044  7008              STRB     r0,[r1,#0]
                  |L37.70|
;;;1025   					}
;;;1026   				}			
;;;1027   			}
;;;1028   			break;
000046  e0aa              B        |L37.414|
                  |L37.72|
;;;1029   
;;;1030   		case (Prepare):
;;;1031   			Sim900_CheckPreSendInfoStart();
000048  f7fffffe          BL       Sim900_CheckPreSendInfoStart
;;;1032   			SendMsgToSim900A((BYTE *)"AT+CIPSEND=21\r\n",15);
00004c  210f              MOVS     r1,#0xf
00004e  a059              ADR      r0,|L37.436|
000050  f7fffffe          BL       SendMsgToSim900A
;;;1033   			LKClient_TransmitSta = Sending;
000054  2002              MOVS     r0,#2
000056  4953              LDR      r1,|L37.420|
000058  7008              STRB     r0,[r1,#0]
;;;1034   			Timer_Set(&LKMsgTim,500);
00005a  f44f71fa          MOV      r1,#0x1f4
00005e  4859              LDR      r0,|L37.452|
000060  f7fffffe          BL       Timer_Set
;;;1035   			break;
000064  e09b              B        |L37.414|
                  |L37.102|
;;;1036   
;;;1037   		case (Sending):
;;;1038   			if( (Sim900_bPreSendInfo()) || (Timer_GetReached(&LKMsgTim) == bTRUE) ){
000066  f7fffffe          BL       Sim900_bPreSendInfo
00006a  b920              CBNZ     r0,|L37.118|
00006c  4855              LDR      r0,|L37.452|
00006e  f7fffffe          BL       Timer_GetReached
000072  2801              CMP      r0,#1
000074  d17b              BNE      |L37.366|
                  |L37.118|
;;;1039   				
;;;1040   				DEBUG_LOCATION();
000076  bf00              NOP      
000078  f44f6482          MOV      r4,#0x410
00007c  a052              ADR      r0,|L37.456|
00007e  f7fffffe          BL       DebugUart_Putstr
000082  a053              ADR      r0,|L37.464|
000084  f7fffffe          BL       DebugUart_Putstr
000088  a058              ADR      r0,|L37.492|
00008a  f7fffffe          BL       DebugUart_Putstr
00008e  a058              ADR      r0,|L37.496|
000090  f7fffffe          BL       DebugUart_Putstr
000094  f44f707a          MOV      r0,#0x3e8
000098  fb94f0f0          SDIV     r0,r4,r0
00009c  210a              MOVS     r1,#0xa
00009e  fb90f2f1          SDIV     r2,r0,r1
0000a2  fb010012          MLS      r0,r1,r2,r0
0000a6  3030              ADDS     r0,r0,#0x30
0000a8  b2c5              UXTB     r5,r0
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       DebugUart_Putchar
0000b0  2064              MOVS     r0,#0x64
0000b2  fb94f0f0          SDIV     r0,r4,r0
0000b6  210a              MOVS     r1,#0xa
0000b8  fb90f2f1          SDIV     r2,r0,r1
0000bc  fb010012          MLS      r0,r1,r2,r0
0000c0  3030              ADDS     r0,r0,#0x30
0000c2  b2c5              UXTB     r5,r0
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       DebugUart_Putchar
0000ca  200a              MOVS     r0,#0xa
0000cc  fb94f0f0          SDIV     r0,r4,r0
0000d0  210a              MOVS     r1,#0xa
0000d2  fb90f2f1          SDIV     r2,r0,r1
0000d6  fb010012          MLS      r0,r1,r2,r0
0000da  3030              ADDS     r0,r0,#0x30
0000dc  b2c5              UXTB     r5,r0
0000de  4628              MOV      r0,r5
0000e0  f7fffffe          BL       DebugUart_Putchar
0000e4  200a              MOVS     r0,#0xa
0000e6  fb94f1f0          SDIV     r1,r4,r0
0000ea  fb004011          MLS      r0,r0,r1,r4
0000ee  3030              ADDS     r0,r0,#0x30
0000f0  b2c5              UXTB     r5,r0
0000f2  4628              MOV      r0,r5
0000f4  f7fffffe          BL       DebugUart_Putchar
0000f8  a03f              ADR      r0,|L37.504|
0000fa  f7fffffe          BL       DebugUart_Putstr
0000fe  bf00              NOP      
;;;1041   				DebugUart_Putstr("\r\n********************send************************\r\n");
000100  a03e              ADR      r0,|L37.508|
000102  f7fffffe          BL       DebugUart_Putstr
;;;1042   				do 
000106  bf00              NOP      
;;;1043   				{
;;;1044   					char hexBuf[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
000108  a34a              ADR      r3,|L37.564|
00010a  e9d32000          LDRD     r2,r0,[r3,#0]
00010e  e000              B        |L37.274|
                  |L37.272|
000110  e044              B        |L37.412|
                  |L37.274|
000112  e9d31302          LDRD     r1,r3,[r3,#8]
000116  ae01              ADD      r6,sp,#4
000118  c60b              STM      r6!,{r0,r1,r3}
00011a  9200              STR      r2,[sp,#0]
;;;1045   					int i;
;;;1046   					
;;;1047   					for(i=0; i<21; i++)
00011c  2400              MOVS     r4,#0
00011e  e010              B        |L37.322|
                  |L37.288|
;;;1048   					{
;;;1049   						DebugUart_Putchar(hexBuf[(LKClientMsg[i]>>4) & 0xf]);
000120  4948              LDR      r1,|L37.580|
000122  5d09              LDRB     r1,[r1,r4]
000124  466a              MOV      r2,sp
000126  eb021111          ADD      r1,r2,r1,LSR #4
00012a  7808              LDRB     r0,[r1,#0]
00012c  f7fffffe          BL       DebugUart_Putchar
;;;1050   						DebugUart_Putchar(hexBuf[(LKClientMsg[i]) & 0xf]);
000130  4944              LDR      r1,|L37.580|
000132  5d09              LDRB     r1,[r1,r4]
000134  f001010f          AND      r1,r1,#0xf
000138  f81d0001          LDRB     r0,[sp,r1]
00013c  f7fffffe          BL       DebugUart_Putchar
000140  1c64              ADDS     r4,r4,#1              ;1047
                  |L37.322|
000142  2c15              CMP      r4,#0x15              ;1047
000144  dbec              BLT      |L37.288|
;;;1051   					}
;;;1052   				}while(0);
000146  bf00              NOP      
;;;1053   				DebugUart_Putstr("\r\n********************end*************************\r\n");
000148  e000              B        |L37.332|
00014a  e010              B        |L37.366|
                  |L37.332|
00014c  a03e              ADR      r0,|L37.584|
00014e  f7fffffe          BL       DebugUart_Putstr
;;;1054   	
;;;1055   				Sim900_CheckSendOKStart();
000152  f7fffffe          BL       Sim900_CheckSendOKStart
;;;1056   				SendMsgToSim900A(LKClientMsg,21);
000156  2115              MOVS     r1,#0x15
000158  483a              LDR      r0,|L37.580|
00015a  f7fffffe          BL       SendMsgToSim900A
;;;1057   				Timer_Set(&LKMsgTim,1000);
00015e  f44f717a          MOV      r1,#0x3e8
000162  4818              LDR      r0,|L37.452|
000164  f7fffffe          BL       Timer_Set
;;;1058   				LKClient_TransmitSta = SendOver;
000168  2003              MOVS     r0,#3
00016a  490e              LDR      r1,|L37.420|
00016c  7008              STRB     r0,[r1,#0]
                  |L37.366|
;;;1059   			}
;;;1060   			break;
00016e  e016              B        |L37.414|
                  |L37.368|
;;;1061   
;;;1062   		case (SendOver):
;;;1063   			if((Sim900_bInfoSendOK()) || (Timer_GetReached(&LKMsgTim) == bTRUE ) ){
000170  f7fffffe          BL       Sim900_bInfoSendOK
000174  b920              CBNZ     r0,|L37.384|
000176  4813              LDR      r0,|L37.452|
000178  f7fffffe          BL       Timer_GetReached
00017c  2801              CMP      r0,#1
00017e  d10c              BNE      |L37.410|
                  |L37.384|
;;;1064   				LKClient_TransmitSta = Ready;
000180  2000              MOVS     r0,#0
000182  4908              LDR      r1,|L37.420|
000184  7008              STRB     r0,[r1,#0]
;;;1065   				CommTimes++;
000186  480a              LDR      r0,|L37.432|
000188  7800              LDRB     r0,[r0,#0]  ; CommTimes
00018a  1c40              ADDS     r0,r0,#1
00018c  4908              LDR      r1,|L37.432|
00018e  7008              STRB     r0,[r1,#0]
;;;1066   				Timer_Set(&IAPTim,10000);
000190  f2427110          MOV      r1,#0x2710
000194  4805              LDR      r0,|L37.428|
000196  f7fffffe          BL       Timer_Set
                  |L37.410|
;;;1067   			}
;;;1068   			break;
00019a  e000              B        |L37.414|
                  |L37.412|
;;;1069   			
;;;1070   		default:
;;;1071   			break;	
00019c  bf00              NOP      
                  |L37.414|
00019e  bf00              NOP                            ;1028
;;;1072   	
;;;1073   	}
;;;1074   }
0001a0  bd7f              POP      {r0-r6,pc}
;;;1075   
                          ENDP

0001a2  0000              DCW      0x0000
                  |L37.420|
                          DCD      LKClient_TransmitSta
                  |L37.424|
                          DCD      IAPOver
                  |L37.428|
                          DCD      IAPTim
                  |L37.432|
                          DCD      CommTimes
                  |L37.436|
0001b4  41542b43          DCB      "AT+CIPSEND=21\r\n",0
0001b8  49505345
0001bc  4e443d32
0001c0  310d0a00
                  |L37.452|
                          DCD      LKMsgTim
                  |L37.456|
0001c8  5b46696c          DCB      "[File:",0
0001cc  653a00  
0001cf  00                DCB      0
                  |L37.464|
0001d0  2e2e5c41          DCB      "..\\App\\LKClient\\lkclient.c",0
0001d4  70705c4c
0001d8  4b436c69
0001dc  656e745c
0001e0  6c6b636c
0001e4  69656e74
0001e8  2e6300  
0001eb  00                DCB      0
                  |L37.492|
0001ec  202000            DCB      "  ",0
0001ef  00                DCB      0
                  |L37.496|
0001f0  6c696e65          DCB      "line:",0
0001f4  3a00    
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L37.504|
0001f8  5d0d0a00          DCB      "]\r\n",0
                  |L37.508|
0001fc  0d0a2a2a          DCB      "\r\n********************send************************\r\n"
000200  2a2a2a2a
000204  2a2a2a2a
000208  2a2a2a2a
00020c  2a2a2a2a
000210  2a2a7365
000214  6e642a2a
000218  2a2a2a2a
00021c  2a2a2a2a
000220  2a2a2a2a
000224  2a2a2a2a
000228  2a2a2a2a
00022c  2a2a0d0a
000230  00                DCB      0
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L37.564|
000234  30313233          DCB      "0123456789ABCDEF"
000238  34353637
00023c  38394142
000240  43444546
                  |L37.580|
                          DCD      LKClientMsg
                  |L37.584|
000248  0d0a2a2a          DCB      "\r\n********************end*************************\r\n"
00024c  2a2a2a2a
000250  2a2a2a2a
000254  2a2a2a2a
000258  2a2a2a2a
00025c  2a2a656e
000260  642a2a2a
000264  2a2a2a2a
000268  2a2a2a2a
00026c  2a2a2a2a
000270  2a2a2a2a
000274  2a2a2a2a
000278  2a2a0d0a
00027c  00                DCB      0
00027d  00                DCB      0
00027e  00                DCB      0
00027f  00                DCB      0

                          AREA ||i.SoftPackageAnalyze||, CODE, READONLY, ALIGN=2

                  SoftPackageAnalyze PROC
;;;416    /* 处理每包固件应答 */
;;;417    void SoftPackageAnalyze( BYTE * Msg , INT16U MsgLen )
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;418    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;419    	INT32U  i;
;;;420    	INT8U  Sta = 0;
000008  f04f0800          MOV      r8,#0
;;;421    	INT16U PacNum = 0;
00000c  46c1              MOV      r9,r8
;;;422    	INT16U SoftLen = 0;
00000e  2600              MOVS     r6,#0
;;;423    		
;;;424    	if(MsgLen < 5){
000010  2f05              CMP      r7,#5
000012  da01              BGE      |L38.24|
                  |L38.20|
;;;425    	    return;
;;;426    	}
;;;427    
;;;428    	Sta = * Msg++;
;;;429    	PacNum |= (*Msg++) << 8;
;;;430    	PacNum |= (*Msg++);
;;;431    
;;;432    	SoftLen |= (*Msg++) << 8;
;;;433    	SoftLen |= (*Msg++);
;;;434    
;;;435    	// 若平台无法解析此固件包
;;;436    	if(Sta == 0x01 || Sta == 0x03){
;;;437    	    return;
;;;438    	}
;;;439        // 如果下发的固件包序号与终端等待接收的固件包序号不一致
;;;440    	if(PacNum != NeedRcvPacNum){
;;;441    	    return;
;;;442    	}
;;;443    	// 若固件包长度不正确
;;;444    	if(MsgLen != 5+SoftLen){
;;;445    	    return;
;;;446    	}
;;;447    	if(SoftLen > 512){
;;;448    		return;
;;;449    	}
;;;450    	
;;;451    	// 拷贝固件包
;;;452    	ByteNum_InPac = SoftLen;
;;;453    	RMLStrcpy(UpdatePacInfo,Msg,ByteNum_InPac);
;;;454    
;;;455    	for( i = 0 ; i < ByteNum_InPac ; i++)
;;;456    	{
;;;457    		CheckHalfWord_FromServer += UpdatePacInfo[i];		
;;;458    	}
;;;459    
;;;460    	// 烧写固件包
;;;461    	WriteSoft_ToFlash(UpdatePacInfo,ByteNum_InPac);
;;;462    
;;;463    	// 如果接收完毕
;;;464    	if(Sta == 0x02){
;;;465    
;;;466    	    // 若平台给的校验字和所给数据的校验字相同
;;;467    		if(CheckHalfWord_FromServer == RcvCheckByte){
;;;468    			
;;;469    			/* 计算更新程序的校验字	*/
;;;470    			for( i = 0 ; i < SoftWholeSpace ; i++ )
;;;471    			{
;;;472    				CheckHalfWord_InFlash += *((BYTE *)(UPD_PROGRAM_ADDR+i));
;;;473    			}
;;;474    	
;;;475    			/* 检验校验字 */
;;;476    			if(CheckHalfWord_InFlash == RcvCheckByte){
;;;477    				// 写SuperBlock
;;;478    				SUPER_BLOCK Sb_Temp;
;;;479    				Sb_Temp.bNewUpdateRequest = 0x01;				    // 更新请求标志  App   -> Rboot
;;;480    				Sb_Temp.bUpdateOK = 0x00;						    // 更新成功标志  Rboot -> App
;;;481    				Sb_Temp.reserved = 0x00;						    // 保留
;;;482    			 	Sb_Temp.FW_StartAddr = UPD_PROGRAM_ADDR;			// 固件的开始地址(Ext Flash)0x08018000
;;;483    			 	Sb_Temp.FW_Size = SoftWholeSpace;				    // 固件总大小
;;;484    			 	Sb_Temp.FW_VerifyWord = RcvCheckByte;			  	// 固件校验字
;;;485    			 	Sb_Temp.LockWord = 0x5599;						    // 0x5599
;;;486    				Flash_WriteSuperBlock(&Sb_Temp);		
;;;487    			}			
;;;488    		}
;;;489    		IAPOver = bTRUE;
;;;490    
;;;491    	}else{
;;;492    		NeedRcvPacNum++;
;;;493    	memset(LKClientMsg,0,110);//addmemset  2015.7.10
;;;494    		LKClient_PackIAPInfo(LKClientMsg);
;;;495    		LKClient_AddFlowID();
;;;496    		Timer_Set(&IAPTim,1000);
;;;497    	}
;;;498    }
000014  e8bd87ff          POP      {r0-r10,pc}
                  |L38.24|
000018  f8148b01          LDRB     r8,[r4],#1            ;428
00001c  f8141b01          LDRB     r1,[r4],#1            ;429
000020  ea492901          ORR      r9,r9,r1,LSL #8       ;429
000024  f8140b01          LDRB     r0,[r4],#1            ;430
000028  ea400909          ORR      r9,r0,r9              ;430
00002c  f8141b01          LDRB     r1,[r4],#1            ;432
000030  ea462601          ORR      r6,r6,r1,LSL #8       ;432
000034  f8140b01          LDRB     r0,[r4],#1            ;433
000038  4306              ORRS     r6,r6,r0              ;433
00003a  f1b80f01          CMP      r8,#1                 ;436
00003e  d002              BEQ      |L38.70|
000040  f1b80f03          CMP      r8,#3                 ;436
000044  d100              BNE      |L38.72|
                  |L38.70|
000046  e7e5              B        |L38.20|
                  |L38.72|
000048  483a              LDR      r0,|L38.308|
00004a  8800              LDRH     r0,[r0,#0]            ;440  ; NeedRcvPacNum
00004c  4581              CMP      r9,r0                 ;440
00004e  d000              BEQ      |L38.82|
000050  e7e0              B        |L38.20|
                  |L38.82|
000052  1d70              ADDS     r0,r6,#5              ;444
000054  42b8              CMP      r0,r7                 ;444
000056  d000              BEQ      |L38.90|
000058  e7dc              B        |L38.20|
                  |L38.90|
00005a  f5b67f00          CMP      r6,#0x200             ;447
00005e  dd00              BLE      |L38.98|
000060  e7d8              B        |L38.20|
                  |L38.98|
000062  4835              LDR      r0,|L38.312|
000064  8006              STRH     r6,[r0,#0]            ;452
000066  8802              LDRH     r2,[r0,#0]            ;453  ; ByteNum_InPac
000068  4621              MOV      r1,r4                 ;453
00006a  4834              LDR      r0,|L38.316|
00006c  f7fffffe          BL       RMLStrcpy
000070  2500              MOVS     r5,#0                 ;455
000072  e007              B        |L38.132|
                  |L38.116|
000074  4831              LDR      r0,|L38.316|
000076  5d40              LDRB     r0,[r0,r5]            ;457
000078  4931              LDR      r1,|L38.320|
00007a  8809              LDRH     r1,[r1,#0]            ;457  ; CheckHalfWord_FromServer
00007c  4408              ADD      r0,r0,r1              ;457
00007e  4930              LDR      r1,|L38.320|
000080  8008              STRH     r0,[r1,#0]            ;457
000082  1c6d              ADDS     r5,r5,#1              ;455
                  |L38.132|
000084  482c              LDR      r0,|L38.312|
000086  8800              LDRH     r0,[r0,#0]            ;455  ; ByteNum_InPac
000088  4285              CMP      r5,r0                 ;455
00008a  d3f3              BCC      |L38.116|
00008c  482a              LDR      r0,|L38.312|
00008e  8801              LDRH     r1,[r0,#0]            ;461  ; ByteNum_InPac
000090  482a              LDR      r0,|L38.316|
000092  f7fffffe          BL       WriteSoft_ToFlash
000096  f1b80f02          CMP      r8,#2                 ;464
00009a  d136              BNE      |L38.266|
00009c  4828              LDR      r0,|L38.320|
00009e  8800              LDRH     r0,[r0,#0]            ;467  ; CheckHalfWord_FromServer
0000a0  4928              LDR      r1,|L38.324|
0000a2  8809              LDRH     r1,[r1,#0]            ;467  ; RcvCheckByte
0000a4  4288              CMP      r0,r1                 ;467
0000a6  d12c              BNE      |L38.258|
0000a8  2500              MOVS     r5,#0                 ;470
0000aa  e007              B        |L38.188|
                  |L38.172|
0000ac  4826              LDR      r0,|L38.328|
0000ae  5c28              LDRB     r0,[r5,r0]            ;472
0000b0  4926              LDR      r1,|L38.332|
0000b2  8809              LDRH     r1,[r1,#0]            ;472  ; CheckHalfWord_InFlash
0000b4  4408              ADD      r0,r0,r1              ;472
0000b6  4925              LDR      r1,|L38.332|
0000b8  8008              STRH     r0,[r1,#0]            ;472
0000ba  1c6d              ADDS     r5,r5,#1              ;470
                  |L38.188|
0000bc  4824              LDR      r0,|L38.336|
0000be  6800              LDR      r0,[r0,#0]            ;470  ; SoftWholeSpace
0000c0  4285              CMP      r5,r0                 ;470
0000c2  d3f3              BCC      |L38.172|
0000c4  4821              LDR      r0,|L38.332|
0000c6  8800              LDRH     r0,[r0,#0]            ;476  ; CheckHalfWord_InFlash
0000c8  491e              LDR      r1,|L38.324|
0000ca  8809              LDRH     r1,[r1,#0]            ;476  ; RcvCheckByte
0000cc  4288              CMP      r0,r1                 ;476
0000ce  d118              BNE      |L38.258|
0000d0  2001              MOVS     r0,#1                 ;479
0000d2  f88d0000          STRB     r0,[sp,#0]            ;479
0000d6  2000              MOVS     r0,#0                 ;480
0000d8  f88d0001          STRB     r0,[sp,#1]            ;480
0000dc  f8ad0002          STRH     r0,[sp,#2]            ;481
0000e0  4819              LDR      r0,|L38.328|
0000e2  9001              STR      r0,[sp,#4]            ;482
0000e4  481a              LDR      r0,|L38.336|
0000e6  6800              LDR      r0,[r0,#0]            ;483  ; SoftWholeSpace
0000e8  9002              STR      r0,[sp,#8]            ;483
0000ea  4816              LDR      r0,|L38.324|
0000ec  8800              LDRH     r0,[r0,#0]            ;484  ; RcvCheckByte
0000ee  f8ad000c          STRH     r0,[sp,#0xc]          ;484
0000f2  f2455099          MOV      r0,#0x5599            ;485
0000f6  f8ad000e          STRH     r0,[sp,#0xe]          ;485
0000fa  4668              MOV      r0,sp                 ;486
0000fc  f7fffffe          BL       Flash_WriteSuperBlock
000100  bf00              NOP                            ;487
                  |L38.258|
000102  2001              MOVS     r0,#1                 ;489
000104  4913              LDR      r1,|L38.340|
000106  7008              STRB     r0,[r1,#0]            ;489
000108  e012              B        |L38.304|
                  |L38.266|
00010a  480a              LDR      r0,|L38.308|
00010c  8800              LDRH     r0,[r0,#0]            ;492  ; NeedRcvPacNum
00010e  1c40              ADDS     r0,r0,#1              ;492
000110  4908              LDR      r1,|L38.308|
000112  8008              STRH     r0,[r1,#0]            ;492
000114  216e              MOVS     r1,#0x6e              ;493
000116  4810              LDR      r0,|L38.344|
000118  f7fffffe          BL       __aeabi_memclr
00011c  480e              LDR      r0,|L38.344|
00011e  f7fffffe          BL       LKClient_PackIAPInfo
000122  f7fffffe          BL       LKClient_AddFlowID
000126  f44f717a          MOV      r1,#0x3e8             ;496
00012a  480c              LDR      r0,|L38.348|
00012c  f7fffffe          BL       Timer_Set
                  |L38.304|
000130  bf00              NOP      
000132  e76f              B        |L38.20|
;;;499    
                          ENDP

                  |L38.308|
                          DCD      NeedRcvPacNum
                  |L38.312|
                          DCD      ByteNum_InPac
                  |L38.316|
                          DCD      UpdatePacInfo
                  |L38.320|
                          DCD      CheckHalfWord_FromServer
                  |L38.324|
                          DCD      RcvCheckByte
                  |L38.328|
                          DCD      0x08018000
                  |L38.332|
                          DCD      CheckHalfWord_InFlash
                  |L38.336|
                          DCD      SoftWholeSpace
                  |L38.340|
                          DCD      IAPOver
                  |L38.344|
                          DCD      LKClientMsg
                  |L38.348|
                          DCD      IAPTim

                          AREA ||i.SoftUpdateCmdAnalyze||, CODE, READONLY, ALIGN=2

                  SoftUpdateCmdAnalyze PROC
;;;384    /* 处理固件更新请求 */
;;;385    void SoftUpdateCmdAnalyze( BYTE * Msg , INT16U MsgLen )
000000  290a              CMP      r1,#0xa
;;;386    {
;;;387        if(MsgLen != 10){
000002  d000              BEQ      |L39.6|
                  |L39.4|
;;;388    	    return ;
;;;389    	}
;;;390    
;;;391    	UpdateAddrress = UPD_PROGRAM_ADDR;
;;;392    	ByteNum_InPac = 0;						   
;;;393    	NeedRcvPacNum = 0;			   			   
;;;394    	CheckHalfWord_FromServer = 0 ;
;;;395    	CheckHalfWord_InFlash = 0;
;;;396    
;;;397    	SoftVer |= (*Msg++) << 8;
;;;398    	SoftVer |= (*Msg++);
;;;399    
;;;400    	SoftWholeSpace |= (*Msg++) << 24;
;;;401    	SoftWholeSpace |= (*Msg++) << 16;
;;;402    	SoftWholeSpace |= (*Msg++) << 8;
;;;403    	SoftWholeSpace |= (*Msg++);
;;;404    
;;;405    	SoftPerPacSpace |= (*Msg++) << 8;
;;;406    	SoftPerPacSpace |= (*Msg++);
;;;407    
;;;408    	RcvCheckByte |= (*Msg++) << 8;
;;;409    	RcvCheckByte |= (*Msg++);
;;;410    
;;;411    	SoftPackageNum = SoftWholeSpace / SoftPerPacSpace;
;;;412    
;;;413    }
000004  4770              BX       lr
                  |L39.6|
000006  4a2f              LDR      r2,|L39.196|
000008  4b2f              LDR      r3,|L39.200|
00000a  601a              STR      r2,[r3,#0]            ;391  ; UpdateAddrress
00000c  2200              MOVS     r2,#0                 ;392
00000e  4b2f              LDR      r3,|L39.204|
000010  801a              STRH     r2,[r3,#0]            ;392
000012  4b2f              LDR      r3,|L39.208|
000014  801a              STRH     r2,[r3,#0]            ;393
000016  4b2f              LDR      r3,|L39.212|
000018  801a              STRH     r2,[r3,#0]            ;394
00001a  4b2f              LDR      r3,|L39.216|
00001c  801a              STRH     r2,[r3,#0]            ;395
00001e  f8103b01          LDRB     r3,[r0],#1            ;397
000022  4a2e              LDR      r2,|L39.220|
000024  8812              LDRH     r2,[r2,#0]            ;397  ; SoftVer
000026  ea422203          ORR      r2,r2,r3,LSL #8       ;397
00002a  4b2c              LDR      r3,|L39.220|
00002c  801a              STRH     r2,[r3,#0]            ;397
00002e  f8102b01          LDRB     r2,[r0],#1            ;398
000032  881b              LDRH     r3,[r3,#0]            ;398  ; SoftVer
000034  431a              ORRS     r2,r2,r3              ;398
000036  4b29              LDR      r3,|L39.220|
000038  801a              STRH     r2,[r3,#0]            ;398
00003a  f8103b01          LDRB     r3,[r0],#1            ;400
00003e  4a28              LDR      r2,|L39.224|
000040  6812              LDR      r2,[r2,#0]            ;400  ; SoftWholeSpace
000042  ea426203          ORR      r2,r2,r3,LSL #24      ;400
000046  4b26              LDR      r3,|L39.224|
000048  601a              STR      r2,[r3,#0]            ;400  ; SoftWholeSpace
00004a  f8103b01          LDRB     r3,[r0],#1            ;401
00004e  4a24              LDR      r2,|L39.224|
000050  6812              LDR      r2,[r2,#0]            ;401  ; SoftWholeSpace
000052  ea424203          ORR      r2,r2,r3,LSL #16      ;401
000056  4b22              LDR      r3,|L39.224|
000058  601a              STR      r2,[r3,#0]            ;401  ; SoftWholeSpace
00005a  f8103b01          LDRB     r3,[r0],#1            ;402
00005e  4a20              LDR      r2,|L39.224|
000060  6812              LDR      r2,[r2,#0]            ;402  ; SoftWholeSpace
000062  ea422203          ORR      r2,r2,r3,LSL #8       ;402
000066  4b1e              LDR      r3,|L39.224|
000068  601a              STR      r2,[r3,#0]            ;402  ; SoftWholeSpace
00006a  f8102b01          LDRB     r2,[r0],#1            ;403
00006e  681b              LDR      r3,[r3,#0]            ;403  ; SoftWholeSpace
000070  431a              ORRS     r2,r2,r3              ;403
000072  4b1b              LDR      r3,|L39.224|
000074  601a              STR      r2,[r3,#0]            ;403  ; SoftWholeSpace
000076  f8103b01          LDRB     r3,[r0],#1            ;405
00007a  4a1a              LDR      r2,|L39.228|
00007c  8812              LDRH     r2,[r2,#0]            ;405  ; SoftPerPacSpace
00007e  ea422203          ORR      r2,r2,r3,LSL #8       ;405
000082  4b18              LDR      r3,|L39.228|
000084  801a              STRH     r2,[r3,#0]            ;405
000086  f8102b01          LDRB     r2,[r0],#1            ;406
00008a  881b              LDRH     r3,[r3,#0]            ;406  ; SoftPerPacSpace
00008c  431a              ORRS     r2,r2,r3              ;406
00008e  4b15              LDR      r3,|L39.228|
000090  801a              STRH     r2,[r3,#0]            ;406
000092  f8103b01          LDRB     r3,[r0],#1            ;408
000096  4a14              LDR      r2,|L39.232|
000098  8812              LDRH     r2,[r2,#0]            ;408  ; RcvCheckByte
00009a  ea422203          ORR      r2,r2,r3,LSL #8       ;408
00009e  4b12              LDR      r3,|L39.232|
0000a0  801a              STRH     r2,[r3,#0]            ;408
0000a2  f8102b01          LDRB     r2,[r0],#1            ;409
0000a6  881b              LDRH     r3,[r3,#0]            ;409  ; RcvCheckByte
0000a8  431a              ORRS     r2,r2,r3              ;409
0000aa  4b0f              LDR      r3,|L39.232|
0000ac  801a              STRH     r2,[r3,#0]            ;409
0000ae  4a0c              LDR      r2,|L39.224|
0000b0  6812              LDR      r2,[r2,#0]            ;411  ; SoftWholeSpace
0000b2  4b0c              LDR      r3,|L39.228|
0000b4  881b              LDRH     r3,[r3,#0]            ;411  ; SoftPerPacSpace
0000b6  fbb2f2f3          UDIV     r2,r2,r3              ;411
0000ba  4b0c              LDR      r3,|L39.236|
0000bc  701a              STRB     r2,[r3,#0]            ;411
0000be  bf00              NOP      
0000c0  e7a0              B        |L39.4|
;;;414    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L39.196|
                          DCD      0x08018000
                  |L39.200|
                          DCD      UpdateAddrress
                  |L39.204|
                          DCD      ByteNum_InPac
                  |L39.208|
                          DCD      NeedRcvPacNum
                  |L39.212|
                          DCD      CheckHalfWord_FromServer
                  |L39.216|
                          DCD      CheckHalfWord_InFlash
                  |L39.220|
                          DCD      SoftVer
                  |L39.224|
                          DCD      SoftWholeSpace
                  |L39.228|
                          DCD      SoftPerPacSpace
                  |L39.232|
                          DCD      RcvCheckByte
                  |L39.236|
                          DCD      SoftPackageNum

                          AREA ||i.WriteSoft_ToFlash||, CODE, READONLY, ALIGN=2

                  WriteSoft_ToFlash PROC
;;;295    /* 写入内部FLASH更新程序区域 */
;;;296    void WriteSoft_ToFlash(BYTE * Msg , INT16U MsgLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;297    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;298    	INT32U i;
;;;299    	INT16U WriteTimes = 0;
000008  f04f0800          MOV      r8,#0
;;;300    	INT16U * p_WriteData = (INT16U * )Msg;
00000c  4637              MOV      r7,r6
;;;301    
;;;302    	FLASH_Unlock();
00000e  f7fffffe          BL       FLASH_Unlock
;;;303    	FLASH_WaitForLastOperation(5000);
000012  f2413088          MOV      r0,#0x1388
000016  f7fffffe          BL       FLASH_WaitForLastOperation
;;;304    
;;;305    
;;;306    	if(MsgLen % 2 == 0){
00001a  4620              MOV      r0,r4
00001c  eb0471d0          ADD      r1,r4,r0,LSR #31
000020  1049              ASRS     r1,r1,#1
000022  ebb40141          SUBS     r1,r4,r1,LSL #1
000026  d104              BNE      |L40.50|
;;;307    		WriteTimes = MsgLen / 2;		
000028  eb0471d0          ADD      r1,r4,r0,LSR #31
00002c  f3c1084f          UBFX     r8,r1,#1,#16
000030  e006              B        |L40.64|
                  |L40.50|
;;;308    	}else{
;;;309    		WriteTimes = MsgLen / 2 + 1;		
000032  4620              MOV      r0,r4
000034  eb0471d0          ADD      r1,r4,r0,LSR #31
000038  1049              ASRS     r1,r1,#1
00003a  1c49              ADDS     r1,r1,#1
00003c  fa1ff881          UXTH     r8,r1
                  |L40.64|
;;;310    	}
;;;311    
;;;312    	if(UpdateAddrress % FLASH_PAGE_SIZE == 0){
000040  4815              LDR      r0,|L40.152|
000042  8800              LDRH     r0,[r0,#0]  ; UpdateAddrress
000044  0540              LSLS     r0,r0,#21
000046  0d40              LSRS     r0,r0,#21
000048  d107              BNE      |L40.90|
;;;313    		FLASH_ErasePage(UpdateAddrress);
00004a  4813              LDR      r0,|L40.152|
00004c  6800              LDR      r0,[r0,#0]  ; UpdateAddrress
00004e  f7fffffe          BL       FLASH_ErasePage
;;;314    		FLASH_WaitForLastOperation(5000);
000052  f2413088          MOV      r0,#0x1388
000056  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L40.90|
;;;315    	}
;;;316        for( i = 0 ; i < WriteTimes ; i++ )
00005a  2500              MOVS     r5,#0
00005c  e00c              B        |L40.120|
                  |L40.94|
;;;317    	{
;;;318    		FLASH_ProgramHalfWord( UpdateAddrress+(i*2) , * p_WriteData++ );
00005e  f8371b02          LDRH     r1,[r7],#2
000062  4a0d              LDR      r2,|L40.152|
000064  6812              LDR      r2,[r2,#0]  ; UpdateAddrress
000066  eb020045          ADD      r0,r2,r5,LSL #1
00006a  f7fffffe          BL       FLASH_ProgramHalfWord
;;;319    		FLASH_WaitForLastOperation(5000);
00006e  f2413088          MOV      r0,#0x1388
000072  f7fffffe          BL       FLASH_WaitForLastOperation
000076  1c6d              ADDS     r5,r5,#1              ;316
                  |L40.120|
000078  4545              CMP      r5,r8                 ;316
00007a  d3f0              BCC      |L40.94|
;;;320    	}
;;;321    
;;;322    	FLASH_Lock();
00007c  f7fffffe          BL       FLASH_Lock
;;;323    	FLASH_WaitForLastOperation(5000);
000080  f2413088          MOV      r0,#0x1388
000084  f7fffffe          BL       FLASH_WaitForLastOperation
;;;324    
;;;325    	UpdateAddrress+= MsgLen; 
000088  4803              LDR      r0,|L40.152|
00008a  6800              LDR      r0,[r0,#0]  ; UpdateAddrress
00008c  4420              ADD      r0,r0,r4
00008e  4902              LDR      r1,|L40.152|
000090  6008              STR      r0,[r1,#0]  ; UpdateAddrress
;;;326    }
000092  e8bd81f0          POP      {r4-r8,pc}
;;;327    
                          ENDP

000096  0000              DCW      0x0000
                  |L40.152|
                          DCD      UpdateAddrress

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  SIMCardIMSI
                          %        16
                  LKClientMsg
                          %        110
                  UpdatePacInfo
                          %        512

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  41540d0a          DCB      "AT\r\n",0
000004  00      
000005  41540d0d          DCB      "AT\r\r\nOK\r\n",0
000009  0a4f4b0d
00000d  0a00    
00000f  41544530          DCB      "ATE0\r\n",0
000013  0d0a00  
000016  0d0a4f4b          DCB      "\r\nOK\r\n",0
00001a  0d0a00  
00001d  41542b49          DCB      "AT+IPR=9600\r\n",0
000021  50523d39
000025  3630300d
000029  0a00    
00002b  41542b43          DCB      "AT+CIMI\r\n",0
00002f  494d490d
000033  0a00    
000035  0d0a3436          DCB      "\r\n460",0
000039  3000    
00003b  41542b43          DCB      "AT+CIPSPRT=1\r\n",0
00003f  49505350
000043  52543d31
000047  0d0a00  
00004a  41542b43          DCB      "AT+CGATT?\r\n",0
00004e  47415454
000052  3f0d0a00
000056  0d0a2b43          DCB      "\r\n+CGATT: 1\r\n\r\nOK\r\n",0
00005a  47415454
00005e  3a20310d
000062  0a0d0a4f
000066  4b0d0a00
00006a  41542b43          DCB      "AT+CIPSHUT\r\n",0
00006e  49505348
000072  55540d0a
000076  00      
000077  0d0a5348          DCB      "\r\nSHUT OK\r\n",0
00007b  5554204f
00007f  4b0d0a00
000083  41542b43          DCB      "AT+CIPSTATUS\r\n",0
000087  49505354
00008b  41545553
00008f  0d0a00  
000092  0d0a4f4b          DCB      "\r\nOK\r\n\r\nSTATE: IP INITIAL\r\n",0
000096  0d0a0d0a
00009a  53544154
00009e  453a2049
0000a2  5020494e
0000a6  49544941
0000aa  4c0d0a00
0000ae  0d0a4f4b          DCB      "\r\nOK\r\n\r\nCONNECT OK\r\n",0
0000b2  0d0a0d0a
0000b6  434f4e4e
0000ba  45435420
0000be  4f4b0d0a
0000c2  00      

                          AREA ||.data||, DATA, ALIGN=2

                  FlowID
000000  0000              DCW      0x0000
                  CommTimes
000002  00                DCB      0x00
                  LKClientMsgACK
000003  00                DCB      0x00
                  LKClientConCmd
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x5
00000c  01f4              DCW      0x01f4
00000e  0a00              DCB      0x0a,0x00
                          DCD      ||.conststring||+0xf
                          DCD      ||.conststring||+0x16
000018  01f4              DCW      0x01f4
00001a  0a00              DCB      0x0a,0x00
                          DCD      ||.conststring||+0x1d
                          DCD      ||.conststring||+0x16
000024  01f4              DCW      0x01f4
000026  0a00              DCB      0x0a,0x00
                          DCD      ||.conststring||+0x2b
                          DCD      ||.conststring||+0x35
000030  01f4              DCW      0x01f4
000032  0a00              DCB      0x0a,0x00
                          DCD      ||.conststring||+0x3b
                          DCD      ||.conststring||+0x16
00003c  00c8              DCW      0x00c8
00003e  0a00              DCB      0x0a,0x00
                          DCD      ||.conststring||+0x4a
                          DCD      ||.conststring||+0x56
000048  03e8              DCW      0x03e8
00004a  1e00              DCB      0x1e,0x00
                          DCD      ||.conststring||+0x6a
                          DCD      ||.conststring||+0x77
000054  0bb8              DCW      0x0bb8
000056  0300              DCB      0x03,0x00
                          DCD      ||.conststring||+0x83
                          DCD      ||.conststring||+0x92
000060  0bb8              DCW      0x0bb8
000062  0300              DCB      0x03,0x00
                          DCD      UDP_Connect
                          DCD      ||.conststring||+0xae
00006c  7530              DCW      0x7530
00006e  0100              DCB      0x01,0x00
                  CheckHalfWord_InFlash
000070  0000              DCW      0x0000
                  NowLKClientSta
000072  00                DCB      0x00
                  LKClientOverSta
000073  00                DCB      0x00
                  LKMsgTim
                          %        8
                  LKClient_TransmitSta
00007c  00                DCB      0x00
                  LKClientMsgLen
00007d  00                DCB      0x00
                  LKClient_StopSta
00007e  0000              DCB      0x00,0x00
                  LKClient_StopTime
                          DCD      0x00000000
                  LKClient_StopTim
                          %        8
                  LKClient_StopTimes
00008c  00                DCB      0x00
                  LKClient_StartSta
00008d  000000            DCB      0x00,0x00,0x00
                  LKClient_StartTim
                          %        8
                  LKClient_StartTimes
000098  00                DCB      0x00
                  LKConUDP_Status
000099  00                DCB      0x00
                  LKCon_CmdNum
00009a  0000              DCB      0x00,0x00
                  LKCon_WaitTim
                          %        8
                  LKConUDP_Times
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
                  LoginTim
                          %        8
                  LogSta
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
                  IAPTim
                          %        8
                  IAPOver
0000bc  0000              DCB      0x00,0x00
                  SoftVer
0000be  0000              DCB      0x00,0x00
                  SoftWholeSpace
                          DCD      0x00000000
                  SoftPerPacSpace
0000c4  0000              DCB      0x00,0x00
                  RcvCheckByte
0000c6  0000              DCB      0x00,0x00
                  SoftPackageNum
0000c8  0000              DCB      0x00,0x00
                  ByteNum_InPac
0000ca  0000              DCB      0x00,0x00
                  NeedRcvPacNum
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
                  UpdateAddrress
                          DCD      0x00000000
                  CheckHalfWord_FromServer
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
                  ConfirmTim
                          %        8
                  ConfirmOK
0000e0  00                DCB      0x00
                  bConfirm
0000e1  000000            DCB      0x00,0x00,0x00
                  HeartTim
                          %        8
                  LogOutTim
                          %        8
                  LogOutOK
0000f4  00                DCB      0x00

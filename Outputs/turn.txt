; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\turn.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\turn.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP\GPS -I..\BSP\Sim900A -I..\BSP -I..\BSP\IWDG -I..\BSP\BlueTooth -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\BSP\Adxl345 -I..\BSP\TL718 -I..\BSP\PAM8403 -I..\BSP\W25X16 -I..\BSP\USB -I..\App\Debug -I..\App\SelfCheck -I..\App\GPSTask -I..\App\OBD -I..\App\Mems -I..\App\Voltage -I..\App\LKClient -I..\App\Paramlist -I..\App\ATC30 -I..\App -I..\BSP\mpu6050 -I..\App\mid-proc -I..\App\mpu6050Task -I..\BSP\dmp -I..\BSP\Bluetooth -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\turn.crf ..\App\mid-proc\turn.c]
                          THUMB

                          AREA ||i.Read_turnJudgeSta||, CODE, READONLY, ALIGN=2

                  Read_turnJudgeSta PROC
;;;25     
;;;26     uint8_t Read_turnJudgeSta(void)
000000  4801              LDR      r0,|L1.8|
;;;27     {
;;;28     	return turnJudgeSta;
000002  7800              LDRB     r0,[r0,#0]  ; turnJudgeSta
;;;29     }
000004  4770              BX       lr
;;;30     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      turnJudgeSta

                          AREA ||i.read_turnAlarm||, CODE, READONLY, ALIGN=2

                  read_turnAlarm PROC
;;;100    
;;;101    uint8_t read_turnAlarm(void)
000000  b508              PUSH     {r3,lr}
;;;102    {
;;;103    	ElemType tmp = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;104    	if( Empty_CyQueue(&turn_Alarm) ){
000006  4807              LDR      r0,|L2.36|
000008  f7fffffe          BL       Empty_CyQueue
00000c  b110              CBZ      r0,|L2.20|
;;;105    		tmp = 0;
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  e003              B        |L2.28|
                  |L2.20|
;;;106    	}else{
;;;107    		Out_CyQueue(&turn_Alarm, &tmp);
000014  4669              MOV      r1,sp
000016  4803              LDR      r0,|L2.36|
000018  f7fffffe          BL       Out_CyQueue
                  |L2.28|
;;;108    			             
;;;109    	}
;;;110    	return tmp;
00001c  f8bd0000          LDRH     r0,[sp,#0]
000020  b2c0              UXTB     r0,r0
;;;111    }
000022  bd08              POP      {r3,pc}
                          ENDP

                  |L2.36|
                          DCD      turn_Alarm

                          AREA ||i.turnStatus_Send||, CODE, READONLY, ALIGN=2

                  turnStatus_Send PROC
;;;87     
;;;88     void turnStatus_Send(void)
000000  b510              PUSH     {r4,lr}
;;;89     {
;;;90     	/** 判断转弯后40s内不再上报急转信息 **/
;;;91     	if( (turn_Status == left) || (turn_Status == right) ){
000002  480f              LDR      r0,|L3.64|
000004  7800              LDRB     r0,[r0,#0]  ; turn_Status
000006  2802              CMP      r0,#2
000008  d003              BEQ      |L3.18|
00000a  480d              LDR      r0,|L3.64|
00000c  7800              LDRB     r0,[r0,#0]  ; turn_Status
00000e  2801              CMP      r0,#1
000010  d114              BNE      |L3.60|
                  |L3.18|
;;;92     		if( (turnFlag == 1) || ( Timer_GetReached(&turnTim) == bTRUE ) ){
000012  480c              LDR      r0,|L3.68|
000014  7800              LDRB     r0,[r0,#0]  ; turnFlag
000016  2801              CMP      r0,#1
000018  d004              BEQ      |L3.36|
00001a  480b              LDR      r0,|L3.72|
00001c  f7fffffe          BL       Timer_GetReached
000020  2801              CMP      r0,#1
000022  d10b              BNE      |L3.60|
                  |L3.36|
;;;93     //			DebugUart_Putstr("\r>>-------turn Alarm--------\n");
;;;94     			In_CyQueue(&turn_Alarm, 1);
000024  2101              MOVS     r1,#1
000026  4809              LDR      r0,|L3.76|
000028  f7fffffe          BL       In_CyQueue
;;;95     			turnFlag = 0;
00002c  2000              MOVS     r0,#0
00002e  4905              LDR      r1,|L3.68|
000030  7008              STRB     r0,[r1,#0]
;;;96     			Timer_Set(&turnTim, 40000);
000032  f6494140          MOV      r1,#0x9c40
000036  4804              LDR      r0,|L3.72|
000038  f7fffffe          BL       Timer_Set
                  |L3.60|
;;;97     		}
;;;98     	}
;;;99     }
00003c  bd10              POP      {r4,pc}
;;;100    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      turn_Status
                  |L3.68|
                          DCD      turnFlag
                  |L3.72|
                          DCD      turnTim
                  |L3.76|
                          DCD      turn_Alarm

                          AREA ||i.turn_Analysis||, CODE, READONLY, ALIGN=2

                  turn_Analysis PROC
;;;41     
;;;42     void turn_Analysis(uint8_t freq, uint8_t delta)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;43     {
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
;;;44     	ElemType temp;
;;;45     	ElemType k,ks;
;;;46     	ElemType Yaw;
;;;47     
;;;48     	Yaw = Euler.Yaw; 
000008  4946              LDR      r1,|L4.292|
00000a  6888              LDR      r0,[r1,#8]  ; Euler
00000c  f7fffffe          BL       __aeabi_f2iz
000010  fa0ffb80          SXTH     r11,r0
;;;49     	ks = abs((int16_t)(MPU6050_GYRO_LAST.z / 16.4));
000014  4944              LDR      r1,|L4.296|
000016  f9b10004          LDRSH    r0,[r1,#4]  ; MPU6050_GYRO_LAST
00001a  f7fffffe          BL       __aeabi_i2d
00001e  f04f3266          MOV      r2,#0x66666666
000022  4b42              LDR      r3,|L4.300|
000024  e9cd0100          STRD     r0,r1,[sp,#0]
000028  f7fffffe          BL       __aeabi_ddiv
00002c  4607              MOV      r7,r0
00002e  f7fffffe          BL       __aeabi_d2iz
000032  fa0ffa80          SXTH     r10,r0
000036  f1ba0f00          CMP      r10,#0
00003a  db01              BLT      |L4.64|
00003c  4650              MOV      r0,r10
00003e  e001              B        |L4.68|
                  |L4.64|
000040  f1ca0000          RSB      r0,r10,#0
                  |L4.68|
000044  b206              SXTH     r6,r0
;;;50     
;;;51     	In_CyQueue(q,Yaw);	
000046  4659              MOV      r1,r11
000048  4839              LDR      r0,|L4.304|
00004a  6800              LDR      r0,[r0,#0]  ; q
00004c  f7fffffe          BL       In_CyQueue
;;;52     	length++;
000050  4838              LDR      r0,|L4.308|
000052  7800              LDRB     r0,[r0,#0]  ; length
000054  1c40              ADDS     r0,r0,#1
000056  4937              LDR      r1,|L4.308|
000058  7008              STRB     r0,[r1,#0]
;;;53     //	DebugUart_Putstr("\r>>----#####################\n");
;;;54     	if( Full_CyQueue(q) ){
00005a  4835              LDR      r0,|L4.304|
00005c  6800              LDR      r0,[r0,#0]  ; q
00005e  f7fffffe          BL       Full_CyQueue
000062  b120              CBZ      r0,|L4.110|
;;;55     		Out_CyQueue(q, &temp);
000064  a902              ADD      r1,sp,#8
000066  4832              LDR      r0,|L4.304|
000068  6800              LDR      r0,[r0,#0]  ; q
00006a  f7fffffe          BL       Out_CyQueue
                  |L4.110|
;;;56     	}
;;;57     	if( length == freq ){
00006e  4831              LDR      r0,|L4.308|
000070  7800              LDRB     r0,[r0,#0]  ; length
000072  4548              CMP      r0,r9
000074  d152              BNE      |L4.284|
;;;58     		length = 0;
000076  2000              MOVS     r0,#0
000078  492e              LDR      r1,|L4.308|
00007a  7008              STRB     r0,[r1,#0]
;;;59     		Out_CyQueue(q, &Yaw_this);
00007c  492e              LDR      r1,|L4.312|
00007e  482c              LDR      r0,|L4.304|
000080  6800              LDR      r0,[r0,#0]  ; q
000082  f7fffffe          BL       Out_CyQueue
;;;60     		if( isFist == 1 ){
000086  482d              LDR      r0,|L4.316|
000088  7800              LDRB     r0,[r0,#0]  ; isFist
00008a  2801              CMP      r0,#1
00008c  d107              BNE      |L4.158|
;;;61     			Yaw_last = Yaw_this;
00008e  482a              LDR      r0,|L4.312|
000090  f9b00000          LDRSH    r0,[r0,#0]  ; Yaw_this
000094  492a              LDR      r1,|L4.320|
000096  8008              STRH     r0,[r1,#0]
;;;62     			isFist = 0;
000098  2000              MOVS     r0,#0
00009a  4928              LDR      r1,|L4.316|
00009c  7008              STRB     r0,[r1,#0]
                  |L4.158|
;;;63     		}
;;;64     		k = Yaw_this - Yaw_last;
00009e  4826              LDR      r0,|L4.312|
0000a0  8800              LDRH     r0,[r0,#0]  ; Yaw_this
0000a2  4927              LDR      r1,|L4.320|
0000a4  8809              LDRH     r1,[r1,#0]  ; Yaw_last
0000a6  1a40              SUBS     r0,r0,r1
0000a8  b204              SXTH     r4,r0
;;;65     		if( (Yaw_this < 0) && (Yaw_last > 0) && (k < -180) ){
0000aa  4823              LDR      r0,|L4.312|
0000ac  f9b00000          LDRSH    r0,[r0,#0]  ; Yaw_this
0000b0  2800              CMP      r0,#0
0000b2  da0b              BGE      |L4.204|
0000b4  4822              LDR      r0,|L4.320|
0000b6  f9b00000          LDRSH    r0,[r0,#0]  ; Yaw_last
0000ba  2800              CMP      r0,#0
0000bc  dd06              BLE      |L4.204|
0000be  f1140fb4          CMN      r4,#0xb4
0000c2  da03              BGE      |L4.204|
;;;66     			k = 360 + k; 
0000c4  f50470b4          ADD      r0,r4,#0x168
0000c8  b204              SXTH     r4,r0
0000ca  e00e              B        |L4.234|
                  |L4.204|
;;;67     		}else if( (Yaw_this > 0) && (Yaw_last < 0) && (k > 180)){
0000cc  481a              LDR      r0,|L4.312|
0000ce  f9b00000          LDRSH    r0,[r0,#0]  ; Yaw_this
0000d2  2800              CMP      r0,#0
0000d4  dd09              BLE      |L4.234|
0000d6  481a              LDR      r0,|L4.320|
0000d8  f9b00000          LDRSH    r0,[r0,#0]  ; Yaw_last
0000dc  2800              CMP      r0,#0
0000de  da04              BGE      |L4.234|
0000e0  2cb4              CMP      r4,#0xb4
0000e2  dd02              BLE      |L4.234|
;;;68     			k = k - 360;
0000e4  f5a470b4          SUB      r0,r4,#0x168
0000e8  b204              SXTH     r4,r0
                  |L4.234|
;;;69     		}
;;;70     //		DebugUart_Putstr("\r**************\n");
;;;71     
;;;72     	if( (k > delta) && (ks > 2)  ){
0000ea  42ac              CMP      r4,r5
0000ec  dd05              BLE      |L4.250|
0000ee  2e02              CMP      r6,#2
0000f0  dd03              BLE      |L4.250|
;;;73     		turn_Status = left; 
0000f2  2002              MOVS     r0,#2
0000f4  4913              LDR      r1,|L4.324|
0000f6  7008              STRB     r0,[r1,#0]
0000f8  e00b              B        |L4.274|
                  |L4.250|
;;;74     		//DebugUart_Putstr("\r>>-------turn left!--------\n");
;;;75     	}else if( (k < -delta) && (ks > 2) ){
0000fa  4268              RSBS     r0,r5,#0
0000fc  4284              CMP      r4,r0
0000fe  da05              BGE      |L4.268|
000100  2e02              CMP      r6,#2
000102  dd03              BLE      |L4.268|
;;;76     		turn_Status = right;
000104  2001              MOVS     r0,#1
000106  490f              LDR      r1,|L4.324|
000108  7008              STRB     r0,[r1,#0]
00010a  e002              B        |L4.274|
                  |L4.268|
;;;77     	//DebugUart_Putstr("\r>>-------turn right!--------\n");
;;;78     	}else{ 
;;;79     		turn_Status = NONE;
00010c  2000              MOVS     r0,#0
00010e  490d              LDR      r1,|L4.324|
000110  7008              STRB     r0,[r1,#0]
                  |L4.274|
;;;80     	}
;;;81     
;;;82     		Yaw_last = Yaw_this;
000112  4809              LDR      r0,|L4.312|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; Yaw_this
000118  4909              LDR      r1,|L4.320|
00011a  8008              STRH     r0,[r1,#0]
                  |L4.284|
;;;83     	}
;;;84     
;;;85     	turnStatus_Send();
00011c  f7fffffe          BL       turnStatus_Send
;;;86     }
000120  e8bd8ffe          POP      {r1-r11,pc}
;;;87     
                          ENDP

                  |L4.292|
                          DCD      Euler
                  |L4.296|
                          DCD      MPU6050_GYRO_LAST
                  |L4.300|
                          DCD      0x40306666
                  |L4.304|
                          DCD      q
                  |L4.308|
                          DCD      length
                  |L4.312|
                          DCD      Yaw_this
                  |L4.316|
                          DCD      isFist
                  |L4.320|
                          DCD      Yaw_last
                  |L4.324|
                          DCD      turn_Status

                          AREA ||i.turn_Init||, CODE, READONLY, ALIGN=2

                  turn_Init PROC
;;;31     
;;;32     void turn_Init(void)
000000  b510              PUSH     {r4,lr}
;;;33     {
;;;34     	Init_CyQueue(q);
000002  4809              LDR      r0,|L5.40|
000004  6800              LDR      r0,[r0,#0]  ; q
000006  f7fffffe          BL       Init_CyQueue
;;;35     	turn_Status = NONE;
00000a  2000              MOVS     r0,#0
00000c  4907              LDR      r1,|L5.44|
00000e  7008              STRB     r0,[r1,#0]
;;;36     	turnFlag = 1;
000010  2001              MOVS     r0,#1
000012  4907              LDR      r1,|L5.48|
000014  7008              STRB     r0,[r1,#0]
;;;37     	turnJudgeSta = 0;
000016  2000              MOVS     r0,#0
000018  4906              LDR      r1,|L5.52|
00001a  7008              STRB     r0,[r1,#0]
;;;38     	Timer_Set(&turnTim, 30000);
00001c  f2475130          MOV      r1,#0x7530
000020  4805              LDR      r0,|L5.56|
000022  f7fffffe          BL       Timer_Set
;;;39     }
000026  bd10              POP      {r4,pc}
;;;40     
                          ENDP

                  |L5.40|
                          DCD      q
                  |L5.44|
                          DCD      turn_Status
                  |L5.48|
                          DCD      turnFlag
                  |L5.52|
                          DCD      turnJudgeSta
                  |L5.56|
                          DCD      turnTim

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  queue
                          %        12
                  turn_Alarm
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  gyro_orientation
000000  ff000000          DCB      0xff,0x00,0x00,0x00
000004  ff000000          DCB      0xff,0x00,0x00,0x00
000008  01                DCB      0x01
                  length
000009  00                DCB      0x00
                  isFist
00000a  01                DCB      0x01
                  turnJudgeSta
00000b  00                DCB      0x00
                  q
                          DCD      queue
                  Yaw_last
000010  0000              DCB      0x00,0x00
                  Yaw_this
000012  0000              DCB      0x00,0x00
                  turn_Status
000014  00                DCB      0x00
                  turnFlag
000015  000000            DCB      0x00,0x00,0x00
                  turnTim
                          %        8

; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\stm32f10x_iwdg.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\stm32f10x_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP -I..\BSP\IWDG -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\App\Debug -I..\App\SelfCheck -I..\App\Voltage -I..\App\ATC30 -I..\App -I..\BSP\uart -I..\App\Task -I..\App\Task -IH:\gitprojecct\xiangwei\Project\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\stm32f10x_iwdg.crf ..\Library\src\stm32f10x_iwdg.c]
                          THUMB

                          AREA ||i.IWDG_Enable||, CODE, READONLY, ALIGN=2

                  IWDG_Enable PROC
;;;146      */
;;;147    void IWDG_Enable(void)
000000  f64c40cc          MOV      r0,#0xcccc
;;;148    {
;;;149      IWDG->KR = KR_KEY_Enable;
000004  4901              LDR      r1,|L1.12|
000006  6008              STR      r0,[r1,#0]
;;;150    }
000008  4770              BX       lr
;;;151    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  IWDG_GetFlagStatus PROC
;;;159      */
;;;160    FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
000000  4601              MOV      r1,r0
;;;161    {
;;;162      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;163      /* Check the parameters */
;;;164      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;165      if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L2.20|
000006  68d2              LDR      r2,[r2,#0xc]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L2.16|
;;;166      {
;;;167        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L2.18|
                  |L2.16|
;;;168      }
;;;169      else
;;;170      {
;;;171        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L2.18|
;;;172      }
;;;173      /* Return the flag status */
;;;174      return bitstatus;
;;;175    }
000012  4770              BX       lr
;;;176    
                          ENDP

                  |L2.20|
                          DCD      0x40003000

                          AREA ||i.IWDG_ReloadCounter||, CODE, READONLY, ALIGN=2

                  IWDG_ReloadCounter PROC
;;;136      */
;;;137    void IWDG_ReloadCounter(void)
000000  f64a20aa          MOV      r0,#0xaaaa
;;;138    {
;;;139      IWDG->KR = KR_KEY_Reload;
000004  4901              LDR      r1,|L3.12|
000006  6008              STR      r0,[r1,#0]
;;;140    }
000008  4770              BX       lr
;;;141    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  IWDG_SetPrescaler PROC
;;;110      */
;;;111    void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
000000  4901              LDR      r1,|L4.8|
;;;112    {
;;;113      /* Check the parameters */
;;;114      assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;115      IWDG->PR = IWDG_Prescaler;
000002  6048              STR      r0,[r1,#4]
;;;116    }
000004  4770              BX       lr
;;;117    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetReload||, CODE, READONLY, ALIGN=2

                  IWDG_SetReload PROC
;;;123      */
;;;124    void IWDG_SetReload(uint16_t Reload)
000000  4901              LDR      r1,|L5.8|
;;;125    {
;;;126      /* Check the parameters */
;;;127      assert_param(IS_IWDG_RELOAD(Reload));
;;;128      IWDG->RLR = Reload;
000002  6088              STR      r0,[r1,#8]
;;;129    }
000004  4770              BX       lr
;;;130    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_WriteAccessCmd||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;90       */
;;;91     void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
000000  4901              LDR      r1,|L6.8|
;;;92     {
;;;93       /* Check the parameters */
;;;94       assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
;;;95       IWDG->KR = IWDG_WriteAccess;
000002  6008              STR      r0,[r1,#0]
;;;96     }
000004  4770              BX       lr
;;;97     
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40003000

; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\inv_mpu_dmp_motion_driver.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\inv_mpu_dmp_motion_driver.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP\GPS -I..\BSP\Sim900A -I..\BSP -I..\BSP\IWDG -I..\BSP\BlueTooth -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\BSP\Adxl345 -I..\BSP\TL718 -I..\BSP\PAM8403 -I..\BSP\W25X16 -I..\BSP\USB -I..\App\Debug -I..\App\SelfCheck -I..\App\GPSTask -I..\App\OBD -I..\App\Mems -I..\App\Voltage -I..\App\LKClient -I..\App\Paramlist -I..\App\ATC30 -I..\App -I..\BSP\mpu6050 -I..\App\mid-proc -I..\App\mpu6050Task -I..\BSP\dmp -I..\BSP\Bluetooth -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\inv_mpu_dmp_motion_driver.crf ..\BSP\dmp\inv_mpu_dmp_motion_driver.c]
                          THUMB

                          AREA ||i.decode_gesture||, CODE, READONLY, ALIGN=2

                  decode_gesture PROC
;;;1194    */
;;;1195   static int decode_gesture(unsigned char *gesture)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1196   {
000004  4604              MOV      r4,r0
;;;1197       unsigned char tap, android_orient;
;;;1198   
;;;1199       android_orient = gesture[3] & 0xC0;
000006  78e0              LDRB     r0,[r4,#3]
000008  f00006c0          AND      r6,r0,#0xc0
;;;1200       tap = 0x3F & gesture[3];
00000c  78e0              LDRB     r0,[r4,#3]
00000e  f000053f          AND      r5,r0,#0x3f
;;;1201   
;;;1202       if (gesture[1] & INT_SRC_TAP) {
000012  7860              LDRB     r0,[r4,#1]
000014  f0100f01          TST      r0,#1
000018  d013              BEQ      |L1.66|
;;;1203           unsigned char direction, count;
;;;1204           direction = tap >> 3;
00001a  10ef              ASRS     r7,r5,#3
;;;1205           count = (tap % 8) + 1;
00001c  4628              MOV      r0,r5
00001e  17e9              ASRS     r1,r5,#31
000020  eb057151          ADD      r1,r5,r1,LSR #29
000024  10c9              ASRS     r1,r1,#3
000026  eba501c1          SUB      r1,r5,r1,LSL #3
00002a  1c49              ADDS     r1,r1,#1
00002c  f00108ff          AND      r8,r1,#0xff
;;;1206           if (dmp.tap_cb)
000030  480b              LDR      r0,|L1.96|
000032  6800              LDR      r0,[r0,#0]  ; dmp
000034  b120              CBZ      r0,|L1.64|
;;;1207               dmp.tap_cb(direction, count);
000036  480a              LDR      r0,|L1.96|
000038  4641              MOV      r1,r8
00003a  6802              LDR      r2,[r0,#0]  ; dmp
00003c  4638              MOV      r0,r7
00003e  4790              BLX      r2
                  |L1.64|
;;;1208       }
000040  bf00              NOP      
                  |L1.66|
;;;1209   
;;;1210       if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
000042  7860              LDRB     r0,[r4,#1]
000044  f0100f08          TST      r0,#8
000048  d006              BEQ      |L1.88|
;;;1211           if (dmp.android_orient_cb)
00004a  4805              LDR      r0,|L1.96|
00004c  6840              LDR      r0,[r0,#4]  ; dmp
00004e  b118              CBZ      r0,|L1.88|
;;;1212               dmp.android_orient_cb(android_orient >> 6);
000050  11b0              ASRS     r0,r6,#6
000052  4a03              LDR      r2,|L1.96|
000054  6851              LDR      r1,[r2,#4]  ; dmp
000056  4788              BLX      r1
                  |L1.88|
;;;1213       }
;;;1214   
;;;1215       return 0;
000058  2000              MOVS     r0,#0
;;;1216   }
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;1217   
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      ||dmp||

                          AREA ||i.dmp_enable_6x_lp_quat||, CODE, READONLY, ALIGN=1

                  dmp_enable_6x_lp_quat PROC
;;;1173    */
;;;1174   int dmp_enable_6x_lp_quat(unsigned char enable)
000000  b538              PUSH     {r3-r5,lr}
;;;1175   {
000002  4604              MOV      r4,r0
;;;1176       unsigned char regs[4];
;;;1177       if (enable) {
000004  b164              CBZ      r4,|L2.32|
;;;1178           regs[0] = DINA20;
000006  2020              MOVS     r0,#0x20
000008  f88d0000          STRB     r0,[sp,#0]
;;;1179           regs[1] = DINA28;
00000c  2028              MOVS     r0,#0x28
00000e  f88d0001          STRB     r0,[sp,#1]
;;;1180           regs[2] = DINA30;
000012  2030              MOVS     r0,#0x30
000014  f88d0002          STRB     r0,[sp,#2]
;;;1181           regs[3] = DINA38;
000018  2038              MOVS     r0,#0x38
00001a  f88d0003          STRB     r0,[sp,#3]
00001e  e004              B        |L2.42|
                  |L2.32|
;;;1182       } else
;;;1183           memset(regs, 0xA3, 4);
000020  22a3              MOVS     r2,#0xa3
000022  2104              MOVS     r1,#4
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       __aeabi_memset
                  |L2.42|
;;;1184   
;;;1185       mpu_write_mem(CFG_8, 4, regs);
00002a  466a              MOV      r2,sp
00002c  2104              MOVS     r1,#4
00002e  f640209e          MOV      r0,#0xa9e
000032  f7fffffe          BL       mpu_write_mem
;;;1186   
;;;1187       return mpu_reset_fifo();
000036  f7fffffe          BL       mpu_reset_fifo
;;;1188   }
00003a  bd38              POP      {r3-r5,pc}
;;;1189   
                          ENDP


                          AREA ||i.dmp_enable_feature||, CODE, READONLY, ALIGN=2

                  dmp_enable_feature PROC
;;;994     */
;;;995    int dmp_enable_feature(unsigned short mask)
000000  b53e              PUSH     {r1-r5,lr}
;;;996    {
000002  4604              MOV      r4,r0
;;;997        unsigned char tmp[10];
;;;998    
;;;999        /* TODO: All of these settings can probably be integrated into the default
;;;1000        * DMP image.
;;;1001        */
;;;1002       /* Set integration scale factor. */
;;;1003       tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
000004  2002              MOVS     r0,#2
000006  f88d0000          STRB     r0,[sp,#0]
;;;1004       tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
00000a  20ca              MOVS     r0,#0xca
00000c  f88d0001          STRB     r0,[sp,#1]
;;;1005       tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
000010  20e3              MOVS     r0,#0xe3
000012  f88d0002          STRB     r0,[sp,#2]
;;;1006       tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
000016  2009              MOVS     r0,#9
000018  f88d0003          STRB     r0,[sp,#3]
;;;1007       mpu_write_mem(D_0_104, 4, tmp);
00001c  466a              MOV      r2,sp
00001e  2104              MOVS     r1,#4
000020  2068              MOVS     r0,#0x68
000022  f7fffffe          BL       mpu_write_mem
;;;1008   
;;;1009       /* Send sensor data to the FIFO. */
;;;1010       tmp[0] = 0xA3;
000026  20a3              MOVS     r0,#0xa3
000028  f88d0000          STRB     r0,[sp,#0]
;;;1011       if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
00002c  f0140f40          TST      r4,#0x40
000030  d009              BEQ      |L3.70|
;;;1012           tmp[1] = 0xC0;
000032  20c0              MOVS     r0,#0xc0
000034  f88d0001          STRB     r0,[sp,#1]
;;;1013           tmp[2] = 0xC8;
000038  20c8              MOVS     r0,#0xc8
00003a  f88d0002          STRB     r0,[sp,#2]
;;;1014           tmp[3] = 0xC2;
00003e  20c2              MOVS     r0,#0xc2
000040  f88d0003          STRB     r0,[sp,#3]
000044  e006              B        |L3.84|
                  |L3.70|
;;;1015       } else {
;;;1016           tmp[1] = 0xA3;
000046  20a3              MOVS     r0,#0xa3
000048  f88d0001          STRB     r0,[sp,#1]
;;;1017           tmp[2] = 0xA3;
00004c  f88d0002          STRB     r0,[sp,#2]
;;;1018           tmp[3] = 0xA3;
000050  f88d0003          STRB     r0,[sp,#3]
                  |L3.84|
;;;1019       }
;;;1020       if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
000054  f4147fc0          TST      r4,#0x180
000058  d009              BEQ      |L3.110|
;;;1021           tmp[4] = 0xC4;
00005a  20c4              MOVS     r0,#0xc4
00005c  f88d0004          STRB     r0,[sp,#4]
;;;1022           tmp[5] = 0xCC;
000060  20cc              MOVS     r0,#0xcc
000062  f88d0005          STRB     r0,[sp,#5]
;;;1023           tmp[6] = 0xC6;
000066  20c6              MOVS     r0,#0xc6
000068  f88d0006          STRB     r0,[sp,#6]
00006c  e006              B        |L3.124|
                  |L3.110|
;;;1024       } else {
;;;1025           tmp[4] = 0xA3;
00006e  20a3              MOVS     r0,#0xa3
000070  f88d0004          STRB     r0,[sp,#4]
;;;1026           tmp[5] = 0xA3;
000074  f88d0005          STRB     r0,[sp,#5]
;;;1027           tmp[6] = 0xA3;
000078  f88d0006          STRB     r0,[sp,#6]
                  |L3.124|
;;;1028       }
;;;1029       tmp[7] = 0xA3;
00007c  20a3              MOVS     r0,#0xa3
00007e  f88d0007          STRB     r0,[sp,#7]
;;;1030       tmp[8] = 0xA3;
000082  f88d0008          STRB     r0,[sp,#8]
;;;1031       tmp[9] = 0xA3;
000086  f88d0009          STRB     r0,[sp,#9]
;;;1032       mpu_write_mem(CFG_15,10,tmp);
00008a  466a              MOV      r2,sp
00008c  210a              MOVS     r1,#0xa
00008e  f64020a7          MOV      r0,#0xaa7
000092  f7fffffe          BL       mpu_write_mem
;;;1033   
;;;1034       /* Send gesture data to the FIFO. */
;;;1035       if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
000096  f0140f03          TST      r4,#3
00009a  d003              BEQ      |L3.164|
;;;1036           tmp[0] = DINA20;
00009c  2020              MOVS     r0,#0x20
00009e  f88d0000          STRB     r0,[sp,#0]
0000a2  e002              B        |L3.170|
                  |L3.164|
;;;1037       else
;;;1038           tmp[0] = 0xD8;
0000a4  20d8              MOVS     r0,#0xd8
0000a6  f88d0000          STRB     r0,[sp,#0]
                  |L3.170|
;;;1039       mpu_write_mem(CFG_27,1,tmp);
0000aa  466a              MOV      r2,sp
0000ac  2101              MOVS     r1,#1
0000ae  f64020b6          MOV      r0,#0xab6
0000b2  f7fffffe          BL       mpu_write_mem
;;;1040   
;;;1041       if (mask & DMP_FEATURE_GYRO_CAL)
0000b6  f0140f20          TST      r4,#0x20
0000ba  d003              BEQ      |L3.196|
;;;1042           dmp_enable_gyro_cal(1);
0000bc  2001              MOVS     r0,#1
0000be  f7fffffe          BL       dmp_enable_gyro_cal
0000c2  e002              B        |L3.202|
                  |L3.196|
;;;1043       else
;;;1044           dmp_enable_gyro_cal(0);
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       dmp_enable_gyro_cal
                  |L3.202|
;;;1045   
;;;1046       if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
0000ca  f4147fc0          TST      r4,#0x180
0000ce  d021              BEQ      |L3.276|
;;;1047           if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
0000d0  f4147f80          TST      r4,#0x100
0000d4  d00c              BEQ      |L3.240|
;;;1048               tmp[0] = 0xB2;
0000d6  20b2              MOVS     r0,#0xb2
0000d8  f88d0000          STRB     r0,[sp,#0]
;;;1049               tmp[1] = 0x8B;
0000dc  208b              MOVS     r0,#0x8b
0000de  f88d0001          STRB     r0,[sp,#1]
;;;1050               tmp[2] = 0xB6;
0000e2  20b6              MOVS     r0,#0xb6
0000e4  f88d0002          STRB     r0,[sp,#2]
;;;1051               tmp[3] = 0x9B;
0000e8  209b              MOVS     r0,#0x9b
0000ea  f88d0003          STRB     r0,[sp,#3]
0000ee  e00b              B        |L3.264|
                  |L3.240|
;;;1052           } else {
;;;1053               tmp[0] = DINAC0;
0000f0  20b0              MOVS     r0,#0xb0
0000f2  f88d0000          STRB     r0,[sp,#0]
;;;1054               tmp[1] = DINA80;
0000f6  2080              MOVS     r0,#0x80
0000f8  f88d0001          STRB     r0,[sp,#1]
;;;1055               tmp[2] = DINAC2;
0000fc  20b4              MOVS     r0,#0xb4
0000fe  f88d0002          STRB     r0,[sp,#2]
;;;1056               tmp[3] = DINA90;
000102  2090              MOVS     r0,#0x90
000104  f88d0003          STRB     r0,[sp,#3]
                  |L3.264|
;;;1057           }
;;;1058           mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
000108  466a              MOV      r2,sp
00010a  2104              MOVS     r1,#4
00010c  f64020a2          MOV      r0,#0xaa2
000110  f7fffffe          BL       mpu_write_mem
                  |L3.276|
;;;1059       }
;;;1060   
;;;1061       if (mask & DMP_FEATURE_TAP) {
000114  f0140f01          TST      r4,#1
000118  d024              BEQ      |L3.356|
;;;1062           /* Enable tap. */
;;;1063           tmp[0] = 0xF8;
00011a  20f8              MOVS     r0,#0xf8
00011c  f88d0000          STRB     r0,[sp,#0]
;;;1064           mpu_write_mem(CFG_20, 1, tmp);
000120  466a              MOV      r2,sp
000122  2101              MOVS     r1,#1
000124  f44f600b          MOV      r0,#0x8b0
000128  f7fffffe          BL       mpu_write_mem
;;;1065           dmp_set_tap_thresh(TAP_XYZ, 250);
00012c  21fa              MOVS     r1,#0xfa
00012e  2007              MOVS     r0,#7
000130  f7fffffe          BL       dmp_set_tap_thresh
;;;1066           dmp_set_tap_axes(TAP_XYZ);
000134  2007              MOVS     r0,#7
000136  f7fffffe          BL       dmp_set_tap_axes
;;;1067           dmp_set_tap_count(1);
00013a  2001              MOVS     r0,#1
00013c  f7fffffe          BL       dmp_set_tap_count
;;;1068           dmp_set_tap_time(100);
000140  2064              MOVS     r0,#0x64
000142  f7fffffe          BL       dmp_set_tap_time
;;;1069           dmp_set_tap_time_multi(500);
000146  f44f70fa          MOV      r0,#0x1f4
00014a  f7fffffe          BL       dmp_set_tap_time_multi
;;;1070   
;;;1071           dmp_set_shake_reject_thresh(GYRO_SF, 200);
00014e  21c8              MOVS     r1,#0xc8
000150  4830              LDR      r0,|L3.532|
000152  f7fffffe          BL       dmp_set_shake_reject_thresh
;;;1072           dmp_set_shake_reject_time(40);
000156  2028              MOVS     r0,#0x28
000158  f7fffffe          BL       dmp_set_shake_reject_time
;;;1073           dmp_set_shake_reject_timeout(10);
00015c  200a              MOVS     r0,#0xa
00015e  f7fffffe          BL       dmp_set_shake_reject_timeout
000162  e008              B        |L3.374|
                  |L3.356|
;;;1074       } else {
;;;1075           tmp[0] = 0xD8;
000164  20d8              MOVS     r0,#0xd8
000166  f88d0000          STRB     r0,[sp,#0]
;;;1076           mpu_write_mem(CFG_20, 1, tmp);
00016a  466a              MOV      r2,sp
00016c  2101              MOVS     r1,#1
00016e  f44f600b          MOV      r0,#0x8b0
000172  f7fffffe          BL       mpu_write_mem
                  |L3.374|
;;;1077       }
;;;1078   
;;;1079       if (mask & DMP_FEATURE_ANDROID_ORIENT) {
000176  f0140f02          TST      r4,#2
00017a  d003              BEQ      |L3.388|
;;;1080           tmp[0] = 0xD9;
00017c  20d9              MOVS     r0,#0xd9
00017e  f88d0000          STRB     r0,[sp,#0]
000182  e002              B        |L3.394|
                  |L3.388|
;;;1081       } else
;;;1082           tmp[0] = 0xD8;
000184  20d8              MOVS     r0,#0xd8
000186  f88d0000          STRB     r0,[sp,#0]
                  |L3.394|
;;;1083       mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
00018a  466a              MOV      r2,sp
00018c  2101              MOVS     r1,#1
00018e  f240703d          MOV      r0,#0x73d
000192  f7fffffe          BL       mpu_write_mem
;;;1084   
;;;1085       if (mask & DMP_FEATURE_LP_QUAT)
000196  f0140f04          TST      r4,#4
00019a  d003              BEQ      |L3.420|
;;;1086           dmp_enable_lp_quat(1);
00019c  2001              MOVS     r0,#1
00019e  f7fffffe          BL       dmp_enable_lp_quat
0001a2  e002              B        |L3.426|
                  |L3.420|
;;;1087       else
;;;1088           dmp_enable_lp_quat(0);
0001a4  2000              MOVS     r0,#0
0001a6  f7fffffe          BL       dmp_enable_lp_quat
                  |L3.426|
;;;1089   
;;;1090       if (mask & DMP_FEATURE_6X_LP_QUAT)
0001aa  f0140f10          TST      r4,#0x10
0001ae  d003              BEQ      |L3.440|
;;;1091           dmp_enable_6x_lp_quat(1);
0001b0  2001              MOVS     r0,#1
0001b2  f7fffffe          BL       dmp_enable_6x_lp_quat
0001b6  e002              B        |L3.446|
                  |L3.440|
;;;1092       else
;;;1093           dmp_enable_6x_lp_quat(0);
0001b8  2000              MOVS     r0,#0
0001ba  f7fffffe          BL       dmp_enable_6x_lp_quat
                  |L3.446|
;;;1094   
;;;1095       /* Pedometer is always enabled. */
;;;1096       dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
0001be  f0440008          ORR      r0,r4,#8
0001c2  4915              LDR      r1,|L3.536|
0001c4  8148              STRH     r0,[r1,#0xa]
;;;1097       mpu_reset_fifo();
0001c6  f7fffffe          BL       mpu_reset_fifo
;;;1098   
;;;1099       dmp.packet_length = 0;
0001ca  2000              MOVS     r0,#0
0001cc  4912              LDR      r1,|L3.536|
0001ce  7388              STRB     r0,[r1,#0xe]
;;;1100       if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
0001d0  f0140f40          TST      r4,#0x40
0001d4  d003              BEQ      |L3.478|
;;;1101           dmp.packet_length += 6;
0001d6  4608              MOV      r0,r1
0001d8  7b80              LDRB     r0,[r0,#0xe]  ; dmp
0001da  1d80              ADDS     r0,r0,#6
0001dc  7388              STRB     r0,[r1,#0xe]
                  |L3.478|
;;;1102       if (mask & DMP_FEATURE_SEND_ANY_GYRO)
0001de  f4147fc0          TST      r4,#0x180
0001e2  d004              BEQ      |L3.494|
;;;1103           dmp.packet_length += 6;
0001e4  480c              LDR      r0,|L3.536|
0001e6  7b80              LDRB     r0,[r0,#0xe]  ; dmp
0001e8  1d80              ADDS     r0,r0,#6
0001ea  490b              LDR      r1,|L3.536|
0001ec  7388              STRB     r0,[r1,#0xe]
                  |L3.494|
;;;1104       if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
0001ee  f0140f14          TST      r4,#0x14
0001f2  d004              BEQ      |L3.510|
;;;1105           dmp.packet_length += 16;
0001f4  4808              LDR      r0,|L3.536|
0001f6  7b80              LDRB     r0,[r0,#0xe]  ; dmp
0001f8  3010              ADDS     r0,r0,#0x10
0001fa  4907              LDR      r1,|L3.536|
0001fc  7388              STRB     r0,[r1,#0xe]
                  |L3.510|
;;;1106       if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
0001fe  f0140f03          TST      r4,#3
000202  d004              BEQ      |L3.526|
;;;1107           dmp.packet_length += 4;
000204  4804              LDR      r0,|L3.536|
000206  7b80              LDRB     r0,[r0,#0xe]  ; dmp
000208  1d00              ADDS     r0,r0,#4
00020a  4903              LDR      r1,|L3.536|
00020c  7388              STRB     r0,[r1,#0xe]
                  |L3.526|
;;;1108   
;;;1109       return 0;
00020e  2000              MOVS     r0,#0
;;;1110   }
000210  bd3e              POP      {r1-r5,pc}
;;;1111   
                          ENDP

000212  0000              DCW      0x0000
                  |L3.532|
                          DCD      0x02cae309
                  |L3.536|
                          DCD      ||dmp||

                          AREA ||i.dmp_enable_gyro_cal||, CODE, READONLY, ALIGN=2

                  dmp_enable_gyro_cal PROC
;;;1131    */
;;;1132   int dmp_enable_gyro_cal(unsigned char enable)
000000  b53e              PUSH     {r1-r5,lr}
;;;1133   {
000002  4604              MOV      r4,r0
;;;1134       if (enable) {
000004  b16c              CBZ      r4,|L4.34|
;;;1135           unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
000006  a10e              ADR      r1,|L4.64|
000008  e9d12000          LDRD     r2,r0,[r1,#0]
00000c  6889              LDR      r1,[r1,#8]
00000e  e9cd2000          STRD     r2,r0,[sp,#0]
000012  9102              STR      r1,[sp,#8]
;;;1136           return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
000014  466a              MOV      r2,sp
000016  2109              MOVS     r1,#9
000018  f44f6097          MOV      r0,#0x4b8
00001c  f7fffffe          BL       mpu_write_mem
                  |L4.32|
;;;1137       } else {
;;;1138           unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
;;;1139           return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
;;;1140       }
;;;1141   }
000020  bd3e              POP      {r1-r5,pc}
                  |L4.34|
000022  a20a              ADR      r2,|L4.76|
000024  e9d21000          LDRD     r1,r0,[r2,#0]         ;1138
000028  6892              LDR      r2,[r2,#8]            ;1138
00002a  e9cd0201          STRD     r0,r2,[sp,#4]         ;1138
00002e  9100              STR      r1,[sp,#0]            ;1138
000030  466a              MOV      r2,sp                 ;1139
000032  2109              MOVS     r1,#9                 ;1139
000034  f44f6097          MOV      r0,#0x4b8             ;1139
000038  f7fffffe          BL       mpu_write_mem
00003c  e7f0              B        |L4.32|
;;;1142   
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
000040  b8aab38d          DCB      184,170,179,141,180,152,"\r5]",0
000044  b4980d35
000048  5d00    
00004a  00                DCB      0
00004b  00                DCB      0
                  |L4.76|
00004c  b8aaaaaa          DCB      184,170,170,170,176,136,195,197,199,0
000050  b088c3c5
000054  c700    
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.dmp_enable_lp_quat||, CODE, READONLY, ALIGN=1

                  dmp_enable_lp_quat PROC
;;;1149    */
;;;1150   int dmp_enable_lp_quat(unsigned char enable)
000000  b538              PUSH     {r3-r5,lr}
;;;1151   {
000002  4604              MOV      r4,r0
;;;1152       unsigned char regs[4];
;;;1153       if (enable) {
000004  b164              CBZ      r4,|L5.32|
;;;1154           regs[0] = DINBC0;
000006  20c0              MOVS     r0,#0xc0
000008  f88d0000          STRB     r0,[sp,#0]
;;;1155           regs[1] = DINBC2;
00000c  20c2              MOVS     r0,#0xc2
00000e  f88d0001          STRB     r0,[sp,#1]
;;;1156           regs[2] = DINBC4;
000012  20c4              MOVS     r0,#0xc4
000014  f88d0002          STRB     r0,[sp,#2]
;;;1157           regs[3] = DINBC6;
000018  20c6              MOVS     r0,#0xc6
00001a  f88d0003          STRB     r0,[sp,#3]
00001e  e004              B        |L5.42|
                  |L5.32|
;;;1158       }
;;;1159       else
;;;1160           memset(regs, 0x8B, 4);
000020  228b              MOVS     r2,#0x8b
000022  2104              MOVS     r1,#4
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       __aeabi_memset
                  |L5.42|
;;;1161   
;;;1162       mpu_write_mem(CFG_LP_QUAT, 4, regs);
00002a  466a              MOV      r2,sp
00002c  2104              MOVS     r1,#4
00002e  f6402098          MOV      r0,#0xa98
000032  f7fffffe          BL       mpu_write_mem
;;;1163   
;;;1164       return mpu_reset_fifo();
000036  f7fffffe          BL       mpu_reset_fifo
;;;1165   }
00003a  bd38              POP      {r3-r5,pc}
;;;1166   
                          ENDP


                          AREA ||i.dmp_get_enabled_features||, CODE, READONLY, ALIGN=2

                  dmp_get_enabled_features PROC
;;;1116    */
;;;1117   int dmp_get_enabled_features(unsigned short *mask)
000000  4601              MOV      r1,r0
;;;1118   {
;;;1119       mask[0] = dmp.feature_mask;
000002  4802              LDR      r0,|L6.12|
000004  8940              LDRH     r0,[r0,#0xa]  ; dmp
000006  8008              STRH     r0,[r1,#0]
;;;1120       return 0;
000008  2000              MOVS     r0,#0
;;;1121   }
00000a  4770              BX       lr
;;;1122   
                          ENDP

                  |L6.12|
                          DCD      ||dmp||

                          AREA ||i.dmp_get_fifo_rate||, CODE, READONLY, ALIGN=2

                  dmp_get_fifo_rate PROC
;;;707     */
;;;708    int dmp_get_fifo_rate(unsigned short *rate)
000000  4601              MOV      r1,r0
;;;709    {
;;;710        rate[0] = dmp.fifo_rate;
000002  4802              LDR      r0,|L7.12|
000004  8980              LDRH     r0,[r0,#0xc]  ; dmp
000006  8008              STRH     r0,[r1,#0]
;;;711        return 0;
000008  2000              MOVS     r0,#0
;;;712    }
00000a  4770              BX       lr
;;;713    
                          ENDP

                  |L7.12|
                          DCD      ||dmp||

                          AREA ||i.dmp_get_pedometer_step_count||, CODE, READONLY, ALIGN=1

                  dmp_get_pedometer_step_count PROC
;;;907     */
;;;908    int dmp_get_pedometer_step_count(unsigned long *count)
000000  b538              PUSH     {r3-r5,lr}
;;;909    {
000002  4604              MOV      r4,r0
;;;910        unsigned char tmp[4];
;;;911        if (!count)
000004  b914              CBNZ     r4,|L8.12|
;;;912            return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
                  |L8.10|
;;;913    
;;;914        if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
;;;915            return -1;
;;;916    
;;;917        count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
;;;918            ((unsigned long)tmp[2] << 8) | tmp[3];
;;;919        return 0;
;;;920    }
00000a  bd38              POP      {r3-r5,pc}
                  |L8.12|
00000c  466a              MOV      r2,sp                 ;914
00000e  2104              MOVS     r1,#4                 ;914
000010  f44f7058          MOV      r0,#0x360             ;914
000014  f7fffffe          BL       mpu_read_mem
000018  b110              CBZ      r0,|L8.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;915
00001e  e7f4              B        |L8.10|
                  |L8.32|
000020  f89d0000          LDRB     r0,[sp,#0]            ;917
000024  0600              LSLS     r0,r0,#24             ;917
000026  f89d1001          LDRB     r1,[sp,#1]            ;917
00002a  ea404001          ORR      r0,r0,r1,LSL #16      ;917
00002e  f89d1002          LDRB     r1,[sp,#2]            ;917
000032  ea402001          ORR      r0,r0,r1,LSL #8       ;917
000036  f89d1003          LDRB     r1,[sp,#3]            ;917
00003a  4308              ORRS     r0,r0,r1              ;917
00003c  6020              STR      r0,[r4,#0]            ;917
00003e  2000              MOVS     r0,#0                 ;919
000040  e7e3              B        |L8.10|
;;;921    
                          ENDP


                          AREA ||i.dmp_get_pedometer_walk_time||, CODE, READONLY, ALIGN=1

                  dmp_get_pedometer_walk_time PROC
;;;944     */
;;;945    int dmp_get_pedometer_walk_time(unsigned long *time)
000000  b538              PUSH     {r3-r5,lr}
;;;946    {
000002  4604              MOV      r4,r0
;;;947        unsigned char tmp[4];
;;;948        if (!time)
000004  b914              CBNZ     r4,|L9.12|
;;;949            return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
                  |L9.10|
;;;950    
;;;951        if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
;;;952            return -1;
;;;953    
;;;954        time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
;;;955            ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
;;;956        return 0;
;;;957    }
00000a  bd38              POP      {r3-r5,pc}
                  |L9.12|
00000c  466a              MOV      r2,sp                 ;951
00000e  2104              MOVS     r1,#4                 ;951
000010  f44f7071          MOV      r0,#0x3c4             ;951
000014  f7fffffe          BL       mpu_read_mem
000018  b110              CBZ      r0,|L9.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;952
00001e  e7f4              B        |L9.10|
                  |L9.32|
000020  f89d0000          LDRB     r0,[sp,#0]            ;954
000024  0600              LSLS     r0,r0,#24             ;954
000026  f89d1001          LDRB     r1,[sp,#1]            ;954
00002a  ea404001          ORR      r0,r0,r1,LSL #16      ;954
00002e  f89d1002          LDRB     r1,[sp,#2]            ;954
000032  ea402001          ORR      r0,r0,r1,LSL #8       ;954
000036  f89d1003          LDRB     r1,[sp,#3]            ;954
00003a  4308              ORRS     r0,r0,r1              ;954
00003c  eb000080          ADD      r0,r0,r0,LSL #2       ;954
000040  0080              LSLS     r0,r0,#2              ;954
000042  6020              STR      r0,[r4,#0]            ;954
000044  2000              MOVS     r0,#0                 ;956
000046  e7e0              B        |L9.10|
;;;958    
                          ENDP


                          AREA ||i.dmp_load_motion_driver_firmware||, CODE, READONLY, ALIGN=2

                  dmp_load_motion_driver_firmware PROC
;;;509     */
;;;510    int dmp_load_motion_driver_firmware(void)
000000  b510              PUSH     {r4,lr}
;;;511    {
;;;512        return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
000002  23c8              MOVS     r3,#0xc8
000004  f44f6280          MOV      r2,#0x400
000008  4902              LDR      r1,|L10.20|
00000a  f64030f6          MOV      r0,#0xbf6
00000e  f7fffffe          BL       mpu_load_firmware
;;;513            DMP_SAMPLE_RATE);
;;;514    }
000012  bd10              POP      {r4,pc}
;;;515    
                          ENDP

                  |L10.20|
                          DCD      dmp_memory

                          AREA ||i.dmp_read_fifo||, CODE, READONLY, ALIGN=2

                  dmp_read_fifo PROC
;;;1265    */
;;;1266   int dmp_read_fifo(short *gyro, short *accel, long *quat,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1267       unsigned long *timestamp, short *sensors, unsigned char *more)
;;;1268   {
000004  b08d              SUB      sp,sp,#0x34
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4615              MOV      r5,r2
00000c  469b              MOV      r11,r3
00000e  e9dd6a16          LDRD     r6,r10,[sp,#0x58]
;;;1269       unsigned char fifo_data[MAX_PACKET_LENGTH];
;;;1270       unsigned char ii = 0;
000012  2400              MOVS     r4,#0
;;;1271   
;;;1272       /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
;;;1273        * cache this value and save some cycles.
;;;1274        */
;;;1275       sensors[0] = 0;
000014  2000              MOVS     r0,#0
000016  8030              STRH     r0,[r6,#0]
;;;1276   
;;;1277       /* Get a packet. */
;;;1278       if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
000018  4969              LDR      r1,|L11.448|
00001a  7b88              LDRB     r0,[r1,#0xe]  ; dmp
00001c  4652              MOV      r2,r10
00001e  a905              ADD      r1,sp,#0x14
000020  f7fffffe          BL       mpu_read_fifo_stream
000024  b118              CBZ      r0,|L11.46|
;;;1279           return -1;
000026  1e60              SUBS     r0,r4,#1
                  |L11.40|
;;;1280   
;;;1281       /* Parse DMP packet. */
;;;1282       if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
;;;1283   #ifdef FIFO_CORRUPTION_CHECK
;;;1284           long quat_q14[4], quat_mag_sq;
;;;1285   #endif
;;;1286           quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
;;;1287               ((long)fifo_data[2] << 8) | fifo_data[3];
;;;1288           quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
;;;1289               ((long)fifo_data[6] << 8) | fifo_data[7];
;;;1290           quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
;;;1291               ((long)fifo_data[10] << 8) | fifo_data[11];
;;;1292           quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
;;;1293               ((long)fifo_data[14] << 8) | fifo_data[15];
;;;1294           ii += 16;
;;;1295   #ifdef FIFO_CORRUPTION_CHECK
;;;1296           /* We can detect a corrupted FIFO by monitoring the quaternion data and
;;;1297            * ensuring that the magnitude is always normalized to one. This
;;;1298            * shouldn't happen in normal operation, but if an I2C error occurs,
;;;1299            * the FIFO reads might become misaligned.
;;;1300            *
;;;1301            * Let's start by scaling down the quaternion data to avoid long long
;;;1302            * math.
;;;1303            */
;;;1304           quat_q14[0] = quat[0] >> 16;
;;;1305           quat_q14[1] = quat[1] >> 16;
;;;1306           quat_q14[2] = quat[2] >> 16;
;;;1307           quat_q14[3] = quat[3] >> 16;
;;;1308           quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
;;;1309               quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
;;;1310           if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
;;;1311               (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
;;;1312               /* Quaternion is outside of the acceptable threshold. */
;;;1313               mpu_reset_fifo();
;;;1314               sensors[0] = 0;
;;;1315               return -1;
;;;1316           }
;;;1317           sensors[0] |= INV_WXYZ_QUAT;
;;;1318   #endif
;;;1319       }
;;;1320   
;;;1321       if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
;;;1322           accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
;;;1323           accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
;;;1324           accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
;;;1325           ii += 6;
;;;1326           sensors[0] |= INV_XYZ_ACCEL;
;;;1327       }
;;;1328   
;;;1329       if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
;;;1330           gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
;;;1331           gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
;;;1332           gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
;;;1333           ii += 6;
;;;1334           sensors[0] |= INV_XYZ_GYRO;
;;;1335       }
;;;1336   
;;;1337       /* Gesture data is at the end of the DMP packet. Parse it and call
;;;1338        * the gesture callbacks (if registered).
;;;1339        */
;;;1340       if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
;;;1341           decode_gesture(fifo_data + ii);
;;;1342   
;;;1343   //    get_ms(timestamp);
;;;1344       return 0;
;;;1345   }
000028  b00d              ADD      sp,sp,#0x34
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.46|
00002e  4864              LDR      r0,|L11.448|
000030  7a80              LDRB     r0,[r0,#0xa]          ;1282  ; dmp
000032  f0100f14          TST      r0,#0x14              ;1282
000036  d067              BEQ      |L11.264|
000038  f89d0014          LDRB     r0,[sp,#0x14]         ;1286
00003c  0600              LSLS     r0,r0,#24             ;1286
00003e  f89d1015          LDRB     r1,[sp,#0x15]         ;1286
000042  ea404001          ORR      r0,r0,r1,LSL #16      ;1286
000046  f89d1016          LDRB     r1,[sp,#0x16]         ;1286
00004a  ea402001          ORR      r0,r0,r1,LSL #8       ;1286
00004e  f89d1017          LDRB     r1,[sp,#0x17]         ;1286
000052  4308              ORRS     r0,r0,r1              ;1286
000054  6028              STR      r0,[r5,#0]            ;1286
000056  f89d0018          LDRB     r0,[sp,#0x18]         ;1288
00005a  0600              LSLS     r0,r0,#24             ;1288
00005c  f89d1019          LDRB     r1,[sp,#0x19]         ;1288
000060  ea404001          ORR      r0,r0,r1,LSL #16      ;1288
000064  f89d101a          LDRB     r1,[sp,#0x1a]         ;1288
000068  ea402001          ORR      r0,r0,r1,LSL #8       ;1288
00006c  f89d101b          LDRB     r1,[sp,#0x1b]         ;1288
000070  4308              ORRS     r0,r0,r1              ;1288
000072  6068              STR      r0,[r5,#4]            ;1288
000074  f89d001c          LDRB     r0,[sp,#0x1c]         ;1290
000078  0600              LSLS     r0,r0,#24             ;1290
00007a  f89d101d          LDRB     r1,[sp,#0x1d]         ;1290
00007e  ea404001          ORR      r0,r0,r1,LSL #16      ;1290
000082  f89d101e          LDRB     r1,[sp,#0x1e]         ;1290
000086  ea402001          ORR      r0,r0,r1,LSL #8       ;1290
00008a  f89d101f          LDRB     r1,[sp,#0x1f]         ;1290
00008e  4308              ORRS     r0,r0,r1              ;1290
000090  60a8              STR      r0,[r5,#8]            ;1290
000092  f89d0020          LDRB     r0,[sp,#0x20]         ;1292
000096  0600              LSLS     r0,r0,#24             ;1292
000098  f89d1021          LDRB     r1,[sp,#0x21]         ;1292
00009c  ea404001          ORR      r0,r0,r1,LSL #16      ;1292
0000a0  f89d1022          LDRB     r1,[sp,#0x22]         ;1292
0000a4  ea402001          ORR      r0,r0,r1,LSL #8       ;1292
0000a8  f89d1023          LDRB     r1,[sp,#0x23]         ;1292
0000ac  4308              ORRS     r0,r0,r1              ;1292
0000ae  60e8              STR      r0,[r5,#0xc]          ;1292
0000b0  f1040010          ADD      r0,r4,#0x10           ;1294
0000b4  b2c4              UXTB     r4,r0                 ;1294
0000b6  6828              LDR      r0,[r5,#0]            ;1304
0000b8  1400              ASRS     r0,r0,#16             ;1304
0000ba  9001              STR      r0,[sp,#4]            ;1304
0000bc  6868              LDR      r0,[r5,#4]            ;1305
0000be  1400              ASRS     r0,r0,#16             ;1305
0000c0  9002              STR      r0,[sp,#8]            ;1305
0000c2  68a8              LDR      r0,[r5,#8]            ;1306
0000c4  1400              ASRS     r0,r0,#16             ;1306
0000c6  9003              STR      r0,[sp,#0xc]          ;1306
0000c8  68e8              LDR      r0,[r5,#0xc]          ;1307
0000ca  1400              ASRS     r0,r0,#16             ;1307
0000cc  9004              STR      r0,[sp,#0x10]         ;1307
0000ce  9801              LDR      r0,[sp,#4]            ;1308
0000d0  4340              MULS     r0,r0,r0              ;1308
0000d2  9902              LDR      r1,[sp,#8]            ;1308
0000d4  fb010001          MLA      r0,r1,r1,r0           ;1308
0000d8  9903              LDR      r1,[sp,#0xc]          ;1308
0000da  fb010001          MLA      r0,r1,r1,r0           ;1308
0000de  9904              LDR      r1,[sp,#0x10]         ;1308
0000e0  fb010901          MLA      r9,r1,r1,r0           ;1308
0000e4  f1b96f70          CMP      r9,#0xf000000         ;1310
0000e8  db02              BLT      |L11.240|
0000ea  f1b95f88          CMP      r9,#0x11000000        ;1311
0000ee  dd05              BLE      |L11.252|
                  |L11.240|
0000f0  f7fffffe          BL       mpu_reset_fifo
0000f4  2000              MOVS     r0,#0                 ;1314
0000f6  8030              STRH     r0,[r6,#0]            ;1314
0000f8  1e40              SUBS     r0,r0,#1              ;1315
0000fa  e795              B        |L11.40|
                  |L11.252|
0000fc  f9b60000          LDRSH    r0,[r6,#0]            ;1317
000100  f4407080          ORR      r0,r0,#0x100          ;1317
000104  8030              STRH     r0,[r6,#0]            ;1317
000106  bf00              NOP                            ;1319
                  |L11.264|
000108  482d              LDR      r0,|L11.448|
00010a  7a80              LDRB     r0,[r0,#0xa]          ;1321  ; dmp
00010c  f0100f40          TST      r0,#0x40              ;1321
000110  d024              BEQ      |L11.348|
000112  a905              ADD      r1,sp,#0x14           ;1322
000114  1c60              ADDS     r0,r4,#1              ;1322
000116  5c08              LDRB     r0,[r1,r0]            ;1322
000118  5d09              LDRB     r1,[r1,r4]            ;1322
00011a  ea402001          ORR      r0,r0,r1,LSL #8       ;1322
00011e  b200              SXTH     r0,r0                 ;1322
000120  f8a80000          STRH     r0,[r8,#0]            ;1322
000124  a905              ADD      r1,sp,#0x14           ;1323
000126  1ce0              ADDS     r0,r4,#3              ;1323
000128  5c09              LDRB     r1,[r1,r0]            ;1323
00012a  aa05              ADD      r2,sp,#0x14           ;1323
00012c  1ca0              ADDS     r0,r4,#2              ;1323
00012e  5c10              LDRB     r0,[r2,r0]            ;1323
000130  ea412000          ORR      r0,r1,r0,LSL #8       ;1323
000134  b200              SXTH     r0,r0                 ;1323
000136  f8a80002          STRH     r0,[r8,#2]            ;1323
00013a  a905              ADD      r1,sp,#0x14           ;1324
00013c  1d60              ADDS     r0,r4,#5              ;1324
00013e  5c09              LDRB     r1,[r1,r0]            ;1324
000140  1d20              ADDS     r0,r4,#4              ;1324
000142  5c10              LDRB     r0,[r2,r0]            ;1324
000144  ea412000          ORR      r0,r1,r0,LSL #8       ;1324
000148  b200              SXTH     r0,r0                 ;1324
00014a  f8a80004          STRH     r0,[r8,#4]            ;1324
00014e  1da0              ADDS     r0,r4,#6              ;1325
000150  b2c4              UXTB     r4,r0                 ;1325
000152  f9b60000          LDRSH    r0,[r6,#0]            ;1326
000156  f0400008          ORR      r0,r0,#8              ;1326
00015a  8030              STRH     r0,[r6,#0]            ;1326
                  |L11.348|
00015c  4818              LDR      r0,|L11.448|
00015e  8940              LDRH     r0,[r0,#0xa]          ;1329  ; dmp
000160  f4107fc0          TST      r0,#0x180             ;1329
000164  d021              BEQ      |L11.426|
000166  a905              ADD      r1,sp,#0x14           ;1330
000168  1c60              ADDS     r0,r4,#1              ;1330
00016a  5c08              LDRB     r0,[r1,r0]            ;1330
00016c  5d09              LDRB     r1,[r1,r4]            ;1330
00016e  ea402001          ORR      r0,r0,r1,LSL #8       ;1330
000172  b200              SXTH     r0,r0                 ;1330
000174  8038              STRH     r0,[r7,#0]            ;1330
000176  a905              ADD      r1,sp,#0x14           ;1331
000178  1ce0              ADDS     r0,r4,#3              ;1331
00017a  5c09              LDRB     r1,[r1,r0]            ;1331
00017c  aa05              ADD      r2,sp,#0x14           ;1331
00017e  1ca0              ADDS     r0,r4,#2              ;1331
000180  5c10              LDRB     r0,[r2,r0]            ;1331
000182  ea412000          ORR      r0,r1,r0,LSL #8       ;1331
000186  b200              SXTH     r0,r0                 ;1331
000188  8078              STRH     r0,[r7,#2]            ;1331
00018a  a905              ADD      r1,sp,#0x14           ;1332
00018c  1d60              ADDS     r0,r4,#5              ;1332
00018e  5c09              LDRB     r1,[r1,r0]            ;1332
000190  1d20              ADDS     r0,r4,#4              ;1332
000192  5c10              LDRB     r0,[r2,r0]            ;1332
000194  ea412000          ORR      r0,r1,r0,LSL #8       ;1332
000198  b200              SXTH     r0,r0                 ;1332
00019a  80b8              STRH     r0,[r7,#4]            ;1332
00019c  1da0              ADDS     r0,r4,#6              ;1333
00019e  b2c4              UXTB     r4,r0                 ;1333
0001a0  f9b60000          LDRSH    r0,[r6,#0]            ;1334
0001a4  f0400070          ORR      r0,r0,#0x70           ;1334
0001a8  8030              STRH     r0,[r6,#0]            ;1334
                  |L11.426|
0001aa  4805              LDR      r0,|L11.448|
0001ac  7a80              LDRB     r0,[r0,#0xa]          ;1340  ; dmp
0001ae  f0100f03          TST      r0,#3                 ;1340
0001b2  d003              BEQ      |L11.444|
0001b4  a905              ADD      r1,sp,#0x14           ;1341
0001b6  1908              ADDS     r0,r1,r4              ;1341
0001b8  f7fffffe          BL       decode_gesture
                  |L11.444|
0001bc  2000              MOVS     r0,#0                 ;1344
0001be  e733              B        |L11.40|
;;;1346   
                          ENDP

                  |L11.448|
                          DCD      ||dmp||

                          AREA ||i.dmp_register_android_orient_cb||, CODE, READONLY, ALIGN=2

                  dmp_register_android_orient_cb PROC
;;;1369    */
;;;1370   int dmp_register_android_orient_cb(void (*func)(unsigned char))
000000  4601              MOV      r1,r0
;;;1371   {
;;;1372       dmp.android_orient_cb = func;
000002  4802              LDR      r0,|L12.12|
000004  6041              STR      r1,[r0,#4]  ; dmp
;;;1373       return 0;
000006  2000              MOVS     r0,#0
;;;1374   }
000008  4770              BX       lr
;;;1375   
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      ||dmp||

                          AREA ||i.dmp_register_tap_cb||, CODE, READONLY, ALIGN=2

                  dmp_register_tap_cb PROC
;;;1358    */
;;;1359   int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
000000  4601              MOV      r1,r0
;;;1360   {
;;;1361       dmp.tap_cb = func;
000002  4802              LDR      r0,|L13.12|
000004  6001              STR      r1,[r0,#0]  ; dmp
;;;1362       return 0;
000006  2000              MOVS     r0,#0
;;;1363   }
000008  4770              BX       lr
;;;1364   
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      ||dmp||

                          AREA ||i.dmp_set_accel_bias||, CODE, READONLY, ALIGN=2

                  dmp_set_accel_bias PROC
;;;629     */
;;;630    int dmp_set_accel_bias(long *bias)
000000  b570              PUSH     {r4-r6,lr}
;;;631    {
000002  b088              SUB      sp,sp,#0x20
000004  4606              MOV      r6,r0
;;;632        long accel_bias_body[3];
;;;633        unsigned char regs[12];
;;;634        long long accel_sf;
;;;635        unsigned short accel_sens;
;;;636    
;;;637        mpu_get_accel_sens(&accel_sens);
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       mpu_get_accel_sens
;;;638        accel_sf = (long long)accel_sens << 15;
00000c  f8bd0004          LDRH     r0,[sp,#4]
000010  2100              MOVS     r1,#0
000012  03c9              LSLS     r1,r1,#15
000014  ea414550          ORR      r5,r1,r0,LSR #17
000018  03c4              LSLS     r4,r0,#15
;;;639        //__no_operation();
;;;640    
;;;641        accel_bias_body[0] = bias[dmp.orient & 3];
00001a  4844              LDR      r0,|L14.300|
00001c  7a00              LDRB     r0,[r0,#8]  ; dmp
00001e  f0000003          AND      r0,r0,#3
000022  f8560020          LDR      r0,[r6,r0,LSL #2]
000026  9005              STR      r0,[sp,#0x14]
;;;642        if (dmp.orient & 4)
000028  4840              LDR      r0,|L14.300|
00002a  7a00              LDRB     r0,[r0,#8]  ; dmp
00002c  f0100f04          TST      r0,#4
000030  d002              BEQ      |L14.56|
;;;643            accel_bias_body[0] *= -1;
000032  9805              LDR      r0,[sp,#0x14]
000034  4240              RSBS     r0,r0,#0
000036  9005              STR      r0,[sp,#0x14]
                  |L14.56|
;;;644        accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
000038  483c              LDR      r0,|L14.300|
00003a  7a00              LDRB     r0,[r0,#8]  ; dmp
00003c  f3c000c1          UBFX     r0,r0,#3,#2
000040  f8560020          LDR      r0,[r6,r0,LSL #2]
000044  9006              STR      r0,[sp,#0x18]
;;;645        if (dmp.orient & 0x20)
000046  4839              LDR      r0,|L14.300|
000048  7a00              LDRB     r0,[r0,#8]  ; dmp
00004a  f0100f20          TST      r0,#0x20
00004e  d002              BEQ      |L14.86|
;;;646            accel_bias_body[1] *= -1;
000050  9806              LDR      r0,[sp,#0x18]
000052  4240              RSBS     r0,r0,#0
000054  9006              STR      r0,[sp,#0x18]
                  |L14.86|
;;;647        accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
000056  4835              LDR      r0,|L14.300|
000058  7a00              LDRB     r0,[r0,#8]  ; dmp
00005a  f3c01081          UBFX     r0,r0,#6,#2
00005e  f8560020          LDR      r0,[r6,r0,LSL #2]
000062  9007              STR      r0,[sp,#0x1c]
;;;648        if (dmp.orient & 0x100)
000064  4831              LDR      r0,|L14.300|
000066  8900              LDRH     r0,[r0,#8]  ; dmp
000068  f4107f80          TST      r0,#0x100
00006c  d002              BEQ      |L14.116|
;;;649            accel_bias_body[2] *= -1;
00006e  9807              LDR      r0,[sp,#0x1c]
000070  4240              RSBS     r0,r0,#0
000072  9007              STR      r0,[sp,#0x1c]
                  |L14.116|
;;;650    
;;;651    #ifdef EMPL_NO_64BIT
;;;652        accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
;;;653        accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
;;;654        accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
;;;655    #else
;;;656        accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
000074  9805              LDR      r0,[sp,#0x14]
000076  17c1              ASRS     r1,r0,#31
000078  fba02304          UMULL    r2,r3,r0,r4
00007c  fb013104          MLA      r1,r1,r4,r3
000080  fb001005          MLA      r0,r0,r5,r1
000084  0081              LSLS     r1,r0,#2
000086  ea417092          ORR      r0,r1,r2,LSR #30
00008a  9005              STR      r0,[sp,#0x14]
;;;657        accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
00008c  9806              LDR      r0,[sp,#0x18]
00008e  17c1              ASRS     r1,r0,#31
000090  fba02304          UMULL    r2,r3,r0,r4
000094  fb013104          MLA      r1,r1,r4,r3
000098  fb001005          MLA      r0,r0,r5,r1
00009c  0081              LSLS     r1,r0,#2
00009e  ea417092          ORR      r0,r1,r2,LSR #30
0000a2  9006              STR      r0,[sp,#0x18]
;;;658        accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
0000a4  9807              LDR      r0,[sp,#0x1c]
0000a6  17c1              ASRS     r1,r0,#31
0000a8  fba02304          UMULL    r2,r3,r0,r4
0000ac  fb013104          MLA      r1,r1,r4,r3
0000b0  fb001005          MLA      r0,r0,r5,r1
0000b4  0081              LSLS     r1,r0,#2
0000b6  ea417092          ORR      r0,r1,r2,LSR #30
0000ba  9007              STR      r0,[sp,#0x1c]
;;;659    #endif
;;;660    
;;;661        regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
0000bc  9805              LDR      r0,[sp,#0x14]
0000be  0e00              LSRS     r0,r0,#24
0000c0  f88d0008          STRB     r0,[sp,#8]
;;;662        regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
0000c4  9805              LDR      r0,[sp,#0x14]
0000c6  0c00              LSRS     r0,r0,#16
0000c8  f88d0009          STRB     r0,[sp,#9]
;;;663        regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
0000cc  9805              LDR      r0,[sp,#0x14]
0000ce  0a00              LSRS     r0,r0,#8
0000d0  f88d000a          STRB     r0,[sp,#0xa]
;;;664        regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
0000d4  9805              LDR      r0,[sp,#0x14]
0000d6  b2c0              UXTB     r0,r0
0000d8  f88d000b          STRB     r0,[sp,#0xb]
;;;665        regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
0000dc  9806              LDR      r0,[sp,#0x18]
0000de  0e00              LSRS     r0,r0,#24
0000e0  f88d000c          STRB     r0,[sp,#0xc]
;;;666        regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
0000e4  9806              LDR      r0,[sp,#0x18]
0000e6  0c00              LSRS     r0,r0,#16
0000e8  f88d000d          STRB     r0,[sp,#0xd]
;;;667        regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
0000ec  9806              LDR      r0,[sp,#0x18]
0000ee  0a00              LSRS     r0,r0,#8
0000f0  f88d000e          STRB     r0,[sp,#0xe]
;;;668        regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
0000f4  9806              LDR      r0,[sp,#0x18]
0000f6  b2c0              UXTB     r0,r0
0000f8  f88d000f          STRB     r0,[sp,#0xf]
;;;669        regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
0000fc  9807              LDR      r0,[sp,#0x1c]
0000fe  0e00              LSRS     r0,r0,#24
000100  f88d0010          STRB     r0,[sp,#0x10]
;;;670        regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
000104  9807              LDR      r0,[sp,#0x1c]
000106  0c00              LSRS     r0,r0,#16
000108  f88d0011          STRB     r0,[sp,#0x11]
;;;671        regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
00010c  9807              LDR      r0,[sp,#0x1c]
00010e  0a00              LSRS     r0,r0,#8
000110  f88d0012          STRB     r0,[sp,#0x12]
;;;672        regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
000114  9807              LDR      r0,[sp,#0x1c]
000116  b2c0              UXTB     r0,r0
000118  f88d0013          STRB     r0,[sp,#0x13]
;;;673        return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
00011c  aa02              ADD      r2,sp,#8
00011e  210c              MOVS     r1,#0xc
000120  f44f7025          MOV      r0,#0x294
000124  f7fffffe          BL       mpu_write_mem
;;;674    }
000128  b008              ADD      sp,sp,#0x20
00012a  bd70              POP      {r4-r6,pc}
;;;675    
                          ENDP

                  |L14.300|
                          DCD      ||dmp||

                          AREA ||i.dmp_set_fifo_rate||, CODE, READONLY, ALIGN=2

                  dmp_set_fifo_rate PROC
;;;681     */
;;;682    int dmp_set_fifo_rate(unsigned short rate)
000000  b530              PUSH     {r4,r5,lr}
;;;683    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;684        const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
000006  a216              ADR      r2,|L15.96|
000008  ca07              LDM      r2,{r0-r2}
00000a  ab02              ADD      r3,sp,#8
00000c  c307              STM      r3!,{r0-r2}
;;;685            0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
;;;686        unsigned short div;
;;;687        unsigned char tmp[8];
;;;688    
;;;689        if (rate > DMP_SAMPLE_RATE)
00000e  2cc8              CMP      r4,#0xc8
000010  dd03              BLE      |L15.26|
;;;690            return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L15.22|
;;;691        div = DMP_SAMPLE_RATE / rate - 1;
;;;692        tmp[0] = (unsigned char)((div >> 8) & 0xFF);
;;;693        tmp[1] = (unsigned char)(div & 0xFF);
;;;694        if (mpu_write_mem(D_0_22, 2, tmp))
;;;695            return -1;
;;;696        if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
;;;697            return -1;
;;;698    
;;;699        dmp.fifo_rate = rate;
;;;700        return 0;
;;;701    }
000016  b005              ADD      sp,sp,#0x14
000018  bd30              POP      {r4,r5,pc}
                  |L15.26|
00001a  20c8              MOVS     r0,#0xc8              ;691
00001c  fb90f0f4          SDIV     r0,r0,r4              ;691
000020  1e40              SUBS     r0,r0,#1              ;691
000022  b285              UXTH     r5,r0                 ;691
000024  0a28              LSRS     r0,r5,#8              ;692
000026  f88d0000          STRB     r0,[sp,#0]            ;692
00002a  b2e8              UXTB     r0,r5                 ;693
00002c  f88d0001          STRB     r0,[sp,#1]            ;693
000030  466a              MOV      r2,sp                 ;694
000032  2102              MOVS     r1,#2                 ;694
000034  f2402016          MOV      r0,#0x216             ;694
000038  f7fffffe          BL       mpu_write_mem
00003c  b110              CBZ      r0,|L15.68|
00003e  f04f30ff          MOV      r0,#0xffffffff        ;695
000042  e7e8              B        |L15.22|
                  |L15.68|
000044  aa02              ADD      r2,sp,#8              ;696
000046  210c              MOVS     r1,#0xc               ;696
000048  f64020c1          MOV      r0,#0xac1             ;696
00004c  f7fffffe          BL       mpu_write_mem
000050  b110              CBZ      r0,|L15.88|
000052  f04f30ff          MOV      r0,#0xffffffff        ;697
000056  e7de              B        |L15.22|
                  |L15.88|
000058  4804              LDR      r0,|L15.108|
00005a  8184              STRH     r4,[r0,#0xc]          ;699
00005c  2000              MOVS     r0,#0                 ;700
00005e  e7da              B        |L15.22|
;;;702    
                          ENDP

                  |L15.96|
000060  fef2abc4          DCB      254,242,171,196,170,241,223,223,187,175,223,223
000064  aaf1dfdf
000068  bbafdfdf
                  |L15.108|
                          DCD      ||dmp||

                          AREA ||i.dmp_set_gyro_bias||, CODE, READONLY, ALIGN=2

                  dmp_set_gyro_bias PROC
;;;577     */
;;;578    int dmp_set_gyro_bias(long *bias)
000000  b51f              PUSH     {r0-r4,lr}
;;;579    {
000002  4604              MOV      r4,r0
;;;580        long gyro_bias_body[3];
;;;581        unsigned char regs[4];
;;;582    
;;;583        gyro_bias_body[0] = bias[dmp.orient & 3];
000004  4848              LDR      r0,|L16.296|
000006  7a00              LDRB     r0,[r0,#8]  ; dmp
000008  f0000003          AND      r0,r0,#3
00000c  f8540020          LDR      r0,[r4,r0,LSL #2]
000010  9001              STR      r0,[sp,#4]
;;;584        if (dmp.orient & 4)
000012  4845              LDR      r0,|L16.296|
000014  7a00              LDRB     r0,[r0,#8]  ; dmp
000016  f0100f04          TST      r0,#4
00001a  d002              BEQ      |L16.34|
;;;585            gyro_bias_body[0] *= -1;
00001c  9801              LDR      r0,[sp,#4]
00001e  4240              RSBS     r0,r0,#0
000020  9001              STR      r0,[sp,#4]
                  |L16.34|
;;;586        gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
000022  4841              LDR      r0,|L16.296|
000024  7a00              LDRB     r0,[r0,#8]  ; dmp
000026  f3c000c1          UBFX     r0,r0,#3,#2
00002a  f8540020          LDR      r0,[r4,r0,LSL #2]
00002e  9002              STR      r0,[sp,#8]
;;;587        if (dmp.orient & 0x20)
000030  483d              LDR      r0,|L16.296|
000032  7a00              LDRB     r0,[r0,#8]  ; dmp
000034  f0100f20          TST      r0,#0x20
000038  d002              BEQ      |L16.64|
;;;588            gyro_bias_body[1] *= -1;
00003a  9802              LDR      r0,[sp,#8]
00003c  4240              RSBS     r0,r0,#0
00003e  9002              STR      r0,[sp,#8]
                  |L16.64|
;;;589        gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
000040  4839              LDR      r0,|L16.296|
000042  7a00              LDRB     r0,[r0,#8]  ; dmp
000044  f3c01081          UBFX     r0,r0,#6,#2
000048  f8540020          LDR      r0,[r4,r0,LSL #2]
00004c  9003              STR      r0,[sp,#0xc]
;;;590        if (dmp.orient & 0x100)
00004e  4836              LDR      r0,|L16.296|
000050  8900              LDRH     r0,[r0,#8]  ; dmp
000052  f4107f80          TST      r0,#0x100
000056  d002              BEQ      |L16.94|
;;;591            gyro_bias_body[2] *= -1;
000058  9803              LDR      r0,[sp,#0xc]
00005a  4240              RSBS     r0,r0,#0
00005c  9003              STR      r0,[sp,#0xc]
                  |L16.94|
;;;592    
;;;593    #ifdef EMPL_NO_64BIT
;;;594        gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
;;;595        gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
;;;596        gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
;;;597    #else
;;;598        gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
00005e  4933              LDR      r1,|L16.300|
000060  9801              LDR      r0,[sp,#4]
000062  fb800101          SMULL    r0,r1,r0,r1
000066  0f80              LSRS     r0,r0,#30
000068  ea400081          ORR      r0,r0,r1,LSL #2
00006c  9001              STR      r0,[sp,#4]
;;;599        gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
00006e  492f              LDR      r1,|L16.300|
000070  9802              LDR      r0,[sp,#8]
000072  fb801001          SMULL    r1,r0,r0,r1
000076  0082              LSLS     r2,r0,#2
000078  ea427091          ORR      r0,r2,r1,LSR #30
00007c  9002              STR      r0,[sp,#8]
;;;600        gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
00007e  492b              LDR      r1,|L16.300|
000080  9803              LDR      r0,[sp,#0xc]
000082  fb801001          SMULL    r1,r0,r0,r1
000086  0082              LSLS     r2,r0,#2
000088  ea427091          ORR      r0,r2,r1,LSR #30
00008c  9003              STR      r0,[sp,#0xc]
;;;601    #endif
;;;602    
;;;603        regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
00008e  9801              LDR      r0,[sp,#4]
000090  0e00              LSRS     r0,r0,#24
000092  f88d0000          STRB     r0,[sp,#0]
;;;604        regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
000096  9801              LDR      r0,[sp,#4]
000098  0c00              LSRS     r0,r0,#16
00009a  f88d0001          STRB     r0,[sp,#1]
;;;605        regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
00009e  9801              LDR      r0,[sp,#4]
0000a0  0a00              LSRS     r0,r0,#8
0000a2  f88d0002          STRB     r0,[sp,#2]
;;;606        regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
0000a6  9801              LDR      r0,[sp,#4]
0000a8  b2c0              UXTB     r0,r0
0000aa  f88d0003          STRB     r0,[sp,#3]
;;;607        if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
0000ae  466a              MOV      r2,sp
0000b0  2104              MOVS     r1,#4
0000b2  f44f7074          MOV      r0,#0x3d0
0000b6  f7fffffe          BL       mpu_write_mem
0000ba  b118              CBZ      r0,|L16.196|
;;;608            return -1;
0000bc  f04f30ff          MOV      r0,#0xffffffff
                  |L16.192|
;;;609    
;;;610        regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
;;;611        regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
;;;612        regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
;;;613        regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
;;;614        if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
;;;615            return -1;
;;;616    
;;;617        regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
;;;618        regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
;;;619        regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
;;;620        regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
;;;621        return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
;;;622    }
0000c0  b004              ADD      sp,sp,#0x10
0000c2  bd10              POP      {r4,pc}
                  |L16.196|
0000c4  9802              LDR      r0,[sp,#8]            ;610
0000c6  0e00              LSRS     r0,r0,#24             ;610
0000c8  f88d0000          STRB     r0,[sp,#0]            ;610
0000cc  9802              LDR      r0,[sp,#8]            ;611
0000ce  0c00              LSRS     r0,r0,#16             ;611
0000d0  f88d0001          STRB     r0,[sp,#1]            ;611
0000d4  9802              LDR      r0,[sp,#8]            ;612
0000d6  0a00              LSRS     r0,r0,#8              ;612
0000d8  f88d0002          STRB     r0,[sp,#2]            ;612
0000dc  9802              LDR      r0,[sp,#8]            ;613
0000de  b2c0              UXTB     r0,r0                 ;613
0000e0  f88d0003          STRB     r0,[sp,#3]            ;613
0000e4  466a              MOV      r2,sp                 ;614
0000e6  2104              MOVS     r1,#4                 ;614
0000e8  f44f7075          MOV      r0,#0x3d4             ;614
0000ec  f7fffffe          BL       mpu_write_mem
0000f0  b110              CBZ      r0,|L16.248|
0000f2  f04f30ff          MOV      r0,#0xffffffff        ;615
0000f6  e7e3              B        |L16.192|
                  |L16.248|
0000f8  9803              LDR      r0,[sp,#0xc]          ;617
0000fa  0e00              LSRS     r0,r0,#24             ;617
0000fc  f88d0000          STRB     r0,[sp,#0]            ;617
000100  9803              LDR      r0,[sp,#0xc]          ;618
000102  0c00              LSRS     r0,r0,#16             ;618
000104  f88d0001          STRB     r0,[sp,#1]            ;618
000108  9803              LDR      r0,[sp,#0xc]          ;619
00010a  0a00              LSRS     r0,r0,#8              ;619
00010c  f88d0002          STRB     r0,[sp,#2]            ;619
000110  9803              LDR      r0,[sp,#0xc]          ;620
000112  b2c0              UXTB     r0,r0                 ;620
000114  f88d0003          STRB     r0,[sp,#3]            ;620
000118  466a              MOV      r2,sp                 ;621
00011a  2104              MOVS     r1,#4                 ;621
00011c  f44f7076          MOV      r0,#0x3d8             ;621
000120  f7fffffe          BL       mpu_write_mem
000124  e7cc              B        |L16.192|
;;;623    
                          ENDP

000126  0000              DCW      0x0000
                  |L16.296|
                          DCD      ||dmp||
                  |L16.300|
                          DCD      0x02cae309

                          AREA ||i.dmp_set_interrupt_mode||, CODE, READONLY, ALIGN=2

                  dmp_set_interrupt_mode PROC
;;;1226    */
;;;1227   int dmp_set_interrupt_mode(unsigned char mode)
000000  b510              PUSH     {r4,lr}
;;;1228   {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;1229       const unsigned char regs_continuous[11] =
000006  a20f              ADR      r2,|L17.68|
000008  ca07              LDM      r2,{r0-r2}
00000a  ab03              ADD      r3,sp,#0xc
00000c  c307              STM      r3!,{r0-r2}
;;;1230           {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
;;;1231       const unsigned char regs_gesture[11] =
00000e  a210              ADR      r2,|L17.80|
000010  ca07              LDM      r2,{r0-r2}
000012  e88d0007          STM      sp,{r0-r2}
;;;1232           {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
;;;1233   
;;;1234       switch (mode) {
000016  2c01              CMP      r4,#1
000018  d009              BEQ      |L17.46|
00001a  2c02              CMP      r4,#2
00001c  d10e              BNE      |L17.60|
;;;1235       case DMP_INT_CONTINUOUS:
;;;1236           return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
00001e  aa03              ADD      r2,sp,#0xc
000020  210b              MOVS     r1,#0xb
000022  f6402082          MOV      r0,#0xa82
000026  f7fffffe          BL       mpu_write_mem
                  |L17.42|
;;;1237               (unsigned char*)regs_continuous);
;;;1238       case DMP_INT_GESTURE:
;;;1239           return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
;;;1240               (unsigned char*)regs_gesture);
;;;1241       default:
;;;1242           return -1;
;;;1243       }
;;;1244   }
00002a  b006              ADD      sp,sp,#0x18
00002c  bd10              POP      {r4,pc}
                  |L17.46|
00002e  466a              MOV      r2,sp                 ;1239
000030  210b              MOVS     r1,#0xb               ;1239
000032  f6402082          MOV      r0,#0xa82             ;1239
000036  f7fffffe          BL       mpu_write_mem
00003a  e7f6              B        |L17.42|
                  |L17.60|
00003c  f04f30ff          MOV      r0,#0xffffffff        ;1242
000040  e7f3              B        |L17.42|
;;;1245   
                          ENDP

000042  0000              DCW      0x0000
                  |L17.68|
000044  d8b1b9f3          DCB      216,177,185,243,139,163,145,182,"\t",180,217,0
000048  8ba391b6
00004c  09b4d900
                  |L17.80|
000050  dab1b9f3          DCB      218,177,185,243,139,163,145,182,218,180,218,0
000054  8ba391b6
000058  dab4da00

                          AREA ||i.dmp_set_orientation||, CODE, READONLY, ALIGN=2

                  dmp_set_orientation PROC
;;;522     */
;;;523    int dmp_set_orientation(unsigned short orient)
000000  b510              PUSH     {r4,lr}
;;;524    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;525        unsigned char gyro_regs[3], accel_regs[3];
;;;526        const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
000006  a047              ADR      r0,|L18.292|
000008  6800              LDR      r0,[r0,#0]
00000a  9003              STR      r0,[sp,#0xc]
;;;527        const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
00000c  a046              ADR      r0,|L18.296|
00000e  6800              LDR      r0,[r0,#0]
000010  9002              STR      r0,[sp,#8]
;;;528        const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
000012  a046              ADR      r0,|L18.300|
000014  6800              LDR      r0,[r0,#0]
000016  9001              STR      r0,[sp,#4]
;;;529        const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
000018  a045              ADR      r0,|L18.304|
00001a  6800              LDR      r0,[r0,#0]
00001c  9000              STR      r0,[sp,#0]
;;;530    
;;;531        gyro_regs[0] = gyro_axes[orient & 3];
00001e  f0040003          AND      r0,r4,#3
000022  a903              ADD      r1,sp,#0xc
000024  5c08              LDRB     r0,[r1,r0]
000026  f88d0014          STRB     r0,[sp,#0x14]
;;;532        gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
00002a  a803              ADD      r0,sp,#0xc
00002c  f3c401c1          UBFX     r1,r4,#3,#2
000030  5c40              LDRB     r0,[r0,r1]
000032  f88d0015          STRB     r0,[sp,#0x15]
;;;533        gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
000036  a803              ADD      r0,sp,#0xc
000038  f3c41181          UBFX     r1,r4,#6,#2
00003c  5c40              LDRB     r0,[r0,r1]
00003e  f88d0016          STRB     r0,[sp,#0x16]
;;;534        accel_regs[0] = accel_axes[orient & 3];
000042  f0040003          AND      r0,r4,#3
000046  a902              ADD      r1,sp,#8
000048  5c08              LDRB     r0,[r1,r0]
00004a  f88d0010          STRB     r0,[sp,#0x10]
;;;535        accel_regs[1] = accel_axes[(orient >> 3) & 3];
00004e  a802              ADD      r0,sp,#8
000050  f3c401c1          UBFX     r1,r4,#3,#2
000054  5c40              LDRB     r0,[r0,r1]
000056  f88d0011          STRB     r0,[sp,#0x11]
;;;536        accel_regs[2] = accel_axes[(orient >> 6) & 3];
00005a  a802              ADD      r0,sp,#8
00005c  f3c41181          UBFX     r1,r4,#6,#2
000060  5c40              LDRB     r0,[r0,r1]
000062  f88d0012          STRB     r0,[sp,#0x12]
;;;537    
;;;538        /* Chip-to-body, axes only. */
;;;539        if (mpu_write_mem(FCFG_1, 3, gyro_regs))
000066  aa05              ADD      r2,sp,#0x14
000068  2103              MOVS     r1,#3
00006a  f2404026          MOV      r0,#0x426
00006e  f7fffffe          BL       mpu_write_mem
000072  b118              CBZ      r0,|L18.124|
;;;540            return -1;
000074  f04f30ff          MOV      r0,#0xffffffff
                  |L18.120|
;;;541        if (mpu_write_mem(FCFG_2, 3, accel_regs))
;;;542            return -1;
;;;543    
;;;544        memcpy(gyro_regs, gyro_sign, 3);
;;;545        memcpy(accel_regs, accel_sign, 3);
;;;546        if (orient & 4) {
;;;547            gyro_regs[0] |= 1;
;;;548            accel_regs[0] |= 1;
;;;549        }
;;;550        if (orient & 0x20) {
;;;551            gyro_regs[1] |= 1;
;;;552            accel_regs[1] |= 1;
;;;553        }
;;;554        if (orient & 0x100) {
;;;555            gyro_regs[2] |= 1;
;;;556            accel_regs[2] |= 1;
;;;557        }
;;;558    
;;;559        /* Chip-to-body, sign only. */
;;;560        if (mpu_write_mem(FCFG_3, 3, gyro_regs))
;;;561            return -1;
;;;562        if (mpu_write_mem(FCFG_7, 3, accel_regs))
;;;563            return -1;
;;;564        dmp.orient = orient;
;;;565        return 0;
;;;566    }
000078  b006              ADD      sp,sp,#0x18
00007a  bd10              POP      {r4,pc}
                  |L18.124|
00007c  aa04              ADD      r2,sp,#0x10           ;541
00007e  2103              MOVS     r1,#3                 ;541
000080  f240402a          MOV      r0,#0x42a             ;541
000084  f7fffffe          BL       mpu_write_mem
000088  b110              CBZ      r0,|L18.144|
00008a  f04f30ff          MOV      r0,#0xffffffff        ;542
00008e  e7f3              B        |L18.120|
                  |L18.144|
000090  9801              LDR      r0,[sp,#4]            ;544
000092  9005              STR      r0,[sp,#0x14]         ;544
000094  9800              LDR      r0,[sp,#0]            ;545
000096  9004              STR      r0,[sp,#0x10]         ;545
000098  f0140f04          TST      r4,#4                 ;546
00009c  d00b              BEQ      |L18.182|
00009e  f89d0014          LDRB     r0,[sp,#0x14]         ;547
0000a2  f0400001          ORR      r0,r0,#1              ;547
0000a6  f88d0014          STRB     r0,[sp,#0x14]         ;547
0000aa  f89d0010          LDRB     r0,[sp,#0x10]         ;548
0000ae  f0400001          ORR      r0,r0,#1              ;548
0000b2  f88d0010          STRB     r0,[sp,#0x10]         ;548
                  |L18.182|
0000b6  f0140f20          TST      r4,#0x20              ;550
0000ba  d00b              BEQ      |L18.212|
0000bc  f89d0015          LDRB     r0,[sp,#0x15]         ;551
0000c0  f0400001          ORR      r0,r0,#1              ;551
0000c4  f88d0015          STRB     r0,[sp,#0x15]         ;551
0000c8  f89d0011          LDRB     r0,[sp,#0x11]         ;552
0000cc  f0400001          ORR      r0,r0,#1              ;552
0000d0  f88d0011          STRB     r0,[sp,#0x11]         ;552
                  |L18.212|
0000d4  f4147f80          TST      r4,#0x100             ;554
0000d8  d00b              BEQ      |L18.242|
0000da  f89d0016          LDRB     r0,[sp,#0x16]         ;555
0000de  f0400001          ORR      r0,r0,#1              ;555
0000e2  f88d0016          STRB     r0,[sp,#0x16]         ;555
0000e6  f89d0012          LDRB     r0,[sp,#0x12]         ;556
0000ea  f0400001          ORR      r0,r0,#1              ;556
0000ee  f88d0012          STRB     r0,[sp,#0x12]         ;556
                  |L18.242|
0000f2  aa05              ADD      r2,sp,#0x14           ;560
0000f4  2103              MOVS     r1,#3                 ;560
0000f6  f44f6088          MOV      r0,#0x440             ;560
0000fa  f7fffffe          BL       mpu_write_mem
0000fe  b110              CBZ      r0,|L18.262|
000100  f04f30ff          MOV      r0,#0xffffffff        ;561
000104  e7b8              B        |L18.120|
                  |L18.262|
000106  aa04              ADD      r2,sp,#0x10           ;562
000108  2103              MOVS     r1,#3                 ;562
00010a  f2404031          MOV      r0,#0x431             ;562
00010e  f7fffffe          BL       mpu_write_mem
000112  b110              CBZ      r0,|L18.282|
000114  f04f30ff          MOV      r0,#0xffffffff        ;563
000118  e7ae              B        |L18.120|
                  |L18.282|
00011a  4806              LDR      r0,|L18.308|
00011c  8104              STRH     r4,[r0,#8]            ;564
00011e  2000              MOVS     r0,#0                 ;565
000120  e7aa              B        |L18.120|
;;;567    
                          ENDP

000122  0000              DCW      0x0000
                  |L18.292|
000124  4ccd6c00          DCB      "L",205,"l",0
                  |L18.296|
000128  0cc92c00          DCB      "\f",201,",",0
                  |L18.300|
00012c  36567600          DCB      "6Vv",0
                  |L18.304|
000130  26466600          DCB      "&Ff",0
                  |L18.308|
                          DCD      ||dmp||

                          AREA ||i.dmp_set_pedometer_step_count||, CODE, READONLY, ALIGN=1

                  dmp_set_pedometer_step_count PROC
;;;928     */
;;;929    int dmp_set_pedometer_step_count(unsigned long count)
000000  b538              PUSH     {r3-r5,lr}
;;;930    {
000002  4604              MOV      r4,r0
;;;931        unsigned char tmp[4];
;;;932    
;;;933        tmp[0] = (unsigned char)((count >> 24) & 0xFF);
000004  0e20              LSRS     r0,r4,#24
000006  f88d0000          STRB     r0,[sp,#0]
;;;934        tmp[1] = (unsigned char)((count >> 16) & 0xFF);
00000a  0c20              LSRS     r0,r4,#16
00000c  f88d0001          STRB     r0,[sp,#1]
;;;935        tmp[2] = (unsigned char)((count >> 8) & 0xFF);
000010  0a20              LSRS     r0,r4,#8
000012  f88d0002          STRB     r0,[sp,#2]
;;;936        tmp[3] = (unsigned char)(count & 0xFF);
000016  b2e0              UXTB     r0,r4
000018  f88d0003          STRB     r0,[sp,#3]
;;;937        return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
00001c  466a              MOV      r2,sp
00001e  2104              MOVS     r1,#4
000020  f44f7058          MOV      r0,#0x360
000024  f7fffffe          BL       mpu_write_mem
;;;938    }
000028  bd38              POP      {r3-r5,pc}
;;;939    
                          ENDP


                          AREA ||i.dmp_set_pedometer_walk_time||, CODE, READONLY, ALIGN=1

                  dmp_set_pedometer_walk_time PROC
;;;964     */
;;;965    int dmp_set_pedometer_walk_time(unsigned long time)
000000  b538              PUSH     {r3-r5,lr}
;;;966    {
000002  4604              MOV      r4,r0
;;;967        unsigned char tmp[4];
;;;968    
;;;969        time /= 20;
000004  2014              MOVS     r0,#0x14
000006  fbb4f4f0          UDIV     r4,r4,r0
;;;970    
;;;971        tmp[0] = (unsigned char)((time >> 24) & 0xFF);
00000a  0e20              LSRS     r0,r4,#24
00000c  f88d0000          STRB     r0,[sp,#0]
;;;972        tmp[1] = (unsigned char)((time >> 16) & 0xFF);
000010  0c20              LSRS     r0,r4,#16
000012  f88d0001          STRB     r0,[sp,#1]
;;;973        tmp[2] = (unsigned char)((time >> 8) & 0xFF);
000016  0a20              LSRS     r0,r4,#8
000018  f88d0002          STRB     r0,[sp,#2]
;;;974        tmp[3] = (unsigned char)(time & 0xFF);
00001c  b2e0              UXTB     r0,r4
00001e  f88d0003          STRB     r0,[sp,#3]
;;;975        return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
000022  466a              MOV      r2,sp
000024  2104              MOVS     r1,#4
000026  f44f7071          MOV      r0,#0x3c4
00002a  f7fffffe          BL       mpu_write_mem
;;;976    }
00002e  bd38              POP      {r3-r5,pc}
;;;977    
                          ENDP


                          AREA ||i.dmp_set_shake_reject_thresh||, CODE, READONLY, ALIGN=1

                  dmp_set_shake_reject_thresh PROC
;;;855     */
;;;856    int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
000000  b5f8              PUSH     {r3-r7,lr}
;;;857    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;858        unsigned char tmp[4];
;;;859        long thresh_scaled = sf / 1000 * thresh;
000006  f44f707a          MOV      r0,#0x3e8
00000a  fb95f0f0          SDIV     r0,r5,r0
00000e  fb00f406          MUL      r4,r0,r6
;;;860        tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
000012  0e20              LSRS     r0,r4,#24
000014  f88d0000          STRB     r0,[sp,#0]
;;;861        tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
000018  0c20              LSRS     r0,r4,#16
00001a  f88d0001          STRB     r0,[sp,#1]
;;;862        tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
00001e  0a20              LSRS     r0,r4,#8
000020  f88d0002          STRB     r0,[sp,#2]
;;;863        tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
000024  b2e0              UXTB     r0,r4
000026  f88d0003          STRB     r0,[sp,#3]
;;;864        return mpu_write_mem(D_1_92, 4, tmp);
00002a  466a              MOV      r2,sp
00002c  2104              MOVS     r1,#4
00002e  f44f70ae          MOV      r0,#0x15c
000032  f7fffffe          BL       mpu_write_mem
;;;865    }
000036  bdf8              POP      {r3-r7,pc}
;;;866    
                          ENDP


                          AREA ||i.dmp_set_shake_reject_time||, CODE, READONLY, ALIGN=1

                  dmp_set_shake_reject_time PROC
;;;874     */
;;;875    int dmp_set_shake_reject_time(unsigned short time)
000000  b538              PUSH     {r3-r5,lr}
;;;876    {
000002  4604              MOV      r4,r0
;;;877        unsigned char tmp[2];
;;;878    
;;;879        time /= (1000 / DMP_SAMPLE_RATE);
000004  2005              MOVS     r0,#5
000006  fb94f0f0          SDIV     r0,r4,r0
00000a  b284              UXTH     r4,r0
;;;880        tmp[0] = time >> 8;
00000c  1220              ASRS     r0,r4,#8
00000e  f88d0000          STRB     r0,[sp,#0]
;;;881        tmp[1] = time & 0xFF;
000012  b2e0              UXTB     r0,r4
000014  f88d0001          STRB     r0,[sp,#1]
;;;882        return mpu_write_mem(D_1_90,2,tmp);
000018  466a              MOV      r2,sp
00001a  2102              MOVS     r1,#2
00001c  f44f70ad          MOV      r0,#0x15a
000020  f7fffffe          BL       mpu_write_mem
;;;883    }
000024  bd38              POP      {r3-r5,pc}
;;;884    
                          ENDP


                          AREA ||i.dmp_set_shake_reject_timeout||, CODE, READONLY, ALIGN=1

                  dmp_set_shake_reject_timeout PROC
;;;892     */
;;;893    int dmp_set_shake_reject_timeout(unsigned short time)
000000  b538              PUSH     {r3-r5,lr}
;;;894    {
000002  4604              MOV      r4,r0
;;;895        unsigned char tmp[2];
;;;896    
;;;897        time /= (1000 / DMP_SAMPLE_RATE);
000004  2005              MOVS     r0,#5
000006  fb94f0f0          SDIV     r0,r4,r0
00000a  b284              UXTH     r4,r0
;;;898        tmp[0] = time >> 8;
00000c  1220              ASRS     r0,r4,#8
00000e  f88d0000          STRB     r0,[sp,#0]
;;;899        tmp[1] = time & 0xFF;
000012  b2e0              UXTB     r0,r4
000014  f88d0001          STRB     r0,[sp,#1]
;;;900        return mpu_write_mem(D_1_88,2,tmp);
000018  466a              MOV      r2,sp
00001a  2102              MOVS     r1,#2
00001c  f44f70ac          MOV      r0,#0x158
000020  f7fffffe          BL       mpu_write_mem
;;;901    }
000024  bd38              POP      {r3-r5,pc}
;;;902    
                          ENDP


                          AREA ||i.dmp_set_tap_axes||, CODE, READONLY, ALIGN=1

                  dmp_set_tap_axes PROC
;;;785     */
;;;786    int dmp_set_tap_axes(unsigned char axis)
000000  b538              PUSH     {r3-r5,lr}
;;;787    {
000002  4604              MOV      r4,r0
;;;788        unsigned char tmp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;789    
;;;790        if (axis & TAP_X)
000008  f0140f01          TST      r4,#1
00000c  d004              BEQ      |L24.24|
;;;791            tmp |= 0x30;
00000e  f89d0000          LDRB     r0,[sp,#0]
000012  f0400030          ORR      r0,r0,#0x30
000016  9000              STR      r0,[sp,#0]
                  |L24.24|
;;;792        if (axis & TAP_Y)
000018  f0140f02          TST      r4,#2
00001c  d004              BEQ      |L24.40|
;;;793            tmp |= 0x0C;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f040000c          ORR      r0,r0,#0xc
000026  9000              STR      r0,[sp,#0]
                  |L24.40|
;;;794        if (axis & TAP_Z)
000028  f0140f04          TST      r4,#4
00002c  d004              BEQ      |L24.56|
;;;795            tmp |= 0x03;
00002e  f89d0000          LDRB     r0,[sp,#0]
000032  f0400003          ORR      r0,r0,#3
000036  9000              STR      r0,[sp,#0]
                  |L24.56|
;;;796        return mpu_write_mem(D_1_72, 1, &tmp);
000038  466a              MOV      r2,sp
00003a  2101              MOVS     r1,#1
00003c  f44f70a4          MOV      r0,#0x148
000040  f7fffffe          BL       mpu_write_mem
;;;797    }
000044  bd38              POP      {r3-r5,pc}
;;;798    
                          ENDP


                          AREA ||i.dmp_set_tap_count||, CODE, READONLY, ALIGN=1

                  dmp_set_tap_count PROC
;;;803     */
;;;804    int dmp_set_tap_count(unsigned char min_taps)
000000  b538              PUSH     {r3-r5,lr}
;;;805    {
000002  4604              MOV      r4,r0
;;;806        unsigned char tmp;
;;;807    
;;;808        if (min_taps < 1)
000004  2c01              CMP      r4,#1
000006  da01              BGE      |L25.12|
;;;809            min_taps = 1;
000008  2401              MOVS     r4,#1
00000a  e002              B        |L25.18|
                  |L25.12|
;;;810        else if (min_taps > 4)
00000c  2c04              CMP      r4,#4
00000e  dd00              BLE      |L25.18|
;;;811            min_taps = 4;
000010  2404              MOVS     r4,#4
                  |L25.18|
;;;812    
;;;813        tmp = min_taps - 1;
000012  1e60              SUBS     r0,r4,#1
000014  b2c0              UXTB     r0,r0
000016  9000              STR      r0,[sp,#0]
;;;814        return mpu_write_mem(D_1_79, 1, &tmp);
000018  466a              MOV      r2,sp
00001a  2101              MOVS     r1,#1
00001c  f240104f          MOV      r0,#0x14f
000020  f7fffffe          BL       mpu_write_mem
;;;815    }
000024  bd38              POP      {r3-r5,pc}
;;;816    
                          ENDP


                          AREA ||i.dmp_set_tap_thresh||, CODE, READONLY, ALIGN=2

                  dmp_set_tap_thresh PROC
;;;719     */
;;;720    int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;721    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;722        unsigned char tmp[4], accel_fsr;
;;;723        float scaled_thresh;
;;;724        unsigned short dmp_thresh, dmp_thresh_2;
;;;725        if (!(axis & TAP_XYZ) || thresh > 1600)
000008  f0160f07          TST      r6,#7
00000c  d002              BEQ      |L26.20|
00000e  f5b76fc8          CMP      r7,#0x640
000012  dd03              BLE      |L26.28|
                  |L26.20|
;;;726            return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L26.24|
;;;727    
;;;728        scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
;;;729    
;;;730        mpu_get_accel_fsr(&accel_fsr);
;;;731        switch (accel_fsr) {
;;;732        case 2:
;;;733            dmp_thresh = (unsigned short)(scaled_thresh * 16384);
;;;734            /* dmp_thresh * 0.75 */
;;;735            dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
;;;736            break;
;;;737        case 4:
;;;738            dmp_thresh = (unsigned short)(scaled_thresh * 8192);
;;;739            /* dmp_thresh * 0.75 */
;;;740            dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
;;;741            break;
;;;742        case 8:
;;;743            dmp_thresh = (unsigned short)(scaled_thresh * 4096);
;;;744            /* dmp_thresh * 0.75 */
;;;745            dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
;;;746            break;
;;;747        case 16:
;;;748            dmp_thresh = (unsigned short)(scaled_thresh * 2048);
;;;749            /* dmp_thresh * 0.75 */
;;;750            dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
;;;751            break;
;;;752        default:
;;;753            return -1;
;;;754        }
;;;755        tmp[0] = (unsigned char)(dmp_thresh >> 8);
;;;756        tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
;;;757        tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
;;;758        tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
;;;759    
;;;760        if (axis & TAP_X) {
;;;761            if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
;;;762                return -1;
;;;763            if (mpu_write_mem(D_1_36, 2, tmp+2))
;;;764                return -1;
;;;765        }
;;;766        if (axis & TAP_Y) {
;;;767            if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
;;;768                return -1;
;;;769            if (mpu_write_mem(D_1_40, 2, tmp+2))
;;;770                return -1;
;;;771        }
;;;772        if (axis & TAP_Z) {
;;;773            if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
;;;774                return -1;
;;;775            if (mpu_write_mem(D_1_44, 2, tmp+2))
;;;776                return -1;
;;;777        }
;;;778        return 0;
;;;779    }
000018  e8bd87fc          POP      {r2-r10,pc}
                  |L26.28|
00001c  4638              MOV      r0,r7                 ;728
00001e  f7fffffe          BL       __aeabi_ui2f
000022  4681              MOV      r9,r0                 ;728
000024  4959              LDR      r1,|L26.396|
000026  f7fffffe          BL       __aeabi_fdiv
00002a  4680              MOV      r8,r0                 ;728
00002c  4668              MOV      r0,sp                 ;730
00002e  f7fffffe          BL       mpu_get_accel_fsr
000032  f89d0000          LDRB     r0,[sp,#0]            ;731
000036  2802              CMP      r0,#2                 ;731
000038  d006              BEQ      |L26.72|
00003a  2804              CMP      r0,#4                 ;731
00003c  d016              BEQ      |L26.108|
00003e  2808              CMP      r0,#8                 ;731
000040  d026              BEQ      |L26.144|
000042  2810              CMP      r0,#0x10              ;731
000044  d148              BNE      |L26.216|
000046  e035              B        |L26.180|
                  |L26.72|
000048  f04f418d          MOV      r1,#0x46800000        ;733
00004c  4640              MOV      r0,r8                 ;733
00004e  f7fffffe          BL       __aeabi_fmul
000052  4681              MOV      r9,r0                 ;733
000054  f7fffffe          BL       __aeabi_f2uiz
000058  b284              UXTH     r4,r0                 ;733
00005a  494d              LDR      r1,|L26.400|
00005c  4640              MOV      r0,r8                 ;735
00005e  f7fffffe          BL       __aeabi_fmul
000062  4681              MOV      r9,r0                 ;735
000064  f7fffffe          BL       __aeabi_f2uiz
000068  b285              UXTH     r5,r0                 ;735
00006a  e038              B        |L26.222|
                  |L26.108|
00006c  f04f418c          MOV      r1,#0x46000000        ;738
000070  4640              MOV      r0,r8                 ;738
000072  f7fffffe          BL       __aeabi_fmul
000076  4681              MOV      r9,r0                 ;738
000078  f7fffffe          BL       __aeabi_f2uiz
00007c  b284              UXTH     r4,r0                 ;738
00007e  4945              LDR      r1,|L26.404|
000080  4640              MOV      r0,r8                 ;740
000082  f7fffffe          BL       __aeabi_fmul
000086  4681              MOV      r9,r0                 ;740
000088  f7fffffe          BL       __aeabi_f2uiz
00008c  b285              UXTH     r5,r0                 ;740
00008e  e026              B        |L26.222|
                  |L26.144|
000090  f04f418b          MOV      r1,#0x45800000        ;743
000094  4640              MOV      r0,r8                 ;743
000096  f7fffffe          BL       __aeabi_fmul
00009a  4681              MOV      r9,r0                 ;743
00009c  f7fffffe          BL       __aeabi_f2uiz
0000a0  b284              UXTH     r4,r0                 ;743
0000a2  493d              LDR      r1,|L26.408|
0000a4  4640              MOV      r0,r8                 ;745
0000a6  f7fffffe          BL       __aeabi_fmul
0000aa  4681              MOV      r9,r0                 ;745
0000ac  f7fffffe          BL       __aeabi_f2uiz
0000b0  b285              UXTH     r5,r0                 ;745
0000b2  e014              B        |L26.222|
                  |L26.180|
0000b4  f04f418a          MOV      r1,#0x45000000        ;748
0000b8  4640              MOV      r0,r8                 ;748
0000ba  f7fffffe          BL       __aeabi_fmul
0000be  4681              MOV      r9,r0                 ;748
0000c0  f7fffffe          BL       __aeabi_f2uiz
0000c4  b284              UXTH     r4,r0                 ;748
0000c6  4935              LDR      r1,|L26.412|
0000c8  4640              MOV      r0,r8                 ;750
0000ca  f7fffffe          BL       __aeabi_fmul
0000ce  4681              MOV      r9,r0                 ;750
0000d0  f7fffffe          BL       __aeabi_f2uiz
0000d4  b285              UXTH     r5,r0                 ;750
0000d6  e002              B        |L26.222|
                  |L26.216|
0000d8  f04f30ff          MOV      r0,#0xffffffff        ;753
0000dc  e79c              B        |L26.24|
                  |L26.222|
0000de  bf00              NOP                            ;736
0000e0  1220              ASRS     r0,r4,#8              ;755
0000e2  f88d0004          STRB     r0,[sp,#4]            ;755
0000e6  b2e0              UXTB     r0,r4                 ;756
0000e8  f88d0005          STRB     r0,[sp,#5]            ;756
0000ec  1228              ASRS     r0,r5,#8              ;757
0000ee  f88d0006          STRB     r0,[sp,#6]            ;757
0000f2  b2e8              UXTB     r0,r5                 ;758
0000f4  f88d0007          STRB     r0,[sp,#7]            ;758
0000f8  f0160f01          TST      r6,#1                 ;760
0000fc  d014              BEQ      |L26.296|
0000fe  aa01              ADD      r2,sp,#4              ;761
000100  2102              MOVS     r1,#2                 ;761
000102  f44f70ea          MOV      r0,#0x1d4             ;761
000106  f7fffffe          BL       mpu_write_mem
00010a  b110              CBZ      r0,|L26.274|
00010c  f04f30ff          MOV      r0,#0xffffffff        ;762
000110  e782              B        |L26.24|
                  |L26.274|
000112  f10d0206          ADD      r2,sp,#6              ;763
000116  2102              MOVS     r1,#2                 ;763
000118  f44f7092          MOV      r0,#0x124             ;763
00011c  f7fffffe          BL       mpu_write_mem
000120  b110              CBZ      r0,|L26.296|
000122  f04f30ff          MOV      r0,#0xffffffff        ;764
000126  e777              B        |L26.24|
                  |L26.296|
000128  f0160f02          TST      r6,#2                 ;766
00012c  d014              BEQ      |L26.344|
00012e  aa01              ADD      r2,sp,#4              ;767
000130  2102              MOVS     r1,#2                 ;767
000132  f44f70ec          MOV      r0,#0x1d8             ;767
000136  f7fffffe          BL       mpu_write_mem
00013a  b110              CBZ      r0,|L26.322|
00013c  f04f30ff          MOV      r0,#0xffffffff        ;768
000140  e76a              B        |L26.24|
                  |L26.322|
000142  f10d0206          ADD      r2,sp,#6              ;769
000146  2102              MOVS     r1,#2                 ;769
000148  f44f7094          MOV      r0,#0x128             ;769
00014c  f7fffffe          BL       mpu_write_mem
000150  b110              CBZ      r0,|L26.344|
000152  f04f30ff          MOV      r0,#0xffffffff        ;770
000156  e75f              B        |L26.24|
                  |L26.344|
000158  f0160f04          TST      r6,#4                 ;772
00015c  d014              BEQ      |L26.392|
00015e  aa01              ADD      r2,sp,#4              ;773
000160  2102              MOVS     r1,#2                 ;773
000162  f44f70ee          MOV      r0,#0x1dc             ;773
000166  f7fffffe          BL       mpu_write_mem
00016a  b110              CBZ      r0,|L26.370|
00016c  f04f30ff          MOV      r0,#0xffffffff        ;774
000170  e752              B        |L26.24|
                  |L26.370|
000172  f10d0206          ADD      r2,sp,#6              ;775
000176  2102              MOVS     r1,#2                 ;775
000178  f44f7096          MOV      r0,#0x12c             ;775
00017c  f7fffffe          BL       mpu_write_mem
000180  b110              CBZ      r0,|L26.392|
000182  f04f30ff          MOV      r0,#0xffffffff        ;776
000186  e747              B        |L26.24|
                  |L26.392|
000188  2000              MOVS     r0,#0                 ;778
00018a  e745              B        |L26.24|
;;;780    
                          ENDP

                  |L26.396|
                          DCD      0x43480000
                  |L26.400|
                          DCD      0x46400000
                  |L26.404|
                          DCD      0x45c00000
                  |L26.408|
                          DCD      0x45400000
                  |L26.412|
                          DCD      0x44c00000

                          AREA ||i.dmp_set_tap_time||, CODE, READONLY, ALIGN=1

                  dmp_set_tap_time PROC
;;;821     */
;;;822    int dmp_set_tap_time(unsigned short time)
000000  b538              PUSH     {r3-r5,lr}
;;;823    {
000002  4604              MOV      r4,r0
;;;824        unsigned short dmp_time;
;;;825        unsigned char tmp[2];
;;;826    
;;;827        dmp_time = time / (1000 / DMP_SAMPLE_RATE);
000004  2005              MOVS     r0,#5
000006  fb94f0f0          SDIV     r0,r4,r0
00000a  b285              UXTH     r5,r0
;;;828        tmp[0] = (unsigned char)(dmp_time >> 8);
00000c  1228              ASRS     r0,r5,#8
00000e  f88d0000          STRB     r0,[sp,#0]
;;;829        tmp[1] = (unsigned char)(dmp_time & 0xFF);
000012  b2e8              UXTB     r0,r5
000014  f88d0001          STRB     r0,[sp,#1]
;;;830        return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
000018  466a              MOV      r2,sp
00001a  2102              MOVS     r1,#2
00001c  f44f70ef          MOV      r0,#0x1de
000020  f7fffffe          BL       mpu_write_mem
;;;831    }
000024  bd38              POP      {r3-r5,pc}
;;;832    
                          ENDP


                          AREA ||i.dmp_set_tap_time_multi||, CODE, READONLY, ALIGN=1

                  dmp_set_tap_time_multi PROC
;;;837     */
;;;838    int dmp_set_tap_time_multi(unsigned short time)
000000  b538              PUSH     {r3-r5,lr}
;;;839    {
000002  4604              MOV      r4,r0
;;;840        unsigned short dmp_time;
;;;841        unsigned char tmp[2];
;;;842    
;;;843        dmp_time = time / (1000 / DMP_SAMPLE_RATE);
000004  2005              MOVS     r0,#5
000006  fb94f0f0          SDIV     r0,r4,r0
00000a  b285              UXTH     r5,r0
;;;844        tmp[0] = (unsigned char)(dmp_time >> 8);
00000c  1228              ASRS     r0,r5,#8
00000e  f88d0000          STRB     r0,[sp,#0]
;;;845        tmp[1] = (unsigned char)(dmp_time & 0xFF);
000012  b2e8              UXTB     r0,r5
000014  f88d0001          STRB     r0,[sp,#1]
;;;846        return mpu_write_mem(D_1_218, 2, tmp);
000018  466a              MOV      r2,sp
00001a  2102              MOVS     r1,#2
00001c  f44f70ed          MOV      r0,#0x1da
000020  f7fffffe          BL       mpu_write_mem
;;;847    }
000024  bd38              POP      {r3-r5,pc}
;;;848    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||dmp||
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  dmp_memory
000000  00007000          DCB      0x00,0x00,0x70,0x00
000004  00000024          DCB      0x00,0x00,0x00,0x24
000008  00000002          DCB      0x00,0x00,0x00,0x02
00000c  00030000          DCB      0x00,0x03,0x00,0x00
000010  00650054          DCB      0x00,0x65,0x00,0x54
000014  ffef0000          DCB      0xff,0xef,0x00,0x00
000018  fa80000b          DCB      0xfa,0x80,0x00,0x0b
00001c  12820001          DCB      0x12,0x82,0x00,0x01
000020  030c30c3          DCB      0x03,0x0c,0x30,0xc3
000024  0e8c8ce9          DCB      0x0e,0x8c,0x8c,0xe9
000028  14d54002          DCB      0x14,0xd5,0x40,0x02
00002c  13710f8e          DCB      0x13,0x71,0x0f,0x8e
000030  3883f883          DCB      0x38,0x83,0xf8,0x83
000034  3000f883          DCB      0x30,0x00,0xf8,0x83
000038  258ef883          DCB      0x25,0x8e,0xf8,0x83
00003c  3000f883          DCB      0x30,0x00,0xf8,0x83
000040  ffffffff          DCB      0xff,0xff,0xff,0xff
000044  0ffea9d6          DCB      0x0f,0xfe,0xa9,0xd6
000048  24000400          DCB      0x24,0x00,0x04,0x00
00004c  1a8279a1          DCB      0x1a,0x82,0x79,0xa1
000050  0000003c          DCB      0x00,0x00,0x00,0x3c
000054  ffff0000          DCB      0xff,0xff,0x00,0x00
000058  00100000          DCB      0x00,0x10,0x00,0x00
00005c  38836fa2          DCB      0x38,0x83,0x6f,0xa2
000060  003e0330          DCB      0x00,0x3e,0x03,0x30
000064  40000000          DCB      0x40,0x00,0x00,0x00
000068  02cae309          DCB      0x02,0xca,0xe3,0x09
00006c  3e800000          DCB      0x3e,0x80,0x00,0x00
000070  20000000          DCB      0x20,0x00,0x00,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
000078  40000000          DCB      0x40,0x00,0x00,0x00
00007c  60000000          DCB      0x60,0x00,0x00,0x00
000080  000c0000          DCB      0x00,0x0c,0x00,0x00
000084  000c186e          DCB      0x00,0x0c,0x18,0x6e
000088  00000692          DCB      0x00,0x00,0x06,0x92
00008c  0a16c0df          DCB      0x0a,0x16,0xc0,0xdf
000090  ffff0256          DCB      0xff,0xff,0x02,0x56
000094  fd8cd377          DCB      0xfd,0x8c,0xd3,0x77
000098  ffe1c496          DCB      0xff,0xe1,0xc4,0x96
00009c  e0c5beaa          DCB      0xe0,0xc5,0xbe,0xaa
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  ffff0b2b          DCB      0xff,0xff,0x0b,0x2b
0000a8  00001657          DCB      0x00,0x00,0x16,0x57
0000ac  00000359          DCB      0x00,0x00,0x03,0x59
0000b0  40000000          DCB      0x40,0x00,0x00,0x00
0000b4  00001dfa          DCB      0x00,0x00,0x1d,0xfa
0000b8  00026c1d          DCB      0x00,0x02,0x6c,0x1d
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  3fffdfeb          DCB      0x3f,0xff,0xdf,0xeb
0000c4  003eb3b6          DCB      0x00,0x3e,0xb3,0xb6
0000c8  000d2278          DCB      0x00,0x0d,0x22,0x78
0000cc  00002f3c          DCB      0x00,0x00,0x2f,0x3c
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  001942b5          DCB      0x00,0x19,0x42,0xb5
0000d8  000039a2          DCB      0x00,0x00,0x39,0xa2
0000dc  0000b365          DCB      0x00,0x00,0xb3,0x65
0000e0  d90e9fc9          DCB      0xd9,0x0e,0x9f,0xc9
0000e4  1dcf4c34          DCB      0x1d,0xcf,0x4c,0x34
0000e8  30000000          DCB      0x30,0x00,0x00,0x00
0000ec  50000000          DCB      0x50,0x00,0x00,0x00
0000f0  3bb67ae8          DCB      0x3b,0xb6,0x7a,0xe8
0000f4  00640000          DCB      0x00,0x64,0x00,0x00
0000f8  00c80000          DCB      0x00,0xc8,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
000100  10000000          DCB      0x10,0x00,0x00,0x00
000104  1000fa92          DCB      0x10,0x00,0xfa,0x92
000108  1000225e          DCB      0x10,0x00,0x22,0x5e
00010c  000d229f          DCB      0x00,0x0d,0x22,0x9f
000110  00010000          DCB      0x00,0x01,0x00,0x00
000114  00320000          DCB      0x00,0x32,0x00,0x00
000118  ff460000          DCB      0xff,0x46,0x00,0x00
00011c  63d40000          DCB      0x63,0xd4,0x00,0x00
000120  10000000          DCB      0x10,0x00,0x00,0x00
000124  04d60000          DCB      0x04,0xd6,0x00,0x00
000128  04cc0000          DCB      0x04,0xcc,0x00,0x00
00012c  04cc0000          DCB      0x04,0xcc,0x00,0x00
000130  00001072          DCB      0x00,0x00,0x10,0x72
000134  00000040          DCB      0x00,0x00,0x00,0x40
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00060002          DCB      0x00,0x06,0x00,0x02
000144  00050007          DCB      0x00,0x05,0x00,0x07
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00640000          DCB      0x00,0x64,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000005          DCB      0x00,0x00,0x00,0x05
000158  00050064          DCB      0x00,0x05,0x00,0x64
00015c  00200000          DCB      0x00,0x20,0x00,0x00
000160  00000000          DCB      0x00,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00004000          DCB      0x00,0x00,0x40,0x00
00016c  00000300          DCB      0x00,0x00,0x03,0x00
000170  00000032          DCB      0x00,0x00,0x00,0x32
000174  f8980000          DCB      0xf8,0x98,0x00,0x00
000178  ff650000          DCB      0xff,0x65,0x00,0x00
00017c  830f0000          DCB      0x83,0x0f,0x00,0x00
000180  ff9bfc00          DCB      0xff,0x9b,0xfc,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00000000          DCB      0x00,0x00,0x00,0x00
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
0001ac  00001000          DCB      0x00,0x00,0x10,0x00
0001b0  40000000          DCB      0x40,0x00,0x00,0x00
0001b4  00000006          DCB      0x00,0x00,0x00,0x06
0001b8  0000b26a          DCB      0x00,0x00,0xb2,0x6a
0001bc  00020000          DCB      0x00,0x02,0x00,0x00
0001c0  0001fb83          DCB      0x00,0x01,0xfb,0x83
0001c4  00680000          DCB      0x00,0x68,0x00,0x00
0001c8  00d9fc00          DCB      0x00,0xd9,0xfc,0x00
0001cc  7cf1ff83          DCB      0x7c,0xf1,0xff,0x83
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00650000          DCB      0x00,0x65,0x00,0x00
0001d8  006403e8          DCB      0x00,0x64,0x03,0xe8
0001dc  00640028          DCB      0x00,0x64,0x00,0x28
0001e0  00000025          DCB      0x00,0x00,0x00,0x25
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  16a00000          DCB      0x16,0xa0,0x00,0x00
0001ec  00001000          DCB      0x00,0x00,0x10,0x00
0001f0  00001000          DCB      0x00,0x00,0x10,0x00
0001f4  002f0000          DCB      0x00,0x2f,0x00,0x00
0001f8  000001f4          DCB      0x00,0x00,0x01,0xf4
0001fc  00001000          DCB      0x00,0x00,0x10,0x00
000200  00280000          DCB      0x00,0x28,0x00,0x00
000204  ffff4581          DCB      0xff,0xff,0x45,0x81
000208  fffffa72          DCB      0xff,0xff,0xfa,0x72
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  00000000          DCB      0x00,0x00,0x00,0x00
000214  00440005          DCB      0x00,0x44,0x00,0x05
000218  0005bac6          DCB      0x00,0x05,0xba,0xc6
00021c  004778a2          DCB      0x00,0x47,0x78,0xa2
000220  00000001          DCB      0x00,0x00,0x00,0x01
000224  00000000          DCB      0x00,0x00,0x00,0x00
000228  00000600          DCB      0x00,0x00,0x06,0x00
00022c  00000014          DCB      0x00,0x00,0x00,0x14
000230  0000254d          DCB      0x00,0x00,0x25,0x4d
000234  002f706d          DCB      0x00,0x2f,0x70,0x6d
000238  000005ae          DCB      0x00,0x00,0x05,0xae
00023c  000c02d0          DCB      0x00,0x0c,0x02,0xd0
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  00000000          DCB      0x00,0x00,0x00,0x00
000250  001b0000          DCB      0x00,0x1b,0x00,0x00
000254  00000000          DCB      0x00,0x00,0x00,0x00
000258  00000000          DCB      0x00,0x00,0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  00640000          DCB      0x00,0x64,0x00,0x00
000264  00080000          DCB      0x00,0x08,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00000000          DCB      0x00,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000000          DCB      0x00,0x00,0x00,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00000000          DCB      0x00,0x00,0x00,0x00
000294  00000000          DCB      0x00,0x00,0x00,0x00
000298  00000000          DCB      0x00,0x00,0x00,0x00
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  00000000          DCB      0x00,0x00,0x00,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000000          DCB      0x00,0x00,0x00,0x00
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  00000000          DCB      0x00,0x00,0x00,0x00
0002b8  00000000          DCB      0x00,0x00,0x00,0x00
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  001b0000          DCB      0x00,0x1b,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  000e000e          DCB      0x00,0x0e,0x00,0x0e
0002d0  00000ac7          DCB      0x00,0x00,0x0a,0xc7
0002d4  00040000          DCB      0x00,0x04,0x00,0x00
0002d8  00000032          DCB      0x00,0x00,0x00,0x32
0002dc  ffffff9c          DCB      0xff,0xff,0xff,0x9c
0002e0  00000b2b          DCB      0x00,0x00,0x0b,0x2b
0002e4  00000002          DCB      0x00,0x00,0x00,0x02
0002e8  00000001          DCB      0x00,0x00,0x00,0x01
0002ec  00000064          DCB      0x00,0x00,0x00,0x64
0002f0  ffe50000          DCB      0xff,0xe5,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000001          DCB      0x00,0x00,0x00,0x01
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00010000          DCB      0x00,0x01,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00018000          DCB      0x00,0x01,0x80,0x00
000314  00018000          DCB      0x00,0x01,0x80,0x00
000318  00018000          DCB      0x00,0x01,0x80,0x00
00031c  002426d3          DCB      0x00,0x24,0x26,0xd3
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00060010          DCB      0x00,0x06,0x00,0x10
00032c  0096003c          DCB      0x00,0x96,0x00,0x3c
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  0c0a4e68          DCB      0x0c,0x0a,0x4e,0x68
000344  cdcf7709          DCB      0xcd,0xcf,0x77,0x09
000348  50166759          DCB      0x50,0x16,0x67,0x59
00034c  c619ce82          DCB      0xc6,0x19,0xce,0x82
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  17d78400          DCB      0x17,0xd7,0x84,0x00
00036c  03000000          DCB      0x03,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  c7938f9d          DCB      0xc7,0x93,0x8f,0x9d
00037c  1e1b1c19          DCB      0x1e,0x1b,0x1c,0x19
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  02031885          DCB      0x02,0x03,0x18,0x85
00039c  00004000          DCB      0x00,0x00,0x40,0x00
0003a0  00000003          DCB      0x00,0x00,0x00,0x03
0003a4  00000003          DCB      0x00,0x00,0x00,0x03
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  40000000          DCB      0x40,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  677ddf7e          DCB      0x67,0x7d,0xdf,0x7e
0003e8  72902e55          DCB      0x72,0x90,0x2e,0x55
0003ec  4cf6e688          DCB      0x4c,0xf6,0xe6,0x88
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  d8dcb4b8          DCB      0xd8,0xdc,0xb4,0xb8
000404  b0d8b9ab          DCB      0xb0,0xd8,0xb9,0xab
000408  f3f8fab3          DCB      0xf3,0xf8,0xfa,0xb3
00040c  b7bb8e9e          DCB      0xb7,0xbb,0x8e,0x9e
000410  aef132f5          DCB      0xae,0xf1,0x32,0xf5
000414  1bf1b4b8          DCB      0x1b,0xf1,0xb4,0xb8
000418  b08097f1          DCB      0xb0,0x80,0x97,0xf1
00041c  a9dfdfdf          DCB      0xa9,0xdf,0xdf,0xdf
000420  aadfdfdf          DCB      0xaa,0xdf,0xdf,0xdf
000424  f2aac5cd          DCB      0xf2,0xaa,0xc5,0xcd
000428  c7a90cc9          DCB      0xc7,0xa9,0x0c,0xc9
00042c  2c97f1a9          DCB      0x2c,0x97,0xf1,0xa9
000430  89264666          DCB      0x89,0x26,0x46,0x66
000434  b28999a9          DCB      0xb2,0x89,0x99,0xa9
000438  2d557db0          DCB      0x2d,0x55,0x7d,0xb0
00043c  b08aa896          DCB      0xb0,0x8a,0xa8,0x96
000440  365676f1          DCB      0x36,0x56,0x76,0xf1
000444  baa3b4b2          DCB      0xba,0xa3,0xb4,0xb2
000448  80c0b8a8          DCB      0x80,0xc0,0xb8,0xa8
00044c  9711b283          DCB      0x97,0x11,0xb2,0x83
000450  98baa3f0          DCB      0x98,0xba,0xa3,0xf0
000454  24084410          DCB      0x24,0x08,0x44,0x10
000458  6418b2b9          DCB      0x64,0x18,0xb2,0xb9
00045c  b49883f1          DCB      0xb4,0x98,0x83,0xf1
000460  a329557d          DCB      0xa3,0x29,0x55,0x7d
000464  bab5b1a3          DCB      0xba,0xb5,0xb1,0xa3
000468  8393f000          DCB      0x83,0x93,0xf0,0x00
00046c  2850f5b2          DCB      0x28,0x50,0xf5,0xb2
000470  b6aa8393          DCB      0xb6,0xaa,0x83,0x93
000474  28547cf1          DCB      0x28,0x54,0x7c,0xf1
000478  b9a38293          DCB      0xb9,0xa3,0x82,0x93
00047c  61baa2da          DCB      0x61,0xba,0xa2,0xda
000480  dedfdb81          DCB      0xde,0xdf,0xdb,0x81
000484  9ab9aef5          DCB      0x9a,0xb9,0xae,0xf5
000488  606870f1          DCB      0x60,0x68,0x70,0xf1
00048c  dabaa2df          DCB      0xda,0xba,0xa2,0xdf
000490  d9baa2fa          DCB      0xd9,0xba,0xa2,0xfa
000494  b9a38292          DCB      0xb9,0xa3,0x82,0x92
000498  db31baa2          DCB      0xdb,0x31,0xba,0xa2
00049c  d9baa2f8          DCB      0xd9,0xba,0xa2,0xf8
0004a0  df85a4d0          DCB      0xdf,0x85,0xa4,0xd0
0004a4  c1bbad83          DCB      0xc1,0xbb,0xad,0x83
0004a8  c2c5c7b8          DCB      0xc2,0xc5,0xc7,0xb8
0004ac  a2dfdfdf          DCB      0xa2,0xdf,0xdf,0xdf
0004b0  baa0dfdf          DCB      0xba,0xa0,0xdf,0xdf
0004b4  dfd8d8f1          DCB      0xdf,0xd8,0xd8,0xf1
0004b8  b8aab38d          DCB      0xb8,0xaa,0xb3,0x8d
0004bc  b4980d35          DCB      0xb4,0x98,0x0d,0x35
0004c0  5db2b6ba          DCB      0x5d,0xb2,0xb6,0xba
0004c4  af8c9619          DCB      0xaf,0x8c,0x96,0x19
0004c8  8f9fa70e          DCB      0x8f,0x9f,0xa7,0x0e
0004cc  161eb49a          DCB      0x16,0x1e,0xb4,0x9a
0004d0  b8aa872c          DCB      0xb8,0xaa,0x87,0x2c
0004d4  547cbaa4          DCB      0x54,0x7c,0xba,0xa4
0004d8  b08ab691          DCB      0xb0,0x8a,0xb6,0x91
0004dc  325676b2          DCB      0x32,0x56,0x76,0xb2
0004e0  8494a4c8          DCB      0x84,0x94,0xa4,0xc8
0004e4  08cdd8b8          DCB      0x08,0xcd,0xd8,0xb8
0004e8  b4b0f199          DCB      0xb4,0xb0,0xf1,0x99
0004ec  82a82d55          DCB      0x82,0xa8,0x2d,0x55
0004f0  7d98a80e          DCB      0x7d,0x98,0xa8,0x0e
0004f4  161ea22c          DCB      0x16,0x1e,0xa2,0x2c
0004f8  547c92a4          DCB      0x54,0x7c,0x92,0xa4
0004fc  f02c5078          DCB      0xf0,0x2c,0x50,0x78
000500  f184a898          DCB      0xf1,0x84,0xa8,0x98
000504  c4cdfcd8          DCB      0xc4,0xcd,0xfc,0xd8
000508  0ddba8fc          DCB      0x0d,0xdb,0xa8,0xfc
00050c  2df3d9ba          DCB      0x2d,0xf3,0xd9,0xba
000510  a6f8daba          DCB      0xa6,0xf8,0xda,0xba
000514  a6ded8ba          DCB      0xa6,0xde,0xd8,0xba
000518  b2b68696          DCB      0xb2,0xb6,0x86,0x96
00051c  a6d0f3c8          DCB      0xa6,0xd0,0xf3,0xc8
000520  41daa6c8          DCB      0x41,0xda,0xa6,0xc8
000524  f8d8b0b4          DCB      0xf8,0xd8,0xb0,0xb4
000528  b882a892          DCB      0xb8,0x82,0xa8,0x92
00052c  f52c5488          DCB      0xf5,0x2c,0x54,0x88
000530  98f135d9          DCB      0x98,0xf1,0x35,0xd9
000534  f418d8f1          DCB      0xf4,0x18,0xd8,0xf1
000538  a2d0f8f9          DCB      0xa2,0xd0,0xf8,0xf9
00053c  a884d9c7          DCB      0xa8,0x84,0xd9,0xc7
000540  dff8f883          DCB      0xdf,0xf8,0xf8,0x83
000544  c5dadf69          DCB      0xc5,0xda,0xdf,0x69
000548  df83c1d8          DCB      0xdf,0x83,0xc1,0xd8
00054c  f40114f1          DCB      0xf4,0x01,0x14,0xf1
000550  a8824ea8          DCB      0xa8,0x82,0x4e,0xa8
000554  84f311d1          DCB      0x84,0xf3,0x11,0xd1
000558  82f5d992          DCB      0x82,0xf5,0xd9,0x92
00055c  289788f1          DCB      0x28,0x97,0x88,0xf1
000560  09f41c1c          DCB      0x09,0xf4,0x1c,0x1c
000564  d884a8f3          DCB      0xd8,0x84,0xa8,0xf3
000568  c0f9d1d9          DCB      0xc0,0xf9,0xd1,0xd9
00056c  9782f129          DCB      0x97,0x82,0xf1,0x29
000570  f40dd8f3          DCB      0xf4,0x0d,0xd8,0xf3
000574  f9f9d1d9          DCB      0xf9,0xf9,0xd1,0xd9
000578  82f4c203          DCB      0x82,0xf4,0xc2,0x03
00057c  d8dedf1a          DCB      0xd8,0xde,0xdf,0x1a
000580  d8f1a2fa          DCB      0xd8,0xf1,0xa2,0xfa
000584  f9a88498          DCB      0xf9,0xa8,0x84,0x98
000588  d9c7dff8          DCB      0xd9,0xc7,0xdf,0xf8
00058c  f8f883c7          DCB      0xf8,0xf8,0x83,0xc7
000590  dadf69df          DCB      0xda,0xdf,0x69,0xdf
000594  f883c3d8          DCB      0xf8,0x83,0xc3,0xd8
000598  f40114f1          DCB      0xf4,0x01,0x14,0xf1
00059c  98a8822e          DCB      0x98,0xa8,0x82,0x2e
0005a0  a884f311          DCB      0xa8,0x84,0xf3,0x11
0005a4  d182f5d9          DCB      0xd1,0x82,0xf5,0xd9
0005a8  92509788          DCB      0x92,0x50,0x97,0x88
0005ac  f109f41c          DCB      0xf1,0x09,0xf4,0x1c
0005b0  d884a8f3          DCB      0xd8,0x84,0xa8,0xf3
0005b4  c0f8f9d1          DCB      0xc0,0xf8,0xf9,0xd1
0005b8  d99782f1          DCB      0xd9,0x97,0x82,0xf1
0005bc  49f40dd8          DCB      0x49,0xf4,0x0d,0xd8
0005c0  f3f9f9d1          DCB      0xf3,0xf9,0xf9,0xd1
0005c4  d982f4c4          DCB      0xd9,0x82,0xf4,0xc4
0005c8  03d8dedf          DCB      0x03,0xd8,0xde,0xdf
0005cc  d8f1ad88          DCB      0xd8,0xf1,0xad,0x88
0005d0  98cca809          DCB      0x98,0xcc,0xa8,0x09
0005d4  f9d98292          DCB      0xf9,0xd9,0x82,0x92
0005d8  a8f57cf1          DCB      0xa8,0xf5,0x7c,0xf1
0005dc  883acf94          DCB      0x88,0x3a,0xcf,0x94
0005e0  4a6e98db          DCB      0x4a,0x6e,0x98,0xdb
0005e4  6931daad          DCB      0x69,0x31,0xda,0xad
0005e8  f2def9d8          DCB      0xf2,0xde,0xf9,0xd8
0005ec  8795a8f2          DCB      0x87,0x95,0xa8,0xf2
0005f0  21d1daa5          DCB      0x21,0xd1,0xda,0xa5
0005f4  f9f417d9          DCB      0xf9,0xf4,0x17,0xd9
0005f8  f1ae8ed0          DCB      0xf1,0xae,0x8e,0xd0
0005fc  c0c3ae82          DCB      0xc0,0xc3,0xae,0x82
000600  c684c3a8          DCB      0xc6,0x84,0xc3,0xa8
000604  8595c8a5          DCB      0x85,0x95,0xc8,0xa5
000608  88f2c0f1          DCB      0x88,0xf2,0xc0,0xf1
00060c  f4010ef1          DCB      0xf4,0x01,0x0e,0xf1
000610  8e9ea8c6          DCB      0x8e,0x9e,0xa8,0xc6
000614  3e56f554          DCB      0x3e,0x56,0xf5,0x54
000618  f18872f4          DCB      0xf1,0x88,0x72,0xf4
00061c  0115f198          DCB      0x01,0x15,0xf1,0x98
000620  45856ef5          DCB      0x45,0x85,0x6e,0xf5
000624  8e9e0488          DCB      0x8e,0x9e,0x04,0x88
000628  f142985a          DCB      0xf1,0x42,0x98,0x5a
00062c  8e9e0688          DCB      0x8e,0x9e,0x06,0x88
000630  69f4011c          DCB      0x69,0xf4,0x01,0x1c
000634  f1981e11          DCB      0xf1,0x98,0x1e,0x11
000638  08d0f504          DCB      0x08,0xd0,0xf5,0x04
00063c  f11e9702          DCB      0xf1,0x1e,0x97,0x02
000640  02983625          DCB      0x02,0x98,0x36,0x25
000644  dbf9d985          DCB      0xdb,0xf9,0xd9,0x85
000648  a5f3c1da          DCB      0xa5,0xf3,0xc1,0xda
00064c  85a5f3df          DCB      0x85,0xa5,0xf3,0xdf
000650  d88595a8          DCB      0xd8,0x85,0x95,0xa8
000654  f309daa5          DCB      0xf3,0x09,0xda,0xa5
000658  fad88292          DCB      0xfa,0xd8,0x82,0x92
00065c  a8f578f1          DCB      0xa8,0xf5,0x78,0xf1
000660  881a849f          DCB      0x88,0x1a,0x84,0x9f
000664  26889821          DCB      0x26,0x88,0x98,0x21
000668  daf41df3          DCB      0xda,0xf4,0x1d,0xf3
00066c  d8879f39          DCB      0xd8,0x87,0x9f,0x39
000670  d1afd9df          DCB      0xd1,0xaf,0xd9,0xdf
000674  dffbf9f4          DCB      0xdf,0xfb,0xf9,0xf4
000678  0cf3d8fa          DCB      0x0c,0xf3,0xd8,0xfa
00067c  d0f8daf9          DCB      0xd0,0xf8,0xda,0xf9
000680  f9d0dfd9          DCB      0xf9,0xd0,0xdf,0xd9
000684  f9d8f40b          DCB      0xf9,0xd8,0xf4,0x0b
000688  d8f3879f          DCB      0xd8,0xf3,0x87,0x9f
00068c  39d1afd9          DCB      0x39,0xd1,0xaf,0xd9
000690  dfdff41d          DCB      0xdf,0xdf,0xf4,0x1d
000694  f3d8fafc          DCB      0xf3,0xd8,0xfa,0xfc
000698  a869f9f9          DCB      0xa8,0x69,0xf9,0xf9
00069c  afd0dade          DCB      0xaf,0xd0,0xda,0xde
0006a0  fad9f88f          DCB      0xfa,0xd9,0xf8,0x8f
0006a4  9fa8f1cc          DCB      0x9f,0xa8,0xf1,0xcc
0006a8  f398db45          DCB      0xf3,0x98,0xdb,0x45
0006ac  d9afdfd0          DCB      0xd9,0xaf,0xdf,0xd0
0006b0  f8d8f18f          DCB      0xf8,0xd8,0xf1,0x8f
0006b4  9fa8caf3          DCB      0x9f,0xa8,0xca,0xf3
0006b8  8809daaf          DCB      0x88,0x09,0xda,0xaf
0006bc  8fcbf8d8          DCB      0x8f,0xcb,0xf8,0xd8
0006c0  f2ad978d          DCB      0xf2,0xad,0x97,0x8d
0006c4  0cd9a5df          DCB      0x0c,0xd9,0xa5,0xdf
0006c8  f9baa6f3          DCB      0xf9,0xba,0xa6,0xf3
0006cc  faf412f2          DCB      0xfa,0xf4,0x12,0xf2
0006d0  d8950dd1          DCB      0xd8,0x95,0x0d,0xd1
0006d4  d9baa6f3          DCB      0xd9,0xba,0xa6,0xf3
0006d8  fadaa5f2          DCB      0xfa,0xda,0xa5,0xf2
0006dc  c1baa6f3          DCB      0xc1,0xba,0xa6,0xf3
0006e0  dfd8f1ba          DCB      0xdf,0xd8,0xf1,0xba
0006e4  b2b68696          DCB      0xb2,0xb6,0x86,0x96
0006e8  a6d0caf3          DCB      0xa6,0xd0,0xca,0xf3
0006ec  49daa6cb          DCB      0x49,0xda,0xa6,0xcb
0006f0  f8d8b0b4          DCB      0xf8,0xd8,0xb0,0xb4
0006f4  b8d8ad84          DCB      0xb8,0xd8,0xad,0x84
0006f8  f2c0dff1          DCB      0xf2,0xc0,0xdf,0xf1
0006fc  8fcbc3a8          DCB      0x8f,0xcb,0xc3,0xa8
000700  b2b68696          DCB      0xb2,0xb6,0x86,0x96
000704  c8c1cbc3          DCB      0xc8,0xc1,0xcb,0xc3
000708  f3b0b488          DCB      0xf3,0xb0,0xb4,0x88
00070c  98a821db          DCB      0x98,0xa8,0x21,0xdb
000710  718d9d71          DCB      0x71,0x8d,0x9d,0x71
000714  859521d9          DCB      0x85,0x95,0x21,0xd9
000718  adf2fad8          DCB      0xad,0xf2,0xfa,0xd8
00071c  8597a828          DCB      0x85,0x97,0xa8,0x28
000720  d9f408d8          DCB      0xd9,0xf4,0x08,0xd8
000724  f28d29da          DCB      0xf2,0x8d,0x29,0xda
000728  f405d9f2          DCB      0xf4,0x05,0xd9,0xf2
00072c  85a4c2f2          DCB      0x85,0xa4,0xc2,0xf2
000730  d8a88d94          DCB      0xd8,0xa8,0x8d,0x94
000734  01d1d9f4          DCB      0x01,0xd1,0xd9,0xf4
000738  11f2d887          DCB      0x11,0xf2,0xd8,0x87
00073c  21d8f40a          DCB      0x21,0xd8,0xf4,0x0a
000740  d8f28498          DCB      0xd8,0xf2,0x84,0x98
000744  a8c801d1          DCB      0xa8,0xc8,0x01,0xd1
000748  d9f411d8          DCB      0xd9,0xf4,0x11,0xd8
00074c  f3a4c8bb          DCB      0xf3,0xa4,0xc8,0xbb
000750  afd0f2de          DCB      0xaf,0xd0,0xf2,0xde
000754  f8f8f8f8          DCB      0xf8,0xf8,0xf8,0xf8
000758  f8f8f8f8          DCB      0xf8,0xf8,0xf8,0xf8
00075c  d8f1b8f6          DCB      0xd8,0xf1,0xb8,0xf6
000760  b5b9b08a          DCB      0xb5,0xb9,0xb0,0x8a
000764  95a3de3c          DCB      0x95,0xa3,0xde,0x3c
000768  a3d9f8d8          DCB      0xa3,0xd9,0xf8,0xd8
00076c  5ca3d9f8          DCB      0x5c,0xa3,0xd9,0xf8
000770  d87ca3d9          DCB      0xd8,0x7c,0xa3,0xd9
000774  f8d8f8f9          DCB      0xf8,0xd8,0xf8,0xf9
000778  d1a5d9df          DCB      0xd1,0xa5,0xd9,0xdf
00077c  dafad8b1          DCB      0xda,0xfa,0xd8,0xb1
000780  8530f7d9          DCB      0x85,0x30,0xf7,0xd9
000784  ded8f830          DCB      0xde,0xd8,0xf8,0x30
000788  addaded8          DCB      0xad,0xda,0xde,0xd8
00078c  f2b48c99          DCB      0xf2,0xb4,0x8c,0x99
000790  a32d557d          DCB      0xa3,0x2d,0x55,0x7d
000794  a083dfdf          DCB      0xa0,0x83,0xdf,0xdf
000798  dfb591a0          DCB      0xdf,0xb5,0x91,0xa0
00079c  f629d9fb          DCB      0xf6,0x29,0xd9,0xfb
0007a0  d8a0fc29          DCB      0xd8,0xa0,0xfc,0x29
0007a4  d9fad8a0          DCB      0xd9,0xfa,0xd8,0xa0
0007a8  d051d9f8          DCB      0xd0,0x51,0xd9,0xf8
0007ac  d8fc51d9          DCB      0xd8,0xfc,0x51,0xd9
0007b0  f9d879d9          DCB      0xf9,0xd8,0x79,0xd9
0007b4  fbd8a0d0          DCB      0xfb,0xd8,0xa0,0xd0
0007b8  fc79d9fa          DCB      0xfc,0x79,0xd9,0xfa
0007bc  d8a1f9f9          DCB      0xd8,0xa1,0xf9,0xf9
0007c0  f9f9f9a0          DCB      0xf9,0xf9,0xf9,0xa0
0007c4  dadfdfdf          DCB      0xda,0xdf,0xdf,0xdf
0007c8  d8a1f8f8          DCB      0xd8,0xa1,0xf8,0xf8
0007cc  f8f8f8ac          DCB      0xf8,0xf8,0xf8,0xac
0007d0  def8adde          DCB      0xde,0xf8,0xad,0xde
0007d4  8393ac2c          DCB      0x83,0x93,0xac,0x2c
0007d8  547cf1a8          DCB      0x54,0x7c,0xf1,0xa8
0007dc  dfdfdff6          DCB      0xdf,0xdf,0xdf,0xf6
0007e0  9d2cdaa0          DCB      0x9d,0x2c,0xda,0xa0
0007e4  dfd9fadb          DCB      0xdf,0xd9,0xfa,0xdb
0007e8  2df8d8a8          DCB      0x2d,0xf8,0xd8,0xa8
0007ec  50daa0d0          DCB      0x50,0xda,0xa0,0xd0
0007f0  ded9d0f8          DCB      0xde,0xd9,0xd0,0xf8
0007f4  f8f8db55          DCB      0xf8,0xf8,0xdb,0x55
0007f8  f8d8a878          DCB      0xf8,0xd8,0xa8,0x78
0007fc  daa0d0df          DCB      0xda,0xa0,0xd0,0xdf
000800  d9d0faf8          DCB      0xd9,0xd0,0xfa,0xf8
000804  f8f8f8db          DCB      0xf8,0xf8,0xf8,0xdb
000808  7df8d89c          DCB      0x7d,0xf8,0xd8,0x9c
00080c  a88cf530          DCB      0xa8,0x8c,0xf5,0x30
000810  db38d9d0          DCB      0xdb,0x38,0xd9,0xd0
000814  dedfa0d0          DCB      0xde,0xdf,0xa0,0xd0
000818  dedfd8a8          DCB      0xde,0xdf,0xd8,0xa8
00081c  48db58d9          DCB      0x48,0xdb,0x58,0xd9
000820  dfd0dea0          DCB      0xdf,0xd0,0xde,0xa0
000824  dfd0ded8          DCB      0xdf,0xd0,0xde,0xd8
000828  a868db70          DCB      0xa8,0x68,0xdb,0x70
00082c  d9dfdfa0          DCB      0xd9,0xdf,0xdf,0xa0
000830  dfdfd8f1          DCB      0xdf,0xdf,0xd8,0xf1
000834  a888902c          DCB      0xa8,0x88,0x90,0x2c
000838  547c98a8          DCB      0x54,0x7c,0x98,0xa8
00083c  d05c38d1          DCB      0xd0,0x5c,0x38,0xd1
000840  daf2ae8c          DCB      0xda,0xf2,0xae,0x8c
000844  dff9d8b0          DCB      0xdf,0xf9,0xd8,0xb0
000848  87a8c1c1          DCB      0x87,0xa8,0xc1,0xc1
00084c  b188a8c6          DCB      0xb1,0x88,0xa8,0xc6
000850  f9f9da36          DCB      0xf9,0xf9,0xda,0x36
000854  d8a8f9da          DCB      0xd8,0xa8,0xf9,0xda
000858  36d8a8f9          DCB      0x36,0xd8,0xa8,0xf9
00085c  da36d8a8          DCB      0xda,0x36,0xd8,0xa8
000860  f9da36d8          DCB      0xf9,0xda,0x36,0xd8
000864  a8f9da36          DCB      0xa8,0xf9,0xda,0x36
000868  d8f78d9d          DCB      0xd8,0xf7,0x8d,0x9d
00086c  adf818da          DCB      0xad,0xf8,0x18,0xda
000870  f2aedfd8          DCB      0xf2,0xae,0xdf,0xd8
000874  f7adfa30          DCB      0xf7,0xad,0xfa,0x30
000878  d9a4def9          DCB      0xd9,0xa4,0xde,0xf9
00087c  d8f2aede          DCB      0xd8,0xf2,0xae,0xde
000880  faf983a7          DCB      0xfa,0xf9,0x83,0xa7
000884  d9c3c5c7          DCB      0xd9,0xc3,0xc5,0xc7
000888  f1889ba7          DCB      0xf1,0x88,0x9b,0xa7
00088c  7aadf7de          DCB      0x7a,0xad,0xf7,0xde
000890  dfa4f884          DCB      0xdf,0xa4,0xf8,0x84
000894  9408a797          DCB      0x94,0x08,0xa7,0x97
000898  f300aef2          DCB      0xf3,0x00,0xae,0xf2
00089c  9819a488          DCB      0x98,0x19,0xa4,0x88
0008a0  c6a39488          DCB      0xc6,0xa3,0x94,0x88
0008a4  f632dff2          DCB      0xf6,0x32,0xdf,0xf2
0008a8  8393db09          DCB      0x83,0x93,0xdb,0x09
0008ac  d9f2aadf          DCB      0xd9,0xf2,0xaa,0xdf
0008b0  d8d8aef8          DCB      0xd8,0xd8,0xae,0xf8
0008b4  f9d1daf3          DCB      0xf9,0xd1,0xda,0xf3
0008b8  a4dea7f1          DCB      0xa4,0xde,0xa7,0xf1
0008bc  889b7ad8          DCB      0x88,0x9b,0x7a,0xd8
0008c0  f38494ae          DCB      0xf3,0x84,0x94,0xae
0008c4  19f9daaa          DCB      0x19,0xf9,0xda,0xaa
0008c8  f1dfd8a8          DCB      0xf1,0xdf,0xd8,0xa8
0008cc  81c0c3c5          DCB      0x81,0xc0,0xc3,0xc5
0008d0  c7a39283          DCB      0xc7,0xa3,0x92,0x83
0008d4  f628adde          DCB      0xf6,0x28,0xad,0xde
0008d8  d9f8d8a3          DCB      0xd9,0xf8,0xd8,0xa3
0008dc  50add9f8          DCB      0x50,0xad,0xd9,0xf8
0008e0  d8a378ad          DCB      0xd8,0xa3,0x78,0xad
0008e4  d9f8d8f8          DCB      0xd9,0xf8,0xd8,0xf8
0008e8  f9d1a1da          DCB      0xf9,0xd1,0xa1,0xda
0008ec  dec3c5c7          DCB      0xde,0xc3,0xc5,0xc7
0008f0  d8a18194          DCB      0xd8,0xa1,0x81,0x94
0008f4  f818f2b0          DCB      0xf8,0x18,0xf2,0xb0
0008f8  89acc3c5          DCB      0x89,0xac,0xc3,0xc5
0008fc  c7f1d8b8          DCB      0xc7,0xf1,0xd8,0xb8
000900  b4b09786          DCB      0xb4,0xb0,0x97,0x86
000904  a8319b06          DCB      0xa8,0x31,0x9b,0x06
000908  9907ab97          DCB      0x99,0x07,0xab,0x97
00090c  28889bf0          DCB      0x28,0x88,0x9b,0xf0
000910  0c201440          DCB      0x0c,0x20,0x14,0x40
000914  b0b4b8f0          DCB      0xb0,0xb4,0xb8,0xf0
000918  a88a9a28          DCB      0xa8,0x8a,0x9a,0x28
00091c  5078b79b          DCB      0x50,0x78,0xb7,0x9b
000920  a8295179          DCB      0xa8,0x29,0x51,0x79
000924  24705944          DCB      0x24,0x70,0x59,0x44
000928  69386448          DCB      0x69,0x38,0x64,0x48
00092c  31f1bbab          DCB      0x31,0xf1,0xbb,0xab
000930  88002c54          DCB      0x88,0x00,0x2c,0x54
000934  7cf0b38b          DCB      0x7c,0xf0,0xb3,0x8b
000938  b8a80428          DCB      0xb8,0xa8,0x04,0x28
00093c  5078f1b0          DCB      0x50,0x78,0xf1,0xb0
000940  88b49726          DCB      0x88,0xb4,0x97,0x26
000944  a85998bb          DCB      0xa8,0x59,0x98,0xbb
000948  abb38b02          DCB      0xab,0xb3,0x8b,0x02
00094c  264666b0          DCB      0x26,0x46,0x66,0xb0
000950  b8f08a9c          DCB      0xb8,0xf0,0x8a,0x9c
000954  a8295179          DCB      0xa8,0x29,0x51,0x79
000958  8b295179          DCB      0x8b,0x29,0x51,0x79
00095c  8a247059          DCB      0x8a,0x24,0x70,0x59
000960  8b205871          DCB      0x8b,0x20,0x58,0x71
000964  8a446938          DCB      0x8a,0x44,0x69,0x38
000968  8b394068          DCB      0x8b,0x39,0x40,0x68
00096c  8a644831          DCB      0x8a,0x64,0x48,0x31
000970  8b304960          DCB      0x8b,0x30,0x49,0x60
000974  88f1ac00          DCB      0x88,0xf1,0xac,0x00
000978  2c547cf0          DCB      0x2c,0x54,0x7c,0xf0
00097c  8ca80428          DCB      0x8c,0xa8,0x04,0x28
000980  5078f188          DCB      0x50,0x78,0xf1,0x88
000984  9726a859          DCB      0x97,0x26,0xa8,0x59
000988  98ac8c02          DCB      0x98,0xac,0x8c,0x02
00098c  264666f0          DCB      0x26,0x46,0x66,0xf0
000990  899ca829          DCB      0x89,0x9c,0xa8,0x29
000994  51792470          DCB      0x51,0x79,0x24,0x70
000998  59446938          DCB      0x59,0x44,0x69,0x38
00099c  644831a9          DCB      0x64,0x48,0x31,0xa9
0009a0  88092059          DCB      0x88,0x09,0x20,0x59
0009a4  70ab1138          DCB      0x70,0xab,0x11,0x38
0009a8  4069a819          DCB      0x40,0x69,0xa8,0x19
0009ac  3148608c          DCB      0x31,0x48,0x60,0x8c
0009b0  a83c415c          DCB      0xa8,0x3c,0x41,0x5c
0009b4  207c00f1          DCB      0x20,0x7c,0x00,0xf1
0009b8  87981986          DCB      0x87,0x98,0x19,0x86
0009bc  a86e767e          DCB      0xa8,0x6e,0x76,0x7e
0009c0  a999882d          DCB      0xa9,0x99,0x88,0x2d
0009c4  557dd8b1          DCB      0x55,0x7d,0xd8,0xb1
0009c8  b5b9a3df          DCB      0xb5,0xb9,0xa3,0xdf
0009cc  dfdfaed0          DCB      0xdf,0xdf,0xae,0xd0
0009d0  dfaad0de          DCB      0xdf,0xaa,0xd0,0xde
0009d4  f2abf8f9          DCB      0xf2,0xab,0xf8,0xf9
0009d8  d9b087c4          DCB      0xd9,0xb0,0x87,0xc4
0009dc  aaf1dfdf          DCB      0xaa,0xf1,0xdf,0xdf
0009e0  bbafdfdf          DCB      0xbb,0xaf,0xdf,0xdf
0009e4  b9d8b1f1          DCB      0xb9,0xd8,0xb1,0xf1
0009e8  a3978e60          DCB      0xa3,0x97,0x8e,0x60
0009ec  dfb084f2          DCB      0xdf,0xb0,0x84,0xf2
0009f0  c8f8f9d9          DCB      0xc8,0xf8,0xf9,0xd9
0009f4  ded89385          DCB      0xde,0xd8,0x93,0x85
0009f8  f14ab183          DCB      0xf1,0x4a,0xb1,0x83
0009fc  a308b583          DCB      0xa3,0x08,0xb5,0x83
000a00  9a0810b7          DCB      0x9a,0x08,0x10,0xb7
000a04  9f10d8f1          DCB      0x9f,0x10,0xd8,0xf1
000a08  b0baaeb0          DCB      0xb0,0xba,0xae,0xb0
000a0c  8ac2b2b6          DCB      0x8a,0xc2,0xb2,0xb6
000a10  8e9ef1fb          DCB      0x8e,0x9e,0xf1,0xfb
000a14  d9f41dd8          DCB      0xd9,0xf4,0x1d,0xd8
000a18  f9d90cf1          DCB      0xf9,0xd9,0x0c,0xf1
000a1c  d8f8f8ad          DCB      0xd8,0xf8,0xf8,0xad
000a20  61d9aefb          DCB      0x61,0xd9,0xae,0xfb
000a24  d8f40cf1          DCB      0xd8,0xf4,0x0c,0xf1
000a28  d8f8f8ad          DCB      0xd8,0xf8,0xf8,0xad
000a2c  19d9aefb          DCB      0x19,0xd9,0xae,0xfb
000a30  dfd8f416          DCB      0xdf,0xd8,0xf4,0x16
000a34  f1d8f8ad          DCB      0xf1,0xd8,0xf8,0xad
000a38  8d61d9f4          DCB      0x8d,0x61,0xd9,0xf4
000a3c  f4acf59c          DCB      0xf4,0xac,0xf5,0x9c
000a40  9c8ddf2b          DCB      0x9c,0x8d,0xdf,0x2b
000a44  bab6aefa          DCB      0xba,0xb6,0xae,0xfa
000a48  f8f40bd8          DCB      0xf8,0xf4,0x0b,0xd8
000a4c  f1aed0f8          DCB      0xf1,0xae,0xd0,0xf8
000a50  ad51daae          DCB      0xad,0x51,0xda,0xae
000a54  faf8f1d8          DCB      0xfa,0xf8,0xf1,0xd8
000a58  b9b1b6a3          DCB      0xb9,0xb1,0xb6,0xa3
000a5c  839c08b9          DCB      0x83,0x9c,0x08,0xb9
000a60  b1839ab5          DCB      0xb1,0x83,0x9a,0xb5
000a64  aac0fd30          DCB      0xaa,0xc0,0xfd,0x30
000a68  83b79f10          DCB      0x83,0xb7,0x9f,0x10
000a6c  b58b93f2          DCB      0xb5,0x8b,0x93,0xf2
000a70  0202d1ab          DCB      0x02,0x02,0xd1,0xab
000a74  daded8f1          DCB      0xda,0xde,0xd8,0xf1
000a78  b080baab          DCB      0xb0,0x80,0xba,0xab
000a7c  c0c3b284          DCB      0xc0,0xc3,0xb2,0x84
000a80  c1c3d8b1          DCB      0xc1,0xc3,0xd8,0xb1
000a84  b9f38ba3          DCB      0xb9,0xf3,0x8b,0xa3
000a88  91b609b4          DCB      0x91,0xb6,0x09,0xb4
000a8c  d9abdeb0          DCB      0xd9,0xab,0xde,0xb0
000a90  879cb9a3          DCB      0x87,0x9c,0xb9,0xa3
000a94  ddf1b38b          DCB      0xdd,0xf1,0xb3,0x8b
000a98  8b8b8b8b          DCB      0x8b,0x8b,0x8b,0x8b
000a9c  b087a3a3          DCB      0xb0,0x87,0xa3,0xa3
000aa0  a3a3b28b          DCB      0xa3,0xa3,0xb2,0x8b
000aa4  b69bf2a3          DCB      0xb6,0x9b,0xf2,0xa3
000aa8  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000aac  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ab0  a3f1b087          DCB      0xa3,0xf1,0xb0,0x87
000ab4  b59aa3f3          DCB      0xb5,0x9a,0xa3,0xf3
000ab8  9ba3a3dc          DCB      0x9b,0xa3,0xa3,0xdc
000abc  baacdfb9          DCB      0xba,0xac,0xdf,0xb9
000ac0  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ac4  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ac8  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000acc  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ad0  d8d8d8bb          DCB      0xd8,0xd8,0xd8,0xbb
000ad4  b3b7f1aa          DCB      0xb3,0xb7,0xf1,0xaa
000ad8  f9daffd9          DCB      0xf9,0xda,0xff,0xd9
000adc  809aaa28          DCB      0x80,0x9a,0xaa,0x28
000ae0  b48098a7          DCB      0xb4,0x80,0x98,0xa7
000ae4  20b79787          DCB      0x20,0xb7,0x97,0x87
000ae8  a86688f0          DCB      0xa8,0x66,0x88,0xf0
000aec  7951f190          DCB      0x79,0x51,0xf1,0x90
000af0  2c870ca7          DCB      0x2c,0x87,0x0c,0xa7
000af4  81976293          DCB      0x81,0x97,0x62,0x93
000af8  f0717160          DCB      0xf0,0x71,0x71,0x60
000afc  85940129          DCB      0x85,0x94,0x01,0x29
000b00  517990a5          DCB      0x51,0x79,0x90,0xa5
000b04  f1284c6c          DCB      0xf1,0x28,0x4c,0x6c
000b08  870c9518          DCB      0x87,0x0c,0x95,0x18
000b0c  8578a383          DCB      0x85,0x78,0xa3,0x83
000b10  90284c6c          DCB      0x90,0x28,0x4c,0x6c
000b14  886cd8f3          DCB      0x88,0x6c,0xd8,0xf3
000b18  a28200f2          DCB      0xa2,0x82,0x00,0xf2
000b1c  10a89219          DCB      0x10,0xa8,0x92,0x19
000b20  80a2f2d9          DCB      0x80,0xa2,0xf2,0xd9
000b24  26d8f188          DCB      0x26,0xd8,0xf1,0x88
000b28  a84dd948          DCB      0xa8,0x4d,0xd9,0x48
000b2c  d896a839          DCB      0xd8,0x96,0xa8,0x39
000b30  80d93cd8          DCB      0x80,0xd9,0x3c,0xd8
000b34  9580a839          DCB      0x95,0x80,0xa8,0x39
000b38  a68698d9          DCB      0xa6,0x86,0x98,0xd9
000b3c  2cda87a7          DCB      0x2c,0xda,0x87,0xa7
000b40  2cd8a889          DCB      0x2c,0xd8,0xa8,0x89
000b44  9519a980          DCB      0x95,0x19,0xa9,0x80
000b48  d938d8a8          DCB      0xd9,0x38,0xd8,0xa8
000b4c  8939a980          DCB      0x89,0x39,0xa9,0x80
000b50  da3cd8a8          DCB      0xda,0x3c,0xd8,0xa8
000b54  2ea83990          DCB      0x2e,0xa8,0x39,0x90
000b58  d90cd8a8          DCB      0xd9,0x0c,0xd8,0xa8
000b5c  953198d9          DCB      0x95,0x31,0x98,0xd9
000b60  0cd8a809          DCB      0x0c,0xd8,0xa8,0x09
000b64  d9ffd801          DCB      0xd9,0xff,0xd8,0x01
000b68  daffd895          DCB      0xda,0xff,0xd8,0x95
000b6c  39a9da26          DCB      0x39,0xa9,0xda,0x26
000b70  ffd890a8          DCB      0xff,0xd8,0x90,0xa8
000b74  0d8999a8          DCB      0x0d,0x89,0x99,0xa8
000b78  10809821          DCB      0x10,0x80,0x98,0x21
000b7c  da2ed889          DCB      0xda,0x2e,0xd8,0x89
000b80  99a83180          DCB      0x99,0xa8,0x31,0x80
000b84  da2ed8a8          DCB      0xda,0x2e,0xd8,0xa8
000b88  86963180          DCB      0x86,0x96,0x31,0x80
000b8c  da2ed8a8          DCB      0xda,0x2e,0xd8,0xa8
000b90  873180da          DCB      0x87,0x31,0x80,0xda
000b94  2ed8a882          DCB      0x2e,0xd8,0xa8,0x82
000b98  92f34180          DCB      0x92,0xf3,0x41,0x80
000b9c  f1d92ed8          DCB      0xf1,0xd9,0x2e,0xd8
000ba0  a882f319          DCB      0xa8,0x82,0xf3,0x19
000ba4  80f1d92e          DCB      0x80,0xf1,0xd9,0x2e
000ba8  d882acf3          DCB      0xd8,0x82,0xac,0xf3
000bac  c0a28022          DCB      0xc0,0xa2,0x80,0x22
000bb0  f1a62ea7          DCB      0xf1,0xa6,0x2e,0xa7
000bb4  2ea92298          DCB      0x2e,0xa9,0x22,0x98
000bb8  a829daac          DCB      0xa8,0x29,0xda,0xac
000bbc  deffd8a2          DCB      0xde,0xff,0xd8,0xa2
000bc0  f22af1a9          DCB      0xf2,0x2a,0xf1,0xa9
000bc4  2e8292a8          DCB      0x2e,0x82,0x92,0xa8
000bc8  f23180a6          DCB      0xf2,0x31,0x80,0xa6
000bcc  96f1d900          DCB      0x96,0xf1,0xd9,0x00
000bd0  ac8c9c0c          DCB      0xac,0x8c,0x9c,0x0c
000bd4  30acded0          DCB      0x30,0xac,0xde,0xd0
000bd8  deffd88c          DCB      0xde,0xff,0xd8,0x8c
000bdc  9cacd010          DCB      0x9c,0xac,0xd0,0x10
000be0  acde8092          DCB      0xac,0xde,0x80,0x92
000be4  a2f24c82          DCB      0xa2,0xf2,0x4c,0x82
000be8  a8f1caf2          DCB      0xa8,0xf1,0xca,0xf2
000bec  35f19688          DCB      0x35,0xf1,0x96,0x88
000bf0  a6d900d8          DCB      0xa6,0xd9,0x00,0xd8
000bf4  f1ff              DCB      0xf1,0xff

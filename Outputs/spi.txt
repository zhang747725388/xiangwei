; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\spi.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\spi.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP\GPS -I..\BSP\Sim900A -I..\BSP -I..\BSP\IWDG -I..\BSP\BlueTooth -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\BSP\Adxl345 -I..\BSP\TL718 -I..\BSP\PAM8403 -I..\BSP\W25X16 -I..\BSP\USB -I..\App\Debug -I..\App\SelfCheck -I..\App\GPSTask -I..\App\OBD -I..\App\Mems -I..\App\Voltage -I..\App\LKClient -I..\App\Paramlist -I..\App\ATC30 -I..\App -I..\BSP\mpu6050 -I..\App\mid-proc -I..\App\mpu6050Task -I..\BSP\dmp -I..\BSP\Bluetooth -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\spi.crf ..\BSP\Basic\spi.c]
                          THUMB

                          AREA ||i.SPI_Initialize||, CODE, READONLY, ALIGN=2

                  SPI_Initialize PROC
;;;26     ----------------------------------------------------------------------------------*/
;;;27     void SPI_Initialize(u8 spi_ch)
000000  b510              PUSH     {r4,lr}
;;;28     {
000002  4604              MOV      r4,r0
;;;29     	if ( spi_ch == SPI_CH_2 )
000004  2c02              CMP      r4,#2
000006  d14c              BNE      |L1.162|
;;;30     	{	 
;;;31     		RCC->APB2ENR |= 1 << 3;       	// PORTB时钟使能 	 
000008  4858              LDR      r0,|L1.364|
00000a  6980              LDR      r0,[r0,#0x18]
00000c  f0400008          ORR      r0,r0,#8
000010  4956              LDR      r1,|L1.364|
000012  6188              STR      r0,[r1,#0x18]
;;;32     		RCC->APB1ENR |= 1 << 14;      	// SPI2时钟使能 
000014  4608              MOV      r0,r1
000016  69c0              LDR      r0,[r0,#0x1c]
000018  f4404080          ORR      r0,r0,#0x4000
00001c  61c8              STR      r0,[r1,#0x1c]
;;;33     			   
;;;34     		// 这里只针对SPI口初始化
;;;35     		GPIOB->CRH &= 0x000FFFFF; 
00001e  4854              LDR      r0,|L1.368|
000020  6800              LDR      r0,[r0,#0]
000022  f3c00013          UBFX     r0,r0,#0,#20
000026  4952              LDR      r1,|L1.368|
000028  6008              STR      r0,[r1,#0]
;;;36     		GPIOB->CRH |= 0xBBB00000;		// PB13.14.15复用 	    
00002a  4608              MOV      r0,r1
00002c  6800              LDR      r0,[r0,#0]
00002e  4951              LDR      r1,|L1.372|
000030  4308              ORRS     r0,r0,r1
000032  494f              LDR      r1,|L1.368|
000034  6008              STR      r0,[r1,#0]
;;;37     		GPIOB->ODR |= 0x7<<13;    		// PB13.14.15上拉
000036  484e              LDR      r0,|L1.368|
000038  3008              ADDS     r0,r0,#8
00003a  6800              LDR      r0,[r0,#0]
00003c  f4404060          ORR      r0,r0,#0xe000
000040  494b              LDR      r1,|L1.368|
000042  3108              ADDS     r1,r1,#8
000044  6008              STR      r0,[r1,#0]
;;;38     			
;;;39     		SPI2->CR1 |= 0<<10;				// 全双工模式	
000046  484c              LDR      r0,|L1.376|
000048  8800              LDRH     r0,[r0,#0]
00004a  494b              LDR      r1,|L1.376|
00004c  8008              STRH     r0,[r1,#0]
;;;40     		SPI2->CR1 |= 1<<9; 				// 软件nss管理
00004e  4608              MOV      r0,r1
000050  8800              LDRH     r0,[r0,#0]
000052  f4407000          ORR      r0,r0,#0x200
000056  8008              STRH     r0,[r1,#0]
;;;41     		SPI2->CR1 |= 1<<8;  
000058  4608              MOV      r0,r1
00005a  8800              LDRH     r0,[r0,#0]
00005c  f4407080          ORR      r0,r0,#0x100
000060  8008              STRH     r0,[r1,#0]
;;;42     	
;;;43     		SPI2->CR1 |= 1<<2; 				// SPI主机
000062  4608              MOV      r0,r1
000064  8800              LDRH     r0,[r0,#0]
000066  f0400004          ORR      r0,r0,#4
00006a  8008              STRH     r0,[r1,#0]
;;;44     		SPI2->CR1 |= 0<<11;				// 8bit数据格式	
00006c  4608              MOV      r0,r1
00006e  8800              LDRH     r0,[r0,#0]
000070  8008              STRH     r0,[r1,#0]
;;;45     		SPI2->CR1 |= 1<<1; 				// 空闲模式下SCK为1 CPOL=1
000072  4608              MOV      r0,r1
000074  8800              LDRH     r0,[r0,#0]
000076  f0400002          ORR      r0,r0,#2
00007a  8008              STRH     r0,[r1,#0]
;;;46     		SPI2->CR1 |= 1<<0; 				// 数据采样从第二个时间边沿开始,CPHA=1  
00007c  4608              MOV      r0,r1
00007e  8800              LDRH     r0,[r0,#0]
000080  f0400001          ORR      r0,r0,#1
000084  8008              STRH     r0,[r1,#0]
;;;47     		SPI2->CR1 |= 7<<3; 				// Fsck=Fcpu/256
000086  4608              MOV      r0,r1
000088  8800              LDRH     r0,[r0,#0]
00008a  f0400038          ORR      r0,r0,#0x38
00008e  8008              STRH     r0,[r1,#0]
;;;48     		SPI2->CR1 |= 0<<7; 				// MSBfirst   
000090  4608              MOV      r0,r1
000092  8800              LDRH     r0,[r0,#0]
000094  8008              STRH     r0,[r1,#0]
;;;49     		SPI2->CR1 |= 1<<6; 				// SPI设备使能
000096  4608              MOV      r0,r1
000098  8800              LDRH     r0,[r0,#0]
00009a  f0400040          ORR      r0,r0,#0x40
00009e  8008              STRH     r0,[r1,#0]
0000a0  e05a              B        |L1.344|
                  |L1.162|
;;;50     	}
;;;51     	else if ( spi_ch == SPI_CH_3 )
0000a2  2c03              CMP      r4,#3
0000a4  d158              BNE      |L1.344|
;;;52     	{
;;;53     		/* SPI3需要重新映射端口 */
;;;54     		RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
0000a6  4831              LDR      r0,|L1.364|
0000a8  6980              LDR      r0,[r0,#0x18]
0000aa  f0400001          ORR      r0,r0,#1
0000ae  492f              LDR      r1,|L1.364|
0000b0  6188              STR      r0,[r1,#0x18]
;;;55     		GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
0000b2  2101              MOVS     r1,#1
0000b4  4831              LDR      r0,|L1.380|
0000b6  f7fffffe          BL       GPIO_PinRemapConfig
;;;56     		 
;;;57     		RCC->APB2ENR |= 1<<3;       			// PORTB时钟使能 	 
0000ba  482c              LDR      r0,|L1.364|
0000bc  6980              LDR      r0,[r0,#0x18]
0000be  f0400008          ORR      r0,r0,#8
0000c2  492a              LDR      r1,|L1.364|
0000c4  6188              STR      r0,[r1,#0x18]
;;;58     		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;     // SPI3时钟使能 
0000c6  4608              MOV      r0,r1
0000c8  69c0              LDR      r0,[r0,#0x1c]
0000ca  f4404000          ORR      r0,r0,#0x8000
0000ce  61c8              STR      r0,[r1,#0x1c]
;;;59     			   
;;;60     		//这里只针对SPI口初始化
;;;61     		GPIOB->CRL &= 0xFF000FFF; 
0000d0  4827              LDR      r0,|L1.368|
0000d2  1f00              SUBS     r0,r0,#4
0000d4  6800              LDR      r0,[r0,#0]
0000d6  492a              LDR      r1,|L1.384|
0000d8  4008              ANDS     r0,r0,r1
0000da  4925              LDR      r1,|L1.368|
0000dc  1f09              SUBS     r1,r1,#4
0000de  6008              STR      r0,[r1,#0]
;;;62     		GPIOB->CRL |= 0x00BBB000;	// PB3.4.5复用 	    
0000e0  4608              MOV      r0,r1
0000e2  6800              LDR      r0,[r0,#0]
0000e4  4927              LDR      r1,|L1.388|
0000e6  4308              ORRS     r0,r0,r1
0000e8  4921              LDR      r1,|L1.368|
0000ea  1f09              SUBS     r1,r1,#4
0000ec  6008              STR      r0,[r1,#0]
;;;63     		GPIOB->ODR |= 0x7<<3;    	// PB3.4.5上拉
0000ee  4820              LDR      r0,|L1.368|
0000f0  3008              ADDS     r0,r0,#8
0000f2  6800              LDR      r0,[r0,#0]
0000f4  f0400038          ORR      r0,r0,#0x38
0000f8  491d              LDR      r1,|L1.368|
0000fa  3108              ADDS     r1,r1,#8
0000fc  6008              STR      r0,[r1,#0]
;;;64     			
;;;65     		SPI3->CR1 |= 0<<10;			// 全双工模式	
0000fe  4822              LDR      r0,|L1.392|
000100  8800              LDRH     r0,[r0,#0]
000102  4921              LDR      r1,|L1.392|
000104  8008              STRH     r0,[r1,#0]
;;;66     		SPI3->CR1 |= 1<<9; 			// 软件nss管理
000106  4608              MOV      r0,r1
000108  8800              LDRH     r0,[r0,#0]
00010a  f4407000          ORR      r0,r0,#0x200
00010e  8008              STRH     r0,[r1,#0]
;;;67     		SPI3->CR1 |= 1<<8;  
000110  4608              MOV      r0,r1
000112  8800              LDRH     r0,[r0,#0]
000114  f4407080          ORR      r0,r0,#0x100
000118  8008              STRH     r0,[r1,#0]
;;;68     
;;;69     		SPI3->CR1 |= 1<<2; 			// SPI主机
00011a  4608              MOV      r0,r1
00011c  8800              LDRH     r0,[r0,#0]
00011e  f0400004          ORR      r0,r0,#4
000122  8008              STRH     r0,[r1,#0]
;;;70     		SPI3->CR1 |= 0<<11;			// 8bit数据格式	
000124  4608              MOV      r0,r1
000126  8800              LDRH     r0,[r0,#0]
000128  8008              STRH     r0,[r1,#0]
;;;71     		SPI3->CR1 |= 1<<1; 			// 空闲模式下SCK为1 CPOL=1
00012a  4608              MOV      r0,r1
00012c  8800              LDRH     r0,[r0,#0]
00012e  f0400002          ORR      r0,r0,#2
000132  8008              STRH     r0,[r1,#0]
;;;72     		SPI3->CR1 |= 1<<0; 			// 数据采样从第二个时间边沿开始,CPHA=1  
000134  4608              MOV      r0,r1
000136  8800              LDRH     r0,[r0,#0]
000138  f0400001          ORR      r0,r0,#1
00013c  8008              STRH     r0,[r1,#0]
;;;73     		SPI3->CR1 |= 7<<3; 			// Fsck=Fcpu/256
00013e  4608              MOV      r0,r1
000140  8800              LDRH     r0,[r0,#0]
000142  f0400038          ORR      r0,r0,#0x38
000146  8008              STRH     r0,[r1,#0]
;;;74     		SPI3->CR1 |= 0<<7; 			// MSBfirst   
000148  4608              MOV      r0,r1
00014a  8800              LDRH     r0,[r0,#0]
00014c  8008              STRH     r0,[r1,#0]
;;;75     		SPI3->CR1 |= 1<<6; 			// SPI设备使能	
00014e  4608              MOV      r0,r1
000150  8800              LDRH     r0,[r0,#0]
000152  f0400040          ORR      r0,r0,#0x40
000156  8008              STRH     r0,[r1,#0]
                  |L1.344|
;;;76     	}
;;;77     
;;;78     	SPI_SetSpeed(spi_ch, 16);
000158  2110              MOVS     r1,#0x10
00015a  4620              MOV      r0,r4
00015c  f7fffffe          BL       SPI_SetSpeed
;;;79     	SPI_ReadWriteByte(spi_ch, 0xff);	// 启动传输	
000160  21ff              MOVS     r1,#0xff
000162  4620              MOV      r0,r4
000164  f7fffffe          BL       SPI_ReadWriteByte
;;;80     } 
000168  bd10              POP      {r4,pc}
;;;81     
                          ENDP

00016a  0000              DCW      0x0000
                  |L1.364|
                          DCD      0x40021000
                  |L1.368|
                          DCD      0x40010c04
                  |L1.372|
                          DCD      0xbbb00000
                  |L1.376|
                          DCD      0x40003800
                  |L1.380|
                          DCD      0x00300200
                  |L1.384|
                          DCD      0xff000fff
                  |L1.388|
                          DCD      0x00bbb000
                  |L1.392|
                          DCD      0x40003c00

                          AREA ||i.SPI_ReadWriteByte||, CODE, READONLY, ALIGN=2

                  SPI_ReadWriteByte PROC
;;;168    ----------------------------------------------------------------------------------*/ 
;;;169    u8 SPI_ReadWriteByte(u8 spi_ch, u8 TxData)
000000  b508              PUSH     {r3,lr}
;;;170    {		
000002  4602              MOV      r2,r0
;;;171    	volatile u8 retry = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;172    
;;;173    	if ( spi_ch == SPI_CH_2 )
000008  2a02              CMP      r2,#2
00000a  d12b              BNE      |L2.100|
;;;174    	{	
;;;175    		while ((SPI2->SR&1<<1) == 0)	// 等待发送区空	
00000c  e00a              B        |L2.36|
                  |L2.14|
;;;176    		{
;;;177    			retry++;
00000e  f89d0000          LDRB     r0,[sp,#0]
000012  1c40              ADDS     r0,r0,#1
000014  b2c0              UXTB     r0,r0
000016  9000              STR      r0,[sp,#0]
;;;178    			if ( retry > 200 )
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  28c8              CMP      r0,#0xc8
00001e  dd01              BLE      |L2.36|
;;;179    			{
;;;180    				return 0;
000020  2000              MOVS     r0,#0
                  |L2.34|
;;;181    			}
;;;182    		}			  
;;;183    		SPI2->DR = TxData;	 	 		// 发送一个byte 
;;;184    		
;;;185    		retry=0;
;;;186    		while ((SPI2->SR&1<<0) == 0) 	// 等待接收完一个byte  
;;;187    		{
;;;188    			retry++;
;;;189    			if ( retry > 200 )
;;;190    			{
;;;191    				return 0;
;;;192    			}
;;;193    		}
;;;194    										
;;;195    		return SPI2->DR;          		// 返回收到的数据				
;;;196    	}
;;;197    	else if ( spi_ch == SPI_CH_3 )
;;;198    	{
;;;199    		while ((SPI3->SR & 1<<1) == 0)	// 等待发送区空	
;;;200    		{
;;;201    			retry++;
;;;202    			if ( retry > 200 )
;;;203    			{
;;;204    				return 0;
;;;205    			}
;;;206    		}			  
;;;207    		SPI3->DR = TxData;	 	 		// 发送一个byte 
;;;208    		
;;;209    		retry = 0;
;;;210    		while ((SPI3->SR & 1<<0) == 0) 		// 等待接收完一个byte  
;;;211    		{
;;;212    			retry++;
;;;213    			if ( retry > 200 )
;;;214    			{
;;;215    				return 0;
;;;216    			}
;;;217    		}	  						    
;;;218    		return SPI3->DR;          		// 返回收到的数据	
;;;219    	
;;;220    	}
;;;221    	else
;;;222    	{
;;;223    		return 0;
;;;224    	}
;;;225    
;;;226    }
000022  bd08              POP      {r3,pc}
                  |L2.36|
000024  4827              LDR      r0,|L2.196|
000026  8800              LDRH     r0,[r0,#0]            ;175
000028  f0100f02          TST      r0,#2                 ;175
00002c  d0ef              BEQ      |L2.14|
00002e  4825              LDR      r0,|L2.196|
000030  1d00              ADDS     r0,r0,#4              ;183
000032  8001              STRH     r1,[r0,#0]            ;183
000034  2000              MOVS     r0,#0                 ;185
000036  9000              STR      r0,[sp,#0]            ;185
000038  e00a              B        |L2.80|
                  |L2.58|
00003a  f89d0000          LDRB     r0,[sp,#0]            ;188
00003e  1c40              ADDS     r0,r0,#1              ;188
000040  b2c0              UXTB     r0,r0                 ;188
000042  9000              STR      r0,[sp,#0]            ;188
000044  f89d0000          LDRB     r0,[sp,#0]            ;189
000048  28c8              CMP      r0,#0xc8              ;189
00004a  dd01              BLE      |L2.80|
00004c  2000              MOVS     r0,#0                 ;191
00004e  e7e8              B        |L2.34|
                  |L2.80|
000050  481c              LDR      r0,|L2.196|
000052  8800              LDRH     r0,[r0,#0]            ;186
000054  f0100f01          TST      r0,#1                 ;186
000058  d0ef              BEQ      |L2.58|
00005a  481a              LDR      r0,|L2.196|
00005c  1d00              ADDS     r0,r0,#4              ;195
00005e  8800              LDRH     r0,[r0,#0]            ;195
000060  b2c0              UXTB     r0,r0                 ;195
000062  e7de              B        |L2.34|
                  |L2.100|
000064  2a03              CMP      r2,#3                 ;197
000066  d12b              BNE      |L2.192|
000068  e00a              B        |L2.128|
                  |L2.106|
00006a  f89d0000          LDRB     r0,[sp,#0]            ;201
00006e  1c40              ADDS     r0,r0,#1              ;201
000070  b2c0              UXTB     r0,r0                 ;201
000072  9000              STR      r0,[sp,#0]            ;201
000074  f89d0000          LDRB     r0,[sp,#0]            ;202
000078  28c8              CMP      r0,#0xc8              ;202
00007a  dd01              BLE      |L2.128|
00007c  2000              MOVS     r0,#0                 ;204
00007e  e7d0              B        |L2.34|
                  |L2.128|
000080  4811              LDR      r0,|L2.200|
000082  8800              LDRH     r0,[r0,#0]            ;199
000084  f0100f02          TST      r0,#2                 ;199
000088  d0ef              BEQ      |L2.106|
00008a  480f              LDR      r0,|L2.200|
00008c  1d00              ADDS     r0,r0,#4              ;207
00008e  8001              STRH     r1,[r0,#0]            ;207
000090  2000              MOVS     r0,#0                 ;209
000092  9000              STR      r0,[sp,#0]            ;209
000094  e00a              B        |L2.172|
                  |L2.150|
000096  f89d0000          LDRB     r0,[sp,#0]            ;212
00009a  1c40              ADDS     r0,r0,#1              ;212
00009c  b2c0              UXTB     r0,r0                 ;212
00009e  9000              STR      r0,[sp,#0]            ;212
0000a0  f89d0000          LDRB     r0,[sp,#0]            ;213
0000a4  28c8              CMP      r0,#0xc8              ;213
0000a6  dd01              BLE      |L2.172|
0000a8  2000              MOVS     r0,#0                 ;215
0000aa  e7ba              B        |L2.34|
                  |L2.172|
0000ac  4806              LDR      r0,|L2.200|
0000ae  8800              LDRH     r0,[r0,#0]            ;210
0000b0  f0100f01          TST      r0,#1                 ;210
0000b4  d0ef              BEQ      |L2.150|
0000b6  4804              LDR      r0,|L2.200|
0000b8  1d00              ADDS     r0,r0,#4              ;218
0000ba  8800              LDRH     r0,[r0,#0]            ;218
0000bc  b2c0              UXTB     r0,r0                 ;218
0000be  e7b0              B        |L2.34|
                  |L2.192|
0000c0  2000              MOVS     r0,#0                 ;223
0000c2  e7ae              B        |L2.34|
;;;227    
                          ENDP

                  |L2.196|
                          DCD      0x40003808
                  |L2.200|
                          DCD      0x40003c08

                          AREA ||i.SPI_SetSpeed||, CODE, READONLY, ALIGN=2

                  SPI_SetSpeed PROC
;;;96     ----------------------------------------------------------------------------------*/
;;;97     void SPI_SetSpeed(u8 spi_ch, u8 SpeedSet)
000000  2802              CMP      r0,#2
;;;98     {
;;;99     	if ( spi_ch == SPI_CH_2 )
000002  d133              BNE      |L3.108|
;;;100    	{
;;;101    		SPI2->CR1 &= 0xFFC7;			// Fsck=Fcpu/256
000004  4a34              LDR      r2,|L3.216|
000006  8812              LDRH     r2,[r2,#0]
000008  f64f73c7          MOV      r3,#0xffc7
00000c  401a              ANDS     r2,r2,r3
00000e  4b32              LDR      r3,|L3.216|
000010  801a              STRH     r2,[r3,#0]
;;;102    	
;;;103    		switch ( SpeedSet )
000012  2902              CMP      r1,#2
000014  d007              BEQ      |L3.38|
000016  2908              CMP      r1,#8
000018  d00a              BEQ      |L3.48|
00001a  2910              CMP      r1,#0x10
00001c  d00f              BEQ      |L3.62|
00001e  f5b17f80          CMP      r1,#0x100
000022  d11a              BNE      |L3.90|
000024  e012              B        |L3.76|
                  |L3.38|
;;;104    		{
;;;105    			case SPI_SPEED_2:
;;;106    				SPI2->CR1 |= 0<<3;		// Fsck=Fpclk/2=36Mhz
000026  4a2c              LDR      r2,|L3.216|
000028  8812              LDRH     r2,[r2,#0]
00002a  4b2b              LDR      r3,|L3.216|
00002c  801a              STRH     r2,[r3,#0]
;;;107    				break;
00002e  e015              B        |L3.92|
                  |L3.48|
;;;108    
;;;109    			case SPI_SPEED_8:
;;;110    				SPI2->CR1 |= 2<<3;		// Fsck=Fpclk/8=9Mhz
000030  4a29              LDR      r2,|L3.216|
000032  8812              LDRH     r2,[r2,#0]
000034  f0420210          ORR      r2,r2,#0x10
000038  4b27              LDR      r3,|L3.216|
00003a  801a              STRH     r2,[r3,#0]
;;;111    				break;
00003c  e00e              B        |L3.92|
                  |L3.62|
;;;112    
;;;113    			case SPI_SPEED_16:
;;;114    				SPI2->CR1 |= 3<<3;		// Fsck=Fpclk/16=4.5Mhz
00003e  4a26              LDR      r2,|L3.216|
000040  8812              LDRH     r2,[r2,#0]
000042  f0420218          ORR      r2,r2,#0x18
000046  4b24              LDR      r3,|L3.216|
000048  801a              STRH     r2,[r3,#0]
;;;115    				break;
00004a  e007              B        |L3.92|
                  |L3.76|
;;;116    
;;;117    			case SPI_SPEED_256:
;;;118    				SPI2->CR1 |= 7<<3;		// Fsck=Fpclk/256=281.25Khz 低速模式
00004c  4a22              LDR      r2,|L3.216|
00004e  8812              LDRH     r2,[r2,#0]
000050  f0420238          ORR      r2,r2,#0x38
000054  4b20              LDR      r3,|L3.216|
000056  801a              STRH     r2,[r3,#0]
;;;119    				break;
000058  e000              B        |L3.92|
                  |L3.90|
;;;120    
;;;121    			default :
;;;122    				break;	
00005a  bf00              NOP      
                  |L3.92|
00005c  bf00              NOP                            ;107
;;;123    		}
;;;124    	
;;;125    		SPI2->CR1 |= 1<<6; 				// SPI设备使能
00005e  4a1e              LDR      r2,|L3.216|
000060  8812              LDRH     r2,[r2,#0]
000062  f0420240          ORR      r2,r2,#0x40
000066  4b1c              LDR      r3,|L3.216|
000068  801a              STRH     r2,[r3,#0]
00006a  e034              B        |L3.214|
                  |L3.108|
;;;126    
;;;127    	}
;;;128    	else if ( spi_ch == SPI_CH_3 )
00006c  2803              CMP      r0,#3
00006e  d132              BNE      |L3.214|
;;;129    	{
;;;130    		SPI3->CR1 &= 0XFFC7;					// Fsck=Fcpu/256
000070  4a1a              LDR      r2,|L3.220|
000072  8812              LDRH     r2,[r2,#0]
000074  f64f73c7          MOV      r3,#0xffc7
000078  401a              ANDS     r2,r2,r3
00007a  4b18              LDR      r3,|L3.220|
00007c  801a              STRH     r2,[r3,#0]
;;;131    
;;;132    		switch ( SpeedSet )
00007e  2902              CMP      r1,#2
000080  d007              BEQ      |L3.146|
000082  2908              CMP      r1,#8
000084  d00a              BEQ      |L3.156|
000086  2910              CMP      r1,#0x10
000088  d00f              BEQ      |L3.170|
00008a  f5b17f80          CMP      r1,#0x100
00008e  d11a              BNE      |L3.198|
000090  e012              B        |L3.184|
                  |L3.146|
;;;133    		{
;;;134    			case SPI_SPEED_2:
;;;135    				SPI3->CR1 |= 0<<3;		// Fsck=Fpclk/2=36Mhz
000092  4a12              LDR      r2,|L3.220|
000094  8812              LDRH     r2,[r2,#0]
000096  4b11              LDR      r3,|L3.220|
000098  801a              STRH     r2,[r3,#0]
;;;136    				break;
00009a  e015              B        |L3.200|
                  |L3.156|
;;;137    
;;;138    			case SPI_SPEED_8:
;;;139    				SPI3->CR1 |= 2<<3;		// Fsck=Fpclk/8=9Mhz
00009c  4a0f              LDR      r2,|L3.220|
00009e  8812              LDRH     r2,[r2,#0]
0000a0  f0420210          ORR      r2,r2,#0x10
0000a4  4b0d              LDR      r3,|L3.220|
0000a6  801a              STRH     r2,[r3,#0]
;;;140    				break;
0000a8  e00e              B        |L3.200|
                  |L3.170|
;;;141    
;;;142    			case SPI_SPEED_16:
;;;143    				SPI3->CR1 |= 3<<3;		// Fsck=Fpclk/16=4.5Mhz
0000aa  4a0c              LDR      r2,|L3.220|
0000ac  8812              LDRH     r2,[r2,#0]
0000ae  f0420218          ORR      r2,r2,#0x18
0000b2  4b0a              LDR      r3,|L3.220|
0000b4  801a              STRH     r2,[r3,#0]
;;;144    				break;
0000b6  e007              B        |L3.200|
                  |L3.184|
;;;145    
;;;146    			case SPI_SPEED_256:
;;;147    				SPI3->CR1 |= 7<<3;		// Fsck=Fpclk/256=281.25Khz 低速模式
0000b8  4a08              LDR      r2,|L3.220|
0000ba  8812              LDRH     r2,[r2,#0]
0000bc  f0420238          ORR      r2,r2,#0x38
0000c0  4b06              LDR      r3,|L3.220|
0000c2  801a              STRH     r2,[r3,#0]
;;;148    				break;
0000c4  e000              B        |L3.200|
                  |L3.198|
;;;149    
;;;150    			default :
;;;151    				break;	
0000c6  bf00              NOP      
                  |L3.200|
0000c8  bf00              NOP                            ;136
;;;152    		}
;;;153    		
;;;154    		SPI3->CR1 |= 1<<6; 						// SPI设备使能
0000ca  4a04              LDR      r2,|L3.220|
0000cc  8812              LDRH     r2,[r2,#0]
0000ce  f0420240          ORR      r2,r2,#0x40
0000d2  4b02              LDR      r3,|L3.220|
0000d4  801a              STRH     r2,[r3,#0]
                  |L3.214|
;;;155    	}
;;;156    }
0000d6  4770              BX       lr
;;;157    
                          ENDP

                  |L3.216|
                          DCD      0x40003800
                  |L3.220|
                          DCD      0x40003c00

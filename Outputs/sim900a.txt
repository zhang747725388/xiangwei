; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\sim900a.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\sim900a.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP\GPS -I..\BSP\Sim900A -I..\BSP -I..\BSP\IWDG -I..\BSP\BlueTooth -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\BSP\Adxl345 -I..\BSP\TL718 -I..\BSP\PAM8403 -I..\BSP\W25X16 -I..\BSP\USB -I..\App\Debug -I..\App\SelfCheck -I..\App\GPSTask -I..\App\OBD -I..\App\Mems -I..\App\Voltage -I..\App\LKClient -I..\App\Paramlist -I..\App\ATC30 -I..\App -I..\BSP\mpu6050 -I..\App\mid-proc -I..\App\mpu6050Task -I..\BSP\dmp -I..\BSP\Bluetooth -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\sim900a.crf ..\BSP\Sim900A\sim900a.c]
                          THUMB

                          AREA ||i.Analyze_ClrReceivedServerData||, CODE, READONLY, ALIGN=2

                  Analyze_ClrReceivedServerData PROC
;;;273       Description: 复位服务器数据需要解析标志位 */
;;;274    void Analyze_ClrReceivedServerData(void)
000000  2000              MOVS     r0,#0
;;;275    {
;;;276    	_RcvServerData = bFALSE;
000002  4903              LDR      r1,|L1.16|
000004  7008              STRB     r0,[r1,#0]
;;;277    	bSverRcv       = bFALSE;					// 此次接收结束
000006  4903              LDR      r1,|L1.20|
000008  7008              STRB     r0,[r1,#0]
;;;278    	ServerDataLen  = 0;		
00000a  4903              LDR      r1,|L1.24|
00000c  6008              STR      r0,[r1,#0]  ; ServerDataLen
;;;279    }
00000e  4770              BX       lr
;;;280    
                          ENDP

                  |L1.16|
                          DCD      _RcvServerData
                  |L1.20|
                          DCD      bSverRcv
                  |L1.24|
                          DCD      ServerDataLen

                          AREA ||i.Analyze_IsReceivedServerData||, CODE, READONLY, ALIGN=2

                  Analyze_IsReceivedServerData PROC
;;;265       Description: 返回是否有服务器数据需要解析 */
;;;266    BOOLEAN Analyze_IsReceivedServerData(void)
000000  4801              LDR      r0,|L2.8|
;;;267    {
;;;268    	return _RcvServerData;
000002  7800              LDRB     r0,[r0,#0]  ; _RcvServerData
;;;269    }
000004  4770              BX       lr
;;;270    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      _RcvServerData

                          AREA ||i.GetDataFromSim900A||, CODE, READONLY, ALIGN=2

                  GetDataFromSim900A PROC
;;;144       Description:                            */
;;;145    void GetDataFromSim900A(char UsartData)
000000  b510              PUSH     {r4,lr}
;;;146    {
000002  4604              MOV      r4,r0
;;;147    	/* 取Sim900A返回的数据 */
;;;148    	if(s32NumRcv == SIM900ARCVDATAMAXLEN){
000004  4860              LDR      r0,|L3.392|
000006  6800              LDR      r0,[r0,#0]  ; s32NumRcv
000008  2840              CMP      r0,#0x40
00000a  d102              BNE      |L3.18|
;;;149    		s32NumRcv = 0;
00000c  2000              MOVS     r0,#0
00000e  495e              LDR      r1,|L3.392|
000010  6008              STR      r0,[r1,#0]  ; s32NumRcv
                  |L3.18|
;;;150    	}
;;;151    	caSimData[s32NumRcv++] = UsartData;
000012  485d              LDR      r0,|L3.392|
000014  6801              LDR      r1,[r0,#0]  ; s32NumRcv
000016  6800              LDR      r0,[r0,#0]  ; s32NumRcv
000018  1c40              ADDS     r0,r0,#1
00001a  4a5b              LDR      r2,|L3.392|
00001c  6010              STR      r0,[r2,#0]  ; s32NumRcv
00001e  485b              LDR      r0,|L3.396|
000020  5444              STRB     r4,[r0,r1]
;;;152    	
;;;153    	/* 检测是否收到了'>'*/
;;;154    	if(UsartData == '>' ){
000022  2c3e              CMP      r4,#0x3e
000024  d102              BNE      |L3.44|
;;;155    			Sim900_PreSendInfoOK = bTRUE;
000026  2001              MOVS     r0,#1
000028  4959              LDR      r1,|L3.400|
00002a  7008              STRB     r0,[r1,#0]
                  |L3.44|
;;;156    	}
;;;157    	
;;;158    	/* 检测是否收到了“Send OK” */
;;;159    	if(Sim900_SendFlag == bTRUE){
00002c  4859              LDR      r0,|L3.404|
00002e  7800              LDRB     r0,[r0,#0]  ; Sim900_SendFlag
000030  2801              CMP      r0,#1
000032  d11a              BNE      |L3.106|
;;;160    		Sim900_SendOKRcvData[Sim900_SendOKRcvDataLen++] = UsartData;		
000034  4858              LDR      r0,|L3.408|
000036  7801              LDRB     r1,[r0,#0]  ; Sim900_SendOKRcvDataLen
000038  7800              LDRB     r0,[r0,#0]  ; Sim900_SendOKRcvDataLen
00003a  1c40              ADDS     r0,r0,#1
00003c  4a56              LDR      r2,|L3.408|
00003e  7010              STRB     r0,[r2,#0]
000040  4856              LDR      r0,|L3.412|
000042  5444              STRB     r4,[r0,r1]
;;;161    		if(Sim900_SendOKRcvDataLen == 7){
000044  4610              MOV      r0,r2
000046  7800              LDRB     r0,[r0,#0]  ; Sim900_SendOKRcvDataLen
000048  2807              CMP      r0,#7
00004a  d11b              BNE      |L3.132|
;;;162    			if(RMLStrcmp(Sim900_SendOKRcvData,(BYTE *)"SEND OK",7) == 1){
00004c  2207              MOVS     r2,#7
00004e  a154              ADR      r1,|L3.416|
000050  4852              LDR      r0,|L3.412|
000052  f7fffffe          BL       RMLStrcmp
000056  2801              CMP      r0,#1
000058  d101              BNE      |L3.94|
;;;163    				Sim900_SendOKFlag = bTRUE;			
00005a  4953              LDR      r1,|L3.424|
00005c  7008              STRB     r0,[r1,#0]
                  |L3.94|
;;;164    			}
;;;165    			Sim900_SendFlag = bFALSE;
00005e  2000              MOVS     r0,#0
000060  494c              LDR      r1,|L3.404|
000062  7008              STRB     r0,[r1,#0]
;;;166    			Sim900_SendOKRcvDataLen = 0;
000064  494c              LDR      r1,|L3.408|
000066  7008              STRB     r0,[r1,#0]
000068  e00c              B        |L3.132|
                  |L3.106|
;;;167    		}
;;;168    	}else{
;;;169    		if(UsartData == 'S'){
00006a  2c53              CMP      r4,#0x53
00006c  d10a              BNE      |L3.132|
;;;170    			Sim900_SendFlag = bTRUE;
00006e  2001              MOVS     r0,#1
000070  4948              LDR      r1,|L3.404|
000072  7008              STRB     r0,[r1,#0]
;;;171    			Sim900_SendOKRcvData[Sim900_SendOKRcvDataLen++] = UsartData;		
000074  4848              LDR      r0,|L3.408|
000076  7801              LDRB     r1,[r0,#0]  ; Sim900_SendOKRcvDataLen
000078  7800              LDRB     r0,[r0,#0]  ; Sim900_SendOKRcvDataLen
00007a  1c40              ADDS     r0,r0,#1
00007c  4a46              LDR      r2,|L3.408|
00007e  7010              STRB     r0,[r2,#0]
000080  4846              LDR      r0,|L3.412|
000082  5444              STRB     r4,[r0,r1]
                  |L3.132|
;;;172    		}
;;;173    	}	
;;;174    
;;;175    
;;;176    	/* 处理服务器返回的数据 */
;;;177    	if(_RcvServerData == bTRUE){
000084  4849              LDR      r0,|L3.428|
000086  7800              LDRB     r0,[r0,#0]  ; _RcvServerData
000088  2801              CMP      r0,#1
00008a  d100              BNE      |L3.142|
                  |L3.140|
;;;178    		return;
;;;179    	}
;;;180    	
;;;181    	if( bSverRcv == bTRUE )												 // 如果开始接收服务器数据
;;;182    	{												
;;;183    		if( (UsartData == (char)0xFF) && (caServerData[ServerDataLen-1] == 0x99))
;;;184    		{		
;;;185    			INT16U EndLen = 0;
;;;186    			EndLen |= caServerData[2] << 8;
;;;187    			EndLen |= caServerData[3];
;;;188    			if( ServerDataLen == EndLen-1){
;;;189    				if( ServerDataLen >= SERVERPACKAGE_MAXLENGTH){			     // 如果数据长度超出1024			
;;;190    					bSverRcv = bFALSE;			                         	 // 清空状态等待下次接收
;;;191    					ServerDataLen = 0;
;;;192    				}else{
;;;193    					caServerData[ServerDataLen++] = UsartData;				 // 将帧尾存进来
;;;194    					_RcvServerData = bTRUE;									 // 收到服务器数据需要解析
;;;195    				}
;;;196    			}else{
;;;197    				if( ServerDataLen >= SERVERPACKAGE_MAXLENGTH){			     // 如果数据长度超出1024			
;;;198    					bSverRcv = bFALSE;			                             // 清空状态等待下次接收
;;;199    					ServerDataLen = 0;				                         
;;;200    				}else{
;;;201    					caServerData[ServerDataLen++] = UsartData;		         // 继续解析
;;;202    				}			
;;;203    			}				
;;;204    		}
;;;205    		else
;;;206    		{
;;;207    			if( ServerDataLen >= SERVERPACKAGE_MAXLENGTH)			         // 如果数据长度超出128
;;;208    			{			
;;;209    				bSverRcv = bFALSE;			                             // 清空状态等待下次接收
;;;210    				ServerDataLen = 0;				                             // 接收长度清零
;;;211    			}
;;;212    			else
;;;213    			{
;;;214    				caServerData[ServerDataLen++] = UsartData;				 // 将数据存入BUFF
;;;215    			}
;;;216    		}
;;;217    	}else{
;;;218    		if( UsartData == (char)0xAA )					//收到帧头
;;;219    		{					
;;;220    			ServerDataLen = 0;									   //开始准备接收
;;;221    			caServerData[ServerDataLen++] =	UsartData;		   //将0xAA存下来
;;;222    		}
;;;223    		else if( (UsartData == (char)0xBB) && (ServerDataLen == 1)) //确认收到完整帧头
;;;224    		{	  
;;;225    		   	caServerData[ServerDataLen++] =	UsartData;	       //将数据存下来
;;;226    			bSverRcv = bTRUE;								       //置位SERVER服务器数据接收标志位
;;;227    		}
;;;228    		else
;;;229    		{
;;;230    			ServerDataLen = 0;									//错误帧，抛弃
;;;231    		}	
;;;232    	}			                		
;;;233    }
00008c  bd10              POP      {r4,pc}
                  |L3.142|
00008e  4848              LDR      r0,|L3.432|
000090  7800              LDRB     r0,[r0,#0]            ;181  ; bSverRcv
000092  2801              CMP      r0,#1                 ;181
000094  d153              BNE      |L3.318|
000096  2cff              CMP      r4,#0xff              ;183
000098  d13d              BNE      |L3.278|
00009a  4846              LDR      r0,|L3.436|
00009c  6800              LDR      r0,[r0,#0]            ;183  ; ServerDataLen
00009e  1e40              SUBS     r0,r0,#1              ;183
0000a0  4945              LDR      r1,|L3.440|
0000a2  5c08              LDRB     r0,[r1,r0]            ;183
0000a4  2899              CMP      r0,#0x99              ;183
0000a6  d136              BNE      |L3.278|
0000a8  2000              MOVS     r0,#0                 ;185
0000aa  7889              LDRB     r1,[r1,#2]            ;186  ; caServerData
0000ac  ea402001          ORR      r0,r0,r1,LSL #8       ;186
0000b0  4941              LDR      r1,|L3.440|
0000b2  78c9              LDRB     r1,[r1,#3]            ;187  ; caServerData
0000b4  4308              ORRS     r0,r0,r1              ;187
0000b6  1e41              SUBS     r1,r0,#1              ;188
0000b8  4a3e              LDR      r2,|L3.436|
0000ba  6812              LDR      r2,[r2,#0]            ;188  ; ServerDataLen
0000bc  4291              CMP      r1,r2                 ;188
0000be  d116              BNE      |L3.238|
0000c0  493c              LDR      r1,|L3.436|
0000c2  6809              LDR      r1,[r1,#0]            ;189  ; ServerDataLen
0000c4  f5b16f80          CMP      r1,#0x400             ;189
0000c8  d305              BCC      |L3.214|
0000ca  2100              MOVS     r1,#0                 ;190
0000cc  4a38              LDR      r2,|L3.432|
0000ce  7011              STRB     r1,[r2,#0]            ;190
0000d0  4a38              LDR      r2,|L3.436|
0000d2  6011              STR      r1,[r2,#0]            ;191  ; ServerDataLen
0000d4  e01e              B        |L3.276|
                  |L3.214|
0000d6  4937              LDR      r1,|L3.436|
0000d8  680a              LDR      r2,[r1,#0]            ;193  ; ServerDataLen
0000da  6809              LDR      r1,[r1,#0]            ;193  ; ServerDataLen
0000dc  1c49              ADDS     r1,r1,#1              ;193
0000de  4b35              LDR      r3,|L3.436|
0000e0  6019              STR      r1,[r3,#0]            ;193  ; ServerDataLen
0000e2  4935              LDR      r1,|L3.440|
0000e4  548c              STRB     r4,[r1,r2]            ;193
0000e6  2101              MOVS     r1,#1                 ;194
0000e8  4a30              LDR      r2,|L3.428|
0000ea  7011              STRB     r1,[r2,#0]            ;194
0000ec  e012              B        |L3.276|
                  |L3.238|
0000ee  4931              LDR      r1,|L3.436|
0000f0  6809              LDR      r1,[r1,#0]            ;197  ; ServerDataLen
0000f2  f5b16f80          CMP      r1,#0x400             ;197
0000f6  d305              BCC      |L3.260|
0000f8  2100              MOVS     r1,#0                 ;198
0000fa  4a2d              LDR      r2,|L3.432|
0000fc  7011              STRB     r1,[r2,#0]            ;198
0000fe  4a2d              LDR      r2,|L3.436|
000100  6011              STR      r1,[r2,#0]            ;199  ; ServerDataLen
000102  e007              B        |L3.276|
                  |L3.260|
000104  492b              LDR      r1,|L3.436|
000106  680a              LDR      r2,[r1,#0]            ;201  ; ServerDataLen
000108  6809              LDR      r1,[r1,#0]            ;201  ; ServerDataLen
00010a  1c49              ADDS     r1,r1,#1              ;201
00010c  4b29              LDR      r3,|L3.436|
00010e  6019              STR      r1,[r3,#0]            ;201  ; ServerDataLen
000110  4929              LDR      r1,|L3.440|
000112  548c              STRB     r4,[r1,r2]            ;201
                  |L3.276|
000114  e036              B        |L3.388|
                  |L3.278|
000116  4827              LDR      r0,|L3.436|
000118  6800              LDR      r0,[r0,#0]            ;207  ; ServerDataLen
00011a  f5b06f80          CMP      r0,#0x400             ;207
00011e  d305              BCC      |L3.300|
000120  2000              MOVS     r0,#0                 ;209
000122  4923              LDR      r1,|L3.432|
000124  7008              STRB     r0,[r1,#0]            ;209
000126  4923              LDR      r1,|L3.436|
000128  6008              STR      r0,[r1,#0]            ;210  ; ServerDataLen
00012a  e02b              B        |L3.388|
                  |L3.300|
00012c  4821              LDR      r0,|L3.436|
00012e  6801              LDR      r1,[r0,#0]            ;214  ; ServerDataLen
000130  6800              LDR      r0,[r0,#0]            ;214  ; ServerDataLen
000132  1c40              ADDS     r0,r0,#1              ;214
000134  4a1f              LDR      r2,|L3.436|
000136  6010              STR      r0,[r2,#0]            ;214  ; ServerDataLen
000138  481f              LDR      r0,|L3.440|
00013a  5444              STRB     r4,[r0,r1]            ;214
00013c  e022              B        |L3.388|
                  |L3.318|
00013e  2caa              CMP      r4,#0xaa              ;218
000140  d10b              BNE      |L3.346|
000142  2000              MOVS     r0,#0                 ;220
000144  491b              LDR      r1,|L3.436|
000146  6008              STR      r0,[r1,#0]            ;220  ; ServerDataLen
000148  4608              MOV      r0,r1                 ;221
00014a  6801              LDR      r1,[r0,#0]            ;221  ; ServerDataLen
00014c  6800              LDR      r0,[r0,#0]            ;221  ; ServerDataLen
00014e  1c40              ADDS     r0,r0,#1              ;221
000150  4a18              LDR      r2,|L3.436|
000152  6010              STR      r0,[r2,#0]            ;221  ; ServerDataLen
000154  4818              LDR      r0,|L3.440|
000156  5444              STRB     r4,[r0,r1]            ;221
000158  e014              B        |L3.388|
                  |L3.346|
00015a  2cbb              CMP      r4,#0xbb              ;223
00015c  d10f              BNE      |L3.382|
00015e  4815              LDR      r0,|L3.436|
000160  6800              LDR      r0,[r0,#0]            ;223  ; ServerDataLen
000162  2801              CMP      r0,#1                 ;223
000164  d10b              BNE      |L3.382|
000166  4813              LDR      r0,|L3.436|
000168  6801              LDR      r1,[r0,#0]            ;225  ; ServerDataLen
00016a  6800              LDR      r0,[r0,#0]            ;225  ; ServerDataLen
00016c  1c40              ADDS     r0,r0,#1              ;225
00016e  4a11              LDR      r2,|L3.436|
000170  6010              STR      r0,[r2,#0]            ;225  ; ServerDataLen
000172  4811              LDR      r0,|L3.440|
000174  5444              STRB     r4,[r0,r1]            ;225
000176  2001              MOVS     r0,#1                 ;226
000178  490d              LDR      r1,|L3.432|
00017a  7008              STRB     r0,[r1,#0]            ;226
00017c  e002              B        |L3.388|
                  |L3.382|
00017e  2000              MOVS     r0,#0                 ;230
000180  490c              LDR      r1,|L3.436|
000182  6008              STR      r0,[r1,#0]            ;230  ; ServerDataLen
                  |L3.388|
000184  bf00              NOP      
000186  e781              B        |L3.140|
;;;234    
                          ENDP

                  |L3.392|
                          DCD      s32NumRcv
                  |L3.396|
                          DCD      caSimData
                  |L3.400|
                          DCD      Sim900_PreSendInfoOK
                  |L3.404|
                          DCD      Sim900_SendFlag
                  |L3.408|
                          DCD      Sim900_SendOKRcvDataLen
                  |L3.412|
                          DCD      Sim900_SendOKRcvData
                  |L3.416|
0001a0  53454e44          DCB      "SEND OK",0
0001a4  204f4b00
                  |L3.424|
                          DCD      Sim900_SendOKFlag
                  |L3.428|
                          DCD      _RcvServerData
                  |L3.432|
                          DCD      bSverRcv
                  |L3.436|
                          DCD      ServerDataLen
                  |L3.440|
                          DCD      caServerData

                          AREA ||i.Reset_Sim900_PowerPin||, CODE, READONLY, ALIGN=2

                  Reset_Sim900_PowerPin PROC
;;;65        Description: 清空SIM900ABOOT脚    */
;;;66     void Reset_Sim900_PowerPin(void)
000000  b508              PUSH     {r3,lr}
;;;67     {
;;;68     	GPIO_InitTypeDef GPIO_InitStructure;
;;;69     
;;;70     	RCC_APB2PeriphClockCmd(SIM900A_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;71     	
;;;72     	GPIO_InitStructure.GPIO_Pin = SIM900A_POWER_KEY;
00000a  2020              MOVS     r0,#0x20
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;73     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;74     	GPIO_Init(SIM900A_POWER_PORT, &GPIO_InitStructure);
000016  4669              MOV      r1,sp
000018  4801              LDR      r0,|L4.32|
00001a  f7fffffe          BL       GPIO_Init
;;;75     
;;;76     }
00001e  bd08              POP      {r3,pc}
;;;77     
                          ENDP

                  |L4.32|
                          DCD      0x40011000

                          AREA ||i.SendMsgToSim900A||, CODE, READONLY, ALIGN=2

                  SendMsgToSim900A PROC
;;;125       Description:                     */
;;;126    void SendMsgToSim900A( BYTE * Msg , INT16U Length )
000000  b570              PUSH     {r4-r6,lr}
;;;127    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;128    	INT8U i;
;;;129    	
;;;130    	s32NumRcv = 0;	
000006  2000              MOVS     r0,#0
000008  490c              LDR      r1,|L5.60|
00000a  6008              STR      r0,[r1,#0]  ; s32NumRcv
;;;131    	memset(caSimData,0,SIM900ARCVDATAMAXLEN);
00000c  2140              MOVS     r1,#0x40
00000e  480c              LDR      r0,|L5.64|
000010  f7fffffe          BL       __aeabi_memclr
;;;132    
;;;133    	for ( i = 0; i < Length; i++ )
000014  2600              MOVS     r6,#0
000016  e00d              B        |L5.52|
                  |L5.24|
;;;134    	{
;;;135    		while ( USART_GetFlagStatus(COM_GSM, USART_FLAG_TXE) == RESET );
000018  bf00              NOP      
                  |L5.26|
00001a  2180              MOVS     r1,#0x80
00001c  4809              LDR      r0,|L5.68|
00001e  f7fffffe          BL       USART_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L5.26|
;;;136    		USART_SendData(COM_GSM, *Msg++);
000026  f8141b01          LDRB     r1,[r4],#1
00002a  4806              LDR      r0,|L5.68|
00002c  f7fffffe          BL       USART_SendData
000030  1c70              ADDS     r0,r6,#1              ;133
000032  b2c6              UXTB     r6,r0                 ;133
                  |L5.52|
000034  42ae              CMP      r6,r5                 ;133
000036  dbef              BLT      |L5.24|
;;;137    	}
;;;138    }
000038  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      s32NumRcv
                  |L5.64|
                          DCD      caSimData
                  |L5.68|
                          DCD      0x40004800

                          AREA ||i.Set_Sim900_PowerPin||, CODE, READONLY, ALIGN=2

                  Set_Sim900_PowerPin PROC
;;;47        Description: 置位SIM900ABOOT脚    */
;;;48     void Set_Sim900_PowerPin(void)
000000  b508              PUSH     {r3,lr}
;;;49     {
;;;50     	GPIO_InitTypeDef GPIO_InitStructure;
;;;51     
;;;52     	RCC_APB2PeriphClockCmd(SIM900A_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;53     	
;;;54     	GPIO_InitStructure.GPIO_Pin = SIM900A_POWER_KEY;
00000a  2020              MOVS     r0,#0x20
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;55     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
000010  2002              MOVS     r0,#2
000012  f88d0002          STRB     r0,[sp,#2]
;;;56     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000016  2010              MOVS     r0,#0x10
000018  f88d0003          STRB     r0,[sp,#3]
;;;57     	GPIO_Init(SIM900A_POWER_PORT, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4804              LDR      r0,|L6.48|
000020  f7fffffe          BL       GPIO_Init
;;;58     
;;;59     	GPIO_SetBits(SIM900A_POWER_PORT, SIM900A_POWER_KEY);
000024  2120              MOVS     r1,#0x20
000026  4802              LDR      r0,|L6.48|
000028  f7fffffe          BL       GPIO_SetBits
;;;60     
;;;61     }
00002c  bd08              POP      {r3,pc}
;;;62     
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      0x40011000

                          AREA ||i.Sim900A_Disable_RcvIT||, CODE, READONLY, ALIGN=2

                  Sim900A_Disable_RcvIT PROC
;;;115       Description: 失能Sim900A接收中断 */
;;;116    void Sim900A_Disable_RcvIT(void)
000000  b510              PUSH     {r4,lr}
;;;117    {
;;;118    	UART_Config_RxInterrupt(COM_GSM,DISABLE);
000002  2100              MOVS     r1,#0
000004  4801              LDR      r0,|L7.12|
000006  f7fffffe          BL       UART_Config_RxInterrupt
;;;119    }
00000a  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L7.12|
                          DCD      0x40004800

                          AREA ||i.Sim900A_Enable_RcvIT||, CODE, READONLY, ALIGN=2

                  Sim900A_Enable_RcvIT PROC
;;;107       Description: 使能Sim900A接收中断 */
;;;108    void Sim900A_Enable_RcvIT(void)
000000  b510              PUSH     {r4,lr}
;;;109    {
;;;110    	UART_Config_RxInterrupt(COM_GSM,ENABLE);
000002  2101              MOVS     r1,#1
000004  4801              LDR      r0,|L8.12|
000006  f7fffffe          BL       UART_Config_RxInterrupt
;;;111    }
00000a  bd10              POP      {r4,pc}
;;;112    
                          ENDP

                  |L8.12|
                          DCD      0x40004800

                          AREA ||i.Sim900A_GetStatus||, CODE, READONLY, ALIGN=2

                  Sim900A_GetStatus PROC
;;;80        Description: 检测Sim900A是否启动 */
;;;81     BOOLEAN Sim900A_GetStatus(void)
000000  b508              PUSH     {r3,lr}
;;;82     {
;;;83     	GPIO_InitTypeDef GPIO_InitStructure;
;;;84     	/* Enable GPIOB, GPIOC and AFIO clock */
;;;85     	RCC_APB2PeriphClockCmd(SIM900A_RCC | RCC_APB2Periph_AFIO , ENABLE);
000002  2101              MOVS     r1,#1
000004  2011              MOVS     r0,#0x11
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;86     
;;;87     	GPIO_InitStructure.GPIO_Pin = SIM900A_POWER_STATUS;
00000a  2010              MOVS     r0,#0x10
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;88     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;89     	GPIO_Init(SIM900A_POWER_PORT, &GPIO_InitStructure);
000016  4669              MOV      r1,sp
000018  4805              LDR      r0,|L9.48|
00001a  f7fffffe          BL       GPIO_Init
;;;90     
;;;91     	if(GPIO_ReadInputDataBit(SIM900A_POWER_PORT, SIM900A_POWER_STATUS)){
00001e  2110              MOVS     r1,#0x10
000020  4803              LDR      r0,|L9.48|
000022  f7fffffe          BL       GPIO_ReadInputDataBit
000026  b108              CBZ      r0,|L9.44|
;;;92     		return (bTRUE);
000028  2001              MOVS     r0,#1
                  |L9.42|
;;;93     	}
;;;94     	return (bFALSE);
;;;95     }
00002a  bd08              POP      {r3,pc}
                  |L9.44|
00002c  2000              MOVS     r0,#0                 ;94
00002e  e7fc              B        |L9.42|
;;;96     
                          ENDP

                  |L9.48|
                          DCD      0x40011000

                          AREA ||i.Sim900A_UART_Enable||, CODE, READONLY, ALIGN=1

                  Sim900A_UART_Enable PROC
;;;99        Description: 使能Sim900A接收串口 */
;;;100    void Sim900A_UART_Enable(void)
000000  b510              PUSH     {r4,lr}
;;;101    {
;;;102    	COM_GSM_INIT(9600);
000002  f44f5016          MOV      r0,#0x2580
000006  f7fffffe          BL       UART3_Init
;;;103    }
00000a  bd10              POP      {r4,pc}
;;;104    
                          ENDP


                          AREA ||i.Sim900_CheckPreSendInfoStart||, CODE, READONLY, ALIGN=2

                  Sim900_CheckPreSendInfoStart PROC
;;;241    
;;;242    void Sim900_CheckPreSendInfoStart(void)
000000  2000              MOVS     r0,#0
;;;243    {
;;;244    	Sim900_PreSendInfoOK = bFALSE;
000002  4901              LDR      r1,|L11.8|
000004  7008              STRB     r0,[r1,#0]
;;;245    }
000006  4770              BX       lr
;;;246    
                          ENDP

                  |L11.8|
                          DCD      Sim900_PreSendInfoOK

                          AREA ||i.Sim900_CheckSendOKStart||, CODE, READONLY, ALIGN=2

                  Sim900_CheckSendOKStart PROC
;;;253    
;;;254    void Sim900_CheckSendOKStart(void)
000000  2000              MOVS     r0,#0
;;;255    {
;;;256    	Sim900_SendOKFlag = bFALSE;                           
000002  4903              LDR      r1,|L12.16|
000004  7008              STRB     r0,[r1,#0]
;;;257    	Sim900_SendFlag = bFALSE;
000006  4903              LDR      r1,|L12.20|
000008  7008              STRB     r0,[r1,#0]
;;;258    	Sim900_SendOKRcvDataLen = 0;
00000a  4903              LDR      r1,|L12.24|
00000c  7008              STRB     r0,[r1,#0]
;;;259    }
00000e  4770              BX       lr
;;;260    
                          ENDP

                  |L12.16|
                          DCD      Sim900_SendOKFlag
                  |L12.20|
                          DCD      Sim900_SendFlag
                  |L12.24|
                          DCD      Sim900_SendOKRcvDataLen

                          AREA ||i.Sim900_bInfoSendOK||, CODE, READONLY, ALIGN=2

                  Sim900_bInfoSendOK PROC
;;;247    
;;;248    BOOLEAN Sim900_bInfoSendOK(void)
000000  4801              LDR      r0,|L13.8|
;;;249    {
;;;250    	return (Sim900_SendOKFlag);
000002  7800              LDRB     r0,[r0,#0]  ; Sim900_SendOKFlag
;;;251    }
000004  4770              BX       lr
;;;252    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      Sim900_SendOKFlag

                          AREA ||i.Sim900_bPreSendInfo||, CODE, READONLY, ALIGN=2

                  Sim900_bPreSendInfo PROC
;;;235    
;;;236    BOOLEAN Sim900_bPreSendInfo(void)
000000  4801              LDR      r0,|L14.8|
;;;237    {
;;;238    	return (Sim900_PreSendInfoOK);
000002  7800              LDRB     r0,[r0,#0]  ; Sim900_PreSendInfoOK
;;;239    }
000004  4770              BX       lr
;;;240    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      Sim900_PreSendInfoOK

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  caSimData
                          %        64
                  caServerData
                          %        1024
                  Sim900_SendOKRcvData
                          %        10

                          AREA ||.data||, DATA, ALIGN=2

                  s32NumRcv
                          DCD      0x00000000
                  _RcvServerData
000004  00                DCB      0x00
                  bSverRcv
000005  000000            DCB      0x00,0x00,0x00
                  ServerDataLen
                          DCD      0x00000000
                  Sim900_PreSendInfoOK
00000c  00                DCB      0x00
                  Sim900_SendOKFlag
00000d  00                DCB      0x00
                  Sim900_SendFlag
00000e  00                DCB      0x00
                  Sim900_SendOKRcvDataLen
00000f  00                DCB      0x00

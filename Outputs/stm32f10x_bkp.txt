; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\stm32f10x_bkp.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP -I..\BSP\IWDG -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\App\Debug -I..\App\SelfCheck -I..\App\Voltage -I..\App\ATC30 -I..\App -I..\BSP\uart -I..\App\Task -I..\App\Task -IH:\xiangwei\xiangwei\mart\Project\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\stm32f10x_bkp.crf ..\Library\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||i.BKP_ClearFlag||, CODE, READONLY, ALIGN=2

                  BKP_ClearFlag PROC
;;;271      */
;;;272    void BKP_ClearFlag(void)
000000  4803              LDR      r0,|L1.16|
;;;273    {
;;;274      /* Set CTE bit to clear Tamper Pin Event flag */
;;;275      BKP->CSR |= CSR_CTE_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  8008              STRH     r0,[r1,#0]
;;;276    }
00000c  4770              BX       lr
;;;277    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  BKP_ClearITPendingBit PROC
;;;292      */
;;;293    void BKP_ClearITPendingBit(void)
000000  4803              LDR      r0,|L2.16|
;;;294    {
;;;295      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;296      BKP->CSR |= CSR_CTI_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L2.16|
00000a  8008              STRH     r0,[r1,#0]
;;;297    }
00000c  4770              BX       lr
;;;298    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_DeInit||, CODE, READONLY, ALIGN=1

                  BKP_DeInit PROC
;;;122      */
;;;123    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;126      RCC_BackupResetCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_BackupResetCmd
;;;127    }
00000e  bd10              POP      {r4,pc}
;;;128    
                          ENDP


                          AREA ||i.BKP_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetFlagStatus PROC
;;;261      */
;;;262    FlagStatus BKP_GetFlagStatus(void)
000000  4801              LDR      r0,|L4.8|
;;;263    {
;;;264      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;265    }
000006  4770              BX       lr
;;;266    
                          ENDP

                  |L4.8|
                          DCD      0x420d86a0

                          AREA ||i.BKP_GetITStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetITStatus PROC
;;;282      */
;;;283    ITStatus BKP_GetITStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;284    {
;;;285      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;286    }
000006  4770              BX       lr
;;;287    
                          ENDP

                  |L5.8|
                          DCD      0x420d86a4

                          AREA ||i.BKP_ITConfig||, CODE, READONLY, ALIGN=2

                  BKP_ITConfig PROC
;;;162      */
;;;163    void BKP_ITConfig(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;164    {
;;;165      /* Check the parameters */
;;;166      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;167      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;168    }
000004  4770              BX       lr
;;;169    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x420d8688

                          AREA ||i.BKP_RTCOutputConfig||, CODE, READONLY, ALIGN=2

                  BKP_RTCOutputConfig PROC
;;;182      */
;;;183    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000000  4601              MOV      r1,r0
;;;184    {
;;;185      uint16_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;186      /* Check the parameters */
;;;187      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;188      tmpreg = BKP->RTCCR;
000004  4a04              LDR      r2,|L7.24|
000006  8810              LDRH     r0,[r2,#0]
;;;189      /* Clear CCO, ASOE and ASOS bits */
;;;190      tmpreg &= RTCCR_Mask;
000008  f64f427f          MOV      r2,#0xfc7f
00000c  4010              ANDS     r0,r0,r2
;;;191      
;;;192      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;193      tmpreg |= BKP_RTCOutputSource;
00000e  4308              ORRS     r0,r0,r1
;;;194      /* Store the new value */
;;;195      BKP->RTCCR = tmpreg;
000010  4a01              LDR      r2,|L7.24|
000012  8010              STRH     r0,[r2,#0]
;;;196    }
000014  4770              BX       lr
;;;197    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x40006c2c

                          AREA ||i.BKP_ReadBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_ReadBackupRegister PROC
;;;243      */
;;;244    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000000  b508              PUSH     {r3,lr}
;;;245    {
000002  4601              MOV      r1,r0
;;;246      __IO uint32_t tmp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;247    
;;;248      /* Check the parameters */
;;;249      assert_param(IS_BKP_DR(BKP_DR));
;;;250    
;;;251      tmp = (uint32_t)BKP_BASE; 
000008  4803              LDR      r0,|L8.24|
00000a  9000              STR      r0,[sp,#0]
;;;252      tmp += BKP_DR;
00000c  9800              LDR      r0,[sp,#0]
00000e  4408              ADD      r0,r0,r1
000010  9000              STR      r0,[sp,#0]
;;;253    
;;;254      return (*(__IO uint16_t *) tmp);
000012  9800              LDR      r0,[sp,#0]
000014  8800              LDRH     r0,[r0,#0]
;;;255    }
000016  bd08              POP      {r3,pc}
;;;256    
                          ENDP

                  |L8.24|
                          DCD      0x40006c00

                          AREA ||i.BKP_SetRTCCalibrationValue||, CODE, READONLY, ALIGN=2

                  BKP_SetRTCCalibrationValue PROC
;;;203      */
;;;204    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
000000  4601              MOV      r1,r0
;;;205    {
;;;206      uint16_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;207      /* Check the parameters */
;;;208      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;209      tmpreg = BKP->RTCCR;
000004  4a04              LDR      r2,|L9.24|
000006  8810              LDRH     r0,[r2,#0]
;;;210      /* Clear CAL[6:0] bits */
;;;211      tmpreg &= RTCCR_CAL_Mask;
000008  f64f7280          MOV      r2,#0xff80
00000c  4010              ANDS     r0,r0,r2
;;;212      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;213      tmpreg |= CalibrationValue;
00000e  4308              ORRS     r0,r0,r1
;;;214      /* Store the new value */
;;;215      BKP->RTCCR = tmpreg;
000010  4a01              LDR      r2,|L9.24|
000012  8010              STRH     r0,[r2,#0]
;;;216    }
000014  4770              BX       lr
;;;217    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40006c2c

                          AREA ||i.BKP_TamperPinCmd||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinCmd PROC
;;;149      */
;;;150    void BKP_TamperPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L10.8|
;;;151    {
;;;152      /* Check the parameters */
;;;153      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;154      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;155    }
000004  4770              BX       lr
;;;156    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x420d8600

                          AREA ||i.BKP_TamperPinLevelConfig||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinLevelConfig PROC
;;;136      */
;;;137    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000000  4901              LDR      r1,|L11.8|
;;;138    {
;;;139      /* Check the parameters */
;;;140      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;141      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000002  6008              STR      r0,[r1,#0]
;;;142    }
000004  4770              BX       lr
;;;143    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x420d8604

                          AREA ||i.BKP_WriteBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_WriteBackupRegister PROC
;;;224      */
;;;225    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000000  b508              PUSH     {r3,lr}
;;;226    {
;;;227      __IO uint32_t tmp = 0;
000002  2200              MOVS     r2,#0
000004  9200              STR      r2,[sp,#0]
;;;228    
;;;229      /* Check the parameters */
;;;230      assert_param(IS_BKP_DR(BKP_DR));
;;;231    
;;;232      tmp = (uint32_t)BKP_BASE; 
000006  4a04              LDR      r2,|L12.24|
000008  9200              STR      r2,[sp,#0]
;;;233      tmp += BKP_DR;
00000a  9a00              LDR      r2,[sp,#0]
00000c  4402              ADD      r2,r2,r0
00000e  9200              STR      r2,[sp,#0]
;;;234    
;;;235      *(__IO uint32_t *) tmp = Data;
000010  9a00              LDR      r2,[sp,#0]
000012  6011              STR      r1,[r2,#0]
;;;236    }
000014  bd08              POP      {r3,pc}
;;;237    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x40006c00

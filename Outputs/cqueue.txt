; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\cqueue.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\cqueue.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP\GPS -I..\BSP\Sim900A -I..\BSP -I..\BSP\IWDG -I..\BSP\BlueTooth -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\BSP\Adxl345 -I..\BSP\TL718 -I..\BSP\PAM8403 -I..\BSP\W25X16 -I..\BSP\USB -I..\App\Debug -I..\App\SelfCheck -I..\App\GPSTask -I..\App\OBD -I..\App\Mems -I..\App\Voltage -I..\App\LKClient -I..\App\Paramlist -I..\App\ATC30 -I..\App -I..\BSP\mpu6050 -I..\App\mid-proc -I..\App\mpu6050Task -I..\BSP\dmp -I..\BSP\Bluetooth -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\cqueue.crf ..\App\LKClient\CQueue.c]
                          THUMB

                          AREA ||i.CQueue_ClrQueue||, CODE, READONLY, ALIGN=2

                  CQueue_ClrQueue PROC
;;;59     
;;;60     void CQueue_ClrQueue(void)
000000  4802              LDR      r0,|L1.12|
;;;61     {
;;;62     	LKClientQueue.rear = LKClientQueue.front;
000002  8800              LDRH     r0,[r0,#0]
000004  4901              LDR      r1,|L1.12|
000006  1c89              ADDS     r1,r1,#2
000008  8008              STRH     r0,[r1,#0]
;;;63     }
00000a  4770              BX       lr
;;;64     
                          ENDP

                  |L1.12|
                          DCD      LKClientQueue+0x6720

                          AREA ||i.CQueue_Delete||, CODE, READONLY, ALIGN=2

                  CQueue_Delete PROC
;;;46     
;;;47     void CQueue_Delete(void)
000000  480a              LDR      r0,|L2.44|
;;;48     {
;;;49     	if(LKClientQueue.rear == LKClientQueue.front) return;  // 循环队列空，不出队列
000002  8800              LDRH     r0,[r0,#0]
000004  4909              LDR      r1,|L2.44|
000006  1e89              SUBS     r1,r1,#2
000008  8809              LDRH     r1,[r1,#0]
00000a  4288              CMP      r0,r1
00000c  d100              BNE      |L2.16|
                  |L2.14|
;;;50     	LKClientQueue.front = (LKClientQueue.front + 1) % CQUEUE_MAX_SIZE;								  
;;;51     }
00000e  4770              BX       lr
                  |L2.16|
000010  4806              LDR      r0,|L2.44|
000012  1e80              SUBS     r0,r0,#2              ;50
000014  8800              LDRH     r0,[r0,#0]            ;50
000016  1c40              ADDS     r0,r0,#1              ;50
000018  21c8              MOVS     r1,#0xc8              ;50
00001a  fb90f2f1          SDIV     r2,r0,r1              ;50
00001e  fb010012          MLS      r0,r1,r2,r0           ;50
000022  4902              LDR      r1,|L2.44|
000024  1e89              SUBS     r1,r1,#2              ;50
000026  8008              STRH     r0,[r1,#0]            ;50
000028  bf00              NOP      
00002a  e7f0              B        |L2.14|
;;;52     
                          ENDP

                  |L2.44|
                          DCD      LKClientQueue+0x6722

                          AREA ||i.CQueue_Enter||, CODE, READONLY, ALIGN=2

                  CQueue_Enter PROC
;;;26     /*----------------------   数据队列相关操作 --------------------------------------*/
;;;27     void CQueue_Enter( BYTE *pData , INT8U DataLen , BOOLEAN DataAck)
000000  b570              PUSH     {r4-r6,lr}
;;;28     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;29     	if( ((LKClientQueue.rear + 1) % CQUEUE_MAX_SIZE) == LKClientQueue.front	){
000008  481a              LDR      r0,|L3.116|
00000a  8800              LDRH     r0,[r0,#0]
00000c  1c40              ADDS     r0,r0,#1
00000e  21c8              MOVS     r1,#0xc8
000010  fb90f2f1          SDIV     r2,r0,r1
000014  fb010012          MLS      r0,r1,r2,r0
000018  4916              LDR      r1,|L3.116|
00001a  1e89              SUBS     r1,r1,#2
00001c  8809              LDRH     r1,[r1,#0]
00001e  4288              CMP      r0,r1
000020  d100              BNE      |L3.36|
                  |L3.34|
;;;30     		return;	   // 循环队列满 不入队列
;;;31     	} 
;;;32     	RMLStrcpy(LKClientQueue.base[LKClientQueue.rear].dataBuf , pData , DataLen);
;;;33     	LKClientQueue.base[LKClientQueue.rear].dataSize = DataLen;
;;;34     	LKClientQueue.base[LKClientQueue.rear].dataAck = DataAck;
;;;35     	LKClientQueue.rear = (LKClientQueue.rear + 1) % CQUEUE_MAX_SIZE;  
;;;36     }
000022  bd70              POP      {r4-r6,pc}
                  |L3.36|
000024  4913              LDR      r1,|L3.116|
000026  8809              LDRH     r1,[r1,#0]            ;32
000028  eb011141          ADD      r1,r1,r1,LSL #5       ;32
00002c  4a12              LDR      r2,|L3.120|
00002e  eb020081          ADD      r0,r2,r1,LSL #2       ;32
000032  4622              MOV      r2,r4                 ;32
000034  4629              MOV      r1,r5                 ;32
000036  f7fffffe          BL       RMLStrcpy
00003a  480e              LDR      r0,|L3.116|
00003c  8800              LDRH     r0,[r0,#0]            ;33
00003e  eb001040          ADD      r0,r0,r0,LSL #5       ;33
000042  490d              LDR      r1,|L3.120|
000044  eb010080          ADD      r0,r1,r0,LSL #2       ;33
000048  f8804082          STRB     r4,[r0,#0x82]         ;33
00004c  4809              LDR      r0,|L3.116|
00004e  8800              LDRH     r0,[r0,#0]            ;34
000050  eb001040          ADD      r0,r0,r0,LSL #5       ;34
000054  eb010080          ADD      r0,r1,r0,LSL #2       ;34
000058  f8806083          STRB     r6,[r0,#0x83]         ;34
00005c  4805              LDR      r0,|L3.116|
00005e  8800              LDRH     r0,[r0,#0]            ;35
000060  1c40              ADDS     r0,r0,#1              ;35
000062  21c8              MOVS     r1,#0xc8              ;35
000064  fb90f2f1          SDIV     r2,r0,r1              ;35
000068  fb010012          MLS      r0,r1,r2,r0           ;35
00006c  4901              LDR      r1,|L3.116|
00006e  8008              STRH     r0,[r1,#0]            ;35
000070  bf00              NOP      
000072  e7d6              B        |L3.34|
;;;37     
                          ENDP

                  |L3.116|
                          DCD      LKClientQueue+0x6722
                  |L3.120|
                          DCD      LKClientQueue

                          AREA ||i.CQueue_ReadInfo||, CODE, READONLY, ALIGN=2

                  CQueue_ReadInfo PROC
;;;38     
;;;39     void CQueue_ReadInfo(BYTE *pData,INT8U *DataLen,BOOLEAN *DataAck)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;41     	RMLStrcpy(  pData , LKClientQueue.base[LKClientQueue.front].dataBuf,LKClientQueue.base[LKClientQueue.front].dataSize);
000008  4812              LDR      r0,|L4.84|
00000a  8800              LDRH     r0,[r0,#0]
00000c  eb001040          ADD      r0,r0,r0,LSL #5
000010  4b11              LDR      r3,|L4.88|
000012  eb030080          ADD      r0,r3,r0,LSL #2
000016  f8902082          LDRB     r2,[r0,#0x82]
00001a  480e              LDR      r0,|L4.84|
00001c  8800              LDRH     r0,[r0,#0]
00001e  eb001040          ADD      r0,r0,r0,LSL #5
000022  eb030180          ADD      r1,r3,r0,LSL #2
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       RMLStrcpy
;;;42     	*DataLen = LKClientQueue.base[LKClientQueue.front].dataSize;
00002c  4809              LDR      r0,|L4.84|
00002e  8800              LDRH     r0,[r0,#0]
000030  eb001040          ADD      r0,r0,r0,LSL #5
000034  4908              LDR      r1,|L4.88|
000036  eb010080          ADD      r0,r1,r0,LSL #2
00003a  f8900082          LDRB     r0,[r0,#0x82]
00003e  7020              STRB     r0,[r4,#0]
;;;43     	*DataAck = LKClientQueue.base[LKClientQueue.front].dataAck;
000040  4804              LDR      r0,|L4.84|
000042  8800              LDRH     r0,[r0,#0]
000044  eb001040          ADD      r0,r0,r0,LSL #5
000048  eb010080          ADD      r0,r1,r0,LSL #2
00004c  f8900083          LDRB     r0,[r0,#0x83]
000050  7028              STRB     r0,[r5,#0]
;;;44     }
000052  bd70              POP      {r4-r6,pc}
;;;45     
                          ENDP

                  |L4.84|
                          DCD      LKClientQueue+0x6720
                  |L4.88|
                          DCD      LKClientQueue

                          AREA ||i.CQueue_ReadQueueLen||, CODE, READONLY, ALIGN=2

                  CQueue_ReadQueueLen PROC
;;;53     
;;;54     INT16U CQueue_ReadQueueLen(void)
000000  4806              LDR      r0,|L5.28|
;;;55     {
;;;56     	return (LKClientQueue.rear + CQUEUE_MAX_SIZE - LKClientQueue.front) % CQUEUE_MAX_SIZE;
000002  8800              LDRH     r0,[r0,#0]
000004  30c8              ADDS     r0,r0,#0xc8
000006  4905              LDR      r1,|L5.28|
000008  1e89              SUBS     r1,r1,#2
00000a  8809              LDRH     r1,[r1,#0]
00000c  1a40              SUBS     r0,r0,r1
00000e  21c8              MOVS     r1,#0xc8
000010  fb90f2f1          SDIV     r2,r0,r1
000014  fb010012          MLS      r0,r1,r2,r0
000018  b280              UXTH     r0,r0
;;;57     }
00001a  4770              BX       lr
;;;58     
                          ENDP

                  |L5.28|
                          DCD      LKClientQueue+0x6722

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  LKClientQueue
                          %        26404

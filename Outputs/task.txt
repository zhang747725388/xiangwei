; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\task.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\task.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP -I..\BSP\IWDG -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\App\Debug -I..\App\SelfCheck -I..\App\Voltage -I..\App\ATC30 -I..\App -I..\BSP\uart -I..\App\Task -I..\App\Task -IH:\xiangwei\xiangwei\mart\Project\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\task.crf ..\App\Task\task.c]
                          THUMB

                          AREA ||i.Getdatatask||, CODE, READONLY, ALIGN=2

                  Getdatatask PROC
;;;69     
;;;70     void  Getdatatask(void){
000000  b510              PUSH     {r4,lr}
;;;71      if((RMLStrcmp(SysTest_RcvData,(BYTE *)"!S08",4) == 1))
000002  2204              MOVS     r2,#4
000004  a102              ADR      r1,|L1.16|
000006  4804              LDR      r0,|L1.24|
000008  f7fffffe          BL       RMLStrcmp
;;;72      {
;;;73         
;;;74      }
;;;75      	    
;;;76     }
00000c  bd10              POP      {r4,pc}
;;;77      
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
000010  21533038          DCB      "!S08",0
000014  00      
000015  00                DCB      0
000016  00                DCB      0
000017  00                DCB      0
                  |L1.24|
                          DCD      SysTest_RcvData

                          AREA ||i.KeyAction||, CODE, READONLY, ALIGN=1

                  KeyAction PROC
;;;84     
;;;85     void KeyAction(u8 flag){
000000  28d2              CMP      r0,#0xd2
;;;86     
;;;87       switch(flag){
000002  d01e              BEQ      |L2.66|
000004  dc0e              BGT      |L2.36|
000006  28b4              CMP      r0,#0xb4
000008  d018              BEQ      |L2.60|
00000a  dc06              BGT      |L2.26|
00000c  28b1              CMP      r0,#0xb1
00000e  d012              BEQ      |L2.54|
000010  28b2              CMP      r0,#0xb2
000012  d011              BEQ      |L2.56|
000014  28b3              CMP      r0,#0xb3
000016  d11a              BNE      |L2.78|
000018  e00f              B        |L2.58|
                  |L2.26|
00001a  28b5              CMP      r0,#0xb5
00001c  d00f              BEQ      |L2.62|
00001e  28d1              CMP      r0,#0xd1
000020  d115              BNE      |L2.78|
000022  e00d              B        |L2.64|
                  |L2.36|
000024  f1a001d3          SUB      r1,r0,#0xd3
000028  2906              CMP      r1,#6
00002a  d210              BCS      |L2.78|
00002c  e8dff001          TBB      [pc,r1]
000030  0a0b0c0d          DCB      0x0a,0x0b,0x0c,0x0d
000034  0f0e              DCB      0x0f,0x0e
                  |L2.54|
;;;88     
;;;89                 case KEY0_LONG:
;;;90     				    
;;;91     					break;
000036  e00a              B        |L2.78|
                  |L2.56|
;;;92     		        case KEY1_LONG:
;;;93     							break;
000038  e009              B        |L2.78|
                  |L2.58|
;;;94     		        case KEY2_LONG:
;;;95     							break;
00003a  e008              B        |L2.78|
                  |L2.60|
;;;96     		        case KEY3_LONG:
;;;97     							break;
00003c  e007              B        |L2.78|
                  |L2.62|
;;;98     		        case KEY4_LONG:
;;;99     							break;
00003e  e006              B        |L2.78|
                  |L2.64|
;;;100    				case KEY0_UP:
;;;101    					 
;;;102    					break;
000040  e005              B        |L2.78|
                  |L2.66|
;;;103    	            case KEY1_UP:
;;;104    					  
;;;105    					  //SendMode5(2);
;;;106    		            break;
000042  e004              B        |L2.78|
;;;107    			    case KEY2_UP:
;;;108    					 
;;;109    					break;
000044  e003              B        |L2.78|
;;;110    			    case KEY3_UP:
;;;111    					  
;;;112    					break;
000046  e002              B        |L2.78|
;;;113    			    case KEY4_UP:
;;;114    					 
;;;115    					  break;
000048  e001              B        |L2.78|
;;;116    			   case KEY5_UP:
;;;117    			 		 
;;;118    					break;
00004a  e000              B        |L2.78|
;;;119    				 
;;;120    		  case KEY7_UP: 
;;;121    			 		  
;;;122    					break;
00004c  bf00              NOP      
                  |L2.78|
00004e  bf00              NOP                            ;91
;;;123    				 
;;;124        }
;;;125    }
000050  4770              BX       lr
;;;126    
                          ENDP


                          AREA ||i.MainKeytask||, CODE, READONLY, ALIGN=2

                  MainKeytask PROC
;;;126    
;;;127    void MainKeytask(void){
000000  b510              PUSH     {r4,lr}
;;;128    
;;;129     			if(Timer_GetElapse(&KEY_Tim) >10){
000002  4808              LDR      r0,|L3.36|
000004  f7fffffe          BL       Timer_GetElapse
000008  280a              CMP      r0,#0xa
00000a  d90a              BLS      |L3.34|
;;;130    
;;;131              keyflag =Key_Scan();
00000c  f7fffffe          BL       Key_Scan
000010  4905              LDR      r1,|L3.40|
000012  7008              STRB     r0,[r1,#0]
;;;132    				  KeyAction(keyflag);
000014  4608              MOV      r0,r1
000016  7800              LDRB     r0,[r0,#0]  ; keyflag
000018  f7fffffe          BL       KeyAction
;;;133    
;;;134          	Timer_Reset(&KEY_Tim);
00001c  4801              LDR      r0,|L3.36|
00001e  f7fffffe          BL       Timer_Reset
                  |L3.34|
;;;135        }
;;;136    
;;;137    }
000022  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  |L3.36|
                          DCD      KEY_Tim
                  |L3.40|
                          DCD      keyflag

                          AREA ||i.SetValueEn||, CODE, READONLY, ALIGN=1

                  SetValueEn PROC
;;;78      
;;;79     void SetValueEn(unsigned char *value){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;80     
;;;81     	 LCD_WriteString_en(0,0,value); //
000004  4622              MOV      r2,r4
000006  2100              MOVS     r1,#0
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       LCD_WriteString_en
;;;82     }
00000e  bd10              POP      {r4,pc}
;;;83     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  comdata
                          %        12
                  deyshowdata
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  TEXT_Buffer
000000  30633036          DCB      0x30,0x63,0x30,0x36
000004  00                DCB      0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2000              DCB      " ",0

                          AREA ||.data||, DATA, ALIGN=2

                  ModeMainFlag
000000  00                DCB      0x00
                  Snum
000001  000000            DCB      0x00,0x00,0x00
000004  00                DCB      0x00
                  CheckFlag
000005  000000            DCB      0x00,0x00,0x00
                  temp
                          DCD      0x00000000
                  showFlag
00000c  00                DCB      0x00
                  datatemp
00000d  000000            DCB      0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  KEY_Tim
                          %        8
                  keyflag
00001c  00                DCB      0x00
                  keyflag1
00001d  00                DCB      0x00
                  keyflag2
00001e  0000              DCB      0x00,0x00
                  Delayflag
                          DCD      0x00000000
                  DelayStr
                          DCD      ||.conststring||

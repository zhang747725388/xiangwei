; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\stm32f10x_it.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP -I..\BSP\IWDG -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\App\Debug -I..\App\SelfCheck -I..\App\Voltage -I..\App\ATC30 -I..\App -I..\BSP\uart -I..\App\Task -I..\App\Task -IH:\xiangwei\xiangwei\mart\Project\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\stm32f10x_it.crf ..\App\stm32f10x_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;138    
;;;139    void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;140    {
;;;141    	while(1);
000002  e7fe              B        |L1.2|
;;;142    }
;;;143    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;126    
;;;127    void HardFault_Handler(void)
000000  bf00              NOP      
                  |L2.2|
;;;128    {
;;;129    	while(1);
000002  e7fe              B        |L2.2|
;;;130    }
;;;131    
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;132    
;;;133    void MemManage_Handler(void)
000000  bf00              NOP      
                  |L3.2|
;;;134    {
;;;135    	while(1);
000002  e7fe              B        |L3.2|
;;;136    }
;;;137    
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;120    
;;;121    void NMI_Handler(void)
000000  bf00              NOP      
                  |L4.2|
;;;122    {
;;;123    	while(1);
000002  e7fe              B        |L4.2|
;;;124    }
;;;125    
                          ENDP


                          AREA ||i.UART4_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART4_IRQHandler PROC
;;;87     ----------------------------------------------------------------------*/
;;;88     void UART4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;89     {
;;;90     	if (USART_GetFlagStatus(UART4, USART_FLAG_RXNE) != RESET){	
000002  2120              MOVS     r1,#0x20
000004  4805              LDR      r0,|L5.28|
000006  f7fffffe          BL       USART_GetFlagStatus
00000a  b910              CBNZ     r0,|L5.18|
;;;91     //		Blueth_GetUsartData(USART_ReceiveData(UART4));
;;;92     	}else{
;;;93     		USART_ReceiveData(UART4);
00000c  4803              LDR      r0,|L5.28|
00000e  f7fffffe          BL       USART_ReceiveData
                  |L5.18|
;;;94     	}
;;;95     	USART_ClearFlag(UART4, USART_FLAG_RXNE);
000012  2120              MOVS     r1,#0x20
000014  4801              LDR      r0,|L5.28|
000016  f7fffffe          BL       USART_ClearFlag
;;;96     	
;;;97     }
00001a  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  |L5.28|
                          DCD      0x40004c00

                          AREA ||i.UART5_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART5_IRQHandler PROC
;;;109    ----------------------------------------------------------------------*/
;;;110    void UART5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112    	if (USART_GetFlagStatus(UART5, USART_FLAG_RXNE) != RESET){	
000002  2120              MOVS     r1,#0x20
000004  4805              LDR      r0,|L6.28|
000006  f7fffffe          BL       USART_GetFlagStatus
00000a  b910              CBNZ     r0,|L6.18|
;;;113    //		OBD_GetUsartData(USART_ReceiveData(UART5));
;;;114    	}else{
;;;115    		USART_ReceiveData(UART5);
00000c  4803              LDR      r0,|L6.28|
00000e  f7fffffe          BL       USART_ReceiveData
                  |L6.18|
;;;116    	}
;;;117    	USART_ClearFlag(UART5, USART_FLAG_RXNE);
000012  2120              MOVS     r1,#0x20
000014  4801              LDR      r0,|L6.28|
000016  f7fffffe          BL       USART_ClearFlag
;;;118    }
00001a  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  |L6.28|
                          DCD      0x40005000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;20     ----------------------------------------------------------------------*/
;;;21     void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET){	
000002  f2405125          MOV      r1,#0x525
000006  4806              LDR      r0,|L7.32|
000008  f7fffffe          BL       USART_GetITStatus
00000c  b910              CBNZ     r0,|L7.20|
;;;24     ////	 Debug_Data_Analysis(USART_ReceiveData(USART1));
;;;25     //		SysTest_GetUartData(USART_ReceiveData(USART1));
;;;26     	}else{
;;;27     		USART_ReceiveData(USART1);
00000e  4804              LDR      r0,|L7.32|
000010  f7fffffe          BL       USART_ReceiveData
                  |L7.20|
;;;28     	}
;;;29     	USART_ClearFlag(USART1, USART_FLAG_RXNE);
000014  2120              MOVS     r1,#0x20
000016  4802              LDR      r0,|L7.32|
000018  f7fffffe          BL       USART_ClearFlag
;;;30     
;;;31     }
00001c  bd10              POP      {r4,pc}
;;;32     
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x40013800

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;43     ----------------------------------------------------------------------*/
;;;44     void USART2_IRQHandler(void)       
000000  b510              PUSH     {r4,lr}
;;;45     {
;;;46     	if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET){	
000002  f2405125          MOV      r1,#0x525
000006  480a              LDR      r0,|L8.48|
000008  f7fffffe          BL       USART_GetITStatus
00000c  b138              CBZ      r0,|L8.30|
;;;47     //	 Debug_Data_Analysis(USART_ReceiveData(USART1));
;;;48     			SysTest_GetUartData(USART_ReceiveData(USART2));
00000e  4808              LDR      r0,|L8.48|
000010  f7fffffe          BL       USART_ReceiveData
000014  b2c4              UXTB     r4,r0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       SysTest_GetUartData
00001c  e002              B        |L8.36|
                  |L8.30|
;;;49     	}else{
;;;50     		USART_ReceiveData(USART2);
00001e  4804              LDR      r0,|L8.48|
000020  f7fffffe          BL       USART_ReceiveData
                  |L8.36|
;;;51     	}	
;;;52      	USART_ClearFlag(USART2, USART_FLAG_RXNE);
000024  2120              MOVS     r1,#0x20
000026  4802              LDR      r0,|L8.48|
000028  f7fffffe          BL       USART_ClearFlag
;;;53     }
00002c  bd10              POP      {r4,pc}
;;;54     
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      0x40004400

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;65     ----------------------------------------------------------------------*/
;;;66     void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;67     {
;;;68     	if (USART_GetFlagStatus(USART3, USART_FLAG_RXNE) != RESET){	
000002  2120              MOVS     r1,#0x20
000004  4805              LDR      r0,|L9.28|
000006  f7fffffe          BL       USART_GetFlagStatus
00000a  b910              CBNZ     r0,|L9.18|
;;;69     //		GetDataFromSim900A(USART_ReceiveData(USART3));
;;;70     	}else{
;;;71     		USART_ReceiveData(USART3);
00000c  4803              LDR      r0,|L9.28|
00000e  f7fffffe          BL       USART_ReceiveData
                  |L9.18|
;;;72     	}	
;;;73     	USART_ClearFlag(USART3, USART_FLAG_RXNE);	
000012  2120              MOVS     r1,#0x20
000014  4801              LDR      r0,|L9.28|
000016  f7fffffe          BL       USART_ClearFlag
;;;74     	
;;;75     }
00001a  bd10              POP      {r4,pc}
;;;76     
                          ENDP

                  |L9.28|
                          DCD      0x40004800

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;144    
;;;145    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L10.2|
;;;146    {
;;;147    	while(1);
000002  e7fe              B        |L10.2|
;;;148    }
;;;149    
                          ENDP


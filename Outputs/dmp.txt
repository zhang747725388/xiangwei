; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\dmp.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\dmp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP\GPS -I..\BSP\Sim900A -I..\BSP -I..\BSP\IWDG -I..\BSP\BlueTooth -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\BSP\Adxl345 -I..\BSP\TL718 -I..\BSP\PAM8403 -I..\BSP\W25X16 -I..\BSP\USB -I..\App\Debug -I..\App\SelfCheck -I..\App\GPSTask -I..\App\OBD -I..\App\Mems -I..\App\Voltage -I..\App\LKClient -I..\App\Paramlist -I..\App\ATC30 -I..\App -I..\BSP\mpu6050 -I..\App\mid-proc -I..\App\mpu6050Task -I..\BSP\dmp -I..\BSP\Bluetooth -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\dmp.crf ..\BSP\dmp\dmp.c]
                          THUMB

                          AREA ||i.dmpTask||, CODE, READONLY, ALIGN=2

                  dmpTask PROC
;;;199     ***/
;;;200    uint8_t dmpTask( void ) 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;201    {
000004  b095              SUB      sp,sp,#0x54
;;;202    		unsigned long sensor_timestamp;
;;;203        short gyro[3], accel[3], sensors;
;;;204        unsigned char more;
;;;205        long quat[4];
;;;206    		float Yaw, Roll, Pitch;	
;;;207    
;;;208    		if( dmp_read_fifo( gyro, accel, quat, &sensor_timestamp, &sensors, &more ) == -1 ){
000006  a80e              ADD      r0,sp,#0x38
000008  a90f              ADD      r1,sp,#0x3c
00000a  ab14              ADD      r3,sp,#0x50
00000c  aa0a              ADD      r2,sp,#0x28
00000e  e9cd1000          STRD     r1,r0,[sp,#0]
000012  a910              ADD      r1,sp,#0x40
000014  a812              ADD      r0,sp,#0x48
000016  f7fffffe          BL       dmp_read_fifo
00001a  1c40              ADDS     r0,r0,#1
00001c  d103              BNE      |L1.38|
;;;209    	  	return 	1;
00001e  2001              MOVS     r0,#1
                  |L1.32|
;;;210    		}
;;;211    
;;;212    		if (sensors & INV_WXYZ_QUAT ) {
;;;213    	    
;;;214    			q0 = quat[0] / q30;
;;;215    			q1 = quat[1] / q30;
;;;216    			q2 = quat[2] / q30;
;;;217    			q3 = quat[3] / q30;
;;;218        	 
;;;219    			Pitch  =asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; // pitch
;;;220    			Roll   =atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
;;;221    			Yaw    =atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;   //Yaw
;;;222    
;;;223    
;;;224     
;;;225    			
;;;226    			Euler_Pitch = Pitch * 100;
;;;227    			Euler_Roll = Roll * 100;
;;;228    			Euler_Yaw = Yaw * 100;
;;;229    			
;;;230    			Euler.Pitch = Pitch;
;;;231    			Euler.Roll = Roll;
;;;232    			Euler.Yaw = Yaw ;
;;;233    		/* DEBUG_LOCATION();
;;;234             DebugUart_Putstr("\r\n********************MPU6050 ************************\r\n");
;;;235    			    
;;;236    	     DebugUart_Putstr("\r\n********************MPU6050************************\r\n");
;;;237    	   */
;;;238    		}
;;;239    		return 0;
;;;240    
;;;241    }
000020  b015              ADD      sp,sp,#0x54
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.38|
000026  f8bd003c          LDRH     r0,[sp,#0x3c]         ;212
00002a  f4107f80          TST      r0,#0x100             ;212
00002e  d07d              BEQ      |L1.300|
000030  980a              LDR      r0,[sp,#0x28]         ;214
000032  f7fffffe          BL       __aeabi_i2f
000036  4605              MOV      r5,r0                 ;214
000038  f04f419d          MOV      r1,#0x4e800000        ;214
00003c  f7fffffe          BL       __aeabi_fdiv
000040  498f              LDR      r1,|L1.640|
000042  6008              STR      r0,[r1,#0]            ;214  ; q0
000044  980b              LDR      r0,[sp,#0x2c]         ;215
000046  f7fffffe          BL       __aeabi_i2f
00004a  4605              MOV      r5,r0                 ;215
00004c  f04f419d          MOV      r1,#0x4e800000        ;215
000050  f7fffffe          BL       __aeabi_fdiv
000054  498b              LDR      r1,|L1.644|
000056  6008              STR      r0,[r1,#0]            ;215  ; q1
000058  980c              LDR      r0,[sp,#0x30]         ;216
00005a  f7fffffe          BL       __aeabi_i2f
00005e  4605              MOV      r5,r0                 ;216
000060  f04f419d          MOV      r1,#0x4e800000        ;216
000064  f7fffffe          BL       __aeabi_fdiv
000068  4987              LDR      r1,|L1.648|
00006a  6008              STR      r0,[r1,#0]            ;216  ; q2
00006c  980d              LDR      r0,[sp,#0x34]         ;217
00006e  f7fffffe          BL       __aeabi_i2f
000072  4605              MOV      r5,r0                 ;217
000074  f04f419d          MOV      r1,#0x4e800000        ;217
000078  f7fffffe          BL       __aeabi_fdiv
00007c  4983              LDR      r1,|L1.652|
00007e  6008              STR      r0,[r1,#0]            ;217  ; q3
000080  487f              LDR      r0,|L1.640|
000082  6801              LDR      r1,[r0,#0]            ;219  ; q0
000084  f04f4080          MOV      r0,#0x40000000        ;219
000088  f7fffffe          BL       __aeabi_fmul
00008c  9005              STR      r0,[sp,#0x14]         ;219
00008e  487e              LDR      r0,|L1.648|
000090  6801              LDR      r1,[r0,#0]            ;219  ; q2
000092  9805              LDR      r0,[sp,#0x14]         ;219
000094  f7fffffe          BL       __aeabi_fmul
000098  4683              MOV      r11,r0                ;219
00009a  487a              LDR      r0,|L1.644|
00009c  6801              LDR      r1,[r0,#0]            ;219  ; q1
00009e  f04f4040          MOV      r0,#0xc0000000        ;219
0000a2  f7fffffe          BL       __aeabi_fmul
0000a6  9005              STR      r0,[sp,#0x14]         ;219
0000a8  4878              LDR      r0,|L1.652|
0000aa  6801              LDR      r1,[r0,#0]            ;219  ; q3
0000ac  9805              LDR      r0,[sp,#0x14]         ;219
0000ae  f7fffffe          BL       __aeabi_fmul
0000b2  4659              MOV      r1,r11                ;219
0000b4  9006              STR      r0,[sp,#0x18]         ;219
0000b6  f7fffffe          BL       __aeabi_fadd
0000ba  9007              STR      r0,[sp,#0x1c]         ;219
0000bc  f7fffffe          BL       __aeabi_f2d
0000c0  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;219
0000c4  f7fffffe          BL       asin
0000c8  4607              MOV      r7,r0                 ;219
0000ca  f04f3266          MOV      r2,#0x66666666        ;219
0000ce  4b70              LDR      r3,|L1.656|
0000d0  f7fffffe          BL       __aeabi_dmul
0000d4  4605              MOV      r5,r0                 ;219
0000d6  f7fffffe          BL       __aeabi_d2f
0000da  4682              MOV      r10,r0                ;219
0000dc  486a              LDR      r0,|L1.648|
0000de  6801              LDR      r1,[r0,#0]            ;220  ; q2
0000e0  f04f4080          MOV      r0,#0x40000000        ;220
0000e4  f7fffffe          BL       __aeabi_fmul
0000e8  9002              STR      r0,[sp,#8]            ;220
0000ea  4867              LDR      r0,|L1.648|
0000ec  6801              LDR      r1,[r0,#0]            ;220  ; q2
0000ee  9802              LDR      r0,[sp,#8]            ;220
0000f0  f7fffffe          BL       __aeabi_fmul
0000f4  4683              MOV      r11,r0                ;220
0000f6  4863              LDR      r0,|L1.644|
0000f8  6801              LDR      r1,[r0,#0]            ;220  ; q1
0000fa  f04f4040          MOV      r0,#0xc0000000        ;220
0000fe  f7fffffe          BL       __aeabi_fmul
000102  9002              STR      r0,[sp,#8]            ;220
000104  485f              LDR      r0,|L1.644|
000106  6801              LDR      r1,[r0,#0]            ;220  ; q1
000108  9802              LDR      r0,[sp,#8]            ;220
00010a  f7fffffe          BL       __aeabi_fmul
00010e  4659              MOV      r1,r11                ;220
000110  9003              STR      r0,[sp,#0xc]          ;220
000112  f7fffffe          BL       __aeabi_fsub
000116  4680              MOV      r8,r0                 ;220
000118  f04f517e          MOV      r1,#0x3f800000        ;220
00011c  f7fffffe          BL       __aeabi_fadd
000120  4607              MOV      r7,r0                 ;220
000122  f7fffffe          BL       __aeabi_f2d
000126  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;220
00012a  e000              B        |L1.302|
                  |L1.300|
00012c  e0a6              B        |L1.636|
                  |L1.302|
00012e  4854              LDR      r0,|L1.640|
000130  6801              LDR      r1,[r0,#0]            ;220  ; q0
000132  f04f4080          MOV      r0,#0x40000000        ;220
000136  f7fffffe          BL       __aeabi_fmul
00013a  9003              STR      r0,[sp,#0xc]          ;220
00013c  4851              LDR      r0,|L1.644|
00013e  6801              LDR      r1,[r0,#0]            ;220  ; q1
000140  9803              LDR      r0,[sp,#0xc]          ;220
000142  f7fffffe          BL       __aeabi_fmul
000146  4680              MOV      r8,r0                 ;220
000148  484f              LDR      r0,|L1.648|
00014a  6801              LDR      r1,[r0,#0]            ;220  ; q2
00014c  f04f4080          MOV      r0,#0x40000000        ;220
000150  f7fffffe          BL       __aeabi_fmul
000154  9003              STR      r0,[sp,#0xc]          ;220
000156  484d              LDR      r0,|L1.652|
000158  6801              LDR      r1,[r0,#0]            ;220  ; q3
00015a  9803              LDR      r0,[sp,#0xc]          ;220
00015c  f7fffffe          BL       __aeabi_fmul
000160  4683              MOV      r11,r0                ;220
000162  4641              MOV      r1,r8                 ;220
000164  f7fffffe          BL       __aeabi_fadd
000168  4607              MOV      r7,r0                 ;220
00016a  f7fffffe          BL       __aeabi_f2d
00016e  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;220
000172  e9dd2306          LDRD     r2,r3,[sp,#0x18]      ;220
000176  f7fffffe          BL       atan2
00017a  f04f3266          MOV      r2,#0x66666666        ;220
00017e  4b44              LDR      r3,|L1.656|
000180  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;220
000184  f7fffffe          BL       __aeabi_dmul
000188  4605              MOV      r5,r0                 ;220
00018a  f7fffffe          BL       __aeabi_d2f
00018e  4681              MOV      r9,r0                 ;220
000190  483e              LDR      r0,|L1.652|
000192  6801              LDR      r1,[r0,#0]            ;221  ; q3
000194  6800              LDR      r0,[r0,#0]            ;221  ; q3
000196  f7fffffe          BL       __aeabi_fmul
00019a  9004              STR      r0,[sp,#0x10]         ;221
00019c  483a              LDR      r0,|L1.648|
00019e  6801              LDR      r1,[r0,#0]            ;221  ; q2
0001a0  6800              LDR      r0,[r0,#0]            ;221  ; q2
0001a2  f7fffffe          BL       __aeabi_fmul
0001a6  9002              STR      r0,[sp,#8]            ;221
0001a8  4836              LDR      r0,|L1.644|
0001aa  6801              LDR      r1,[r0,#0]            ;221  ; q1
0001ac  6800              LDR      r0,[r0,#0]            ;221  ; q1
0001ae  f7fffffe          BL       __aeabi_fmul
0001b2  9001              STR      r0,[sp,#4]            ;221
0001b4  4832              LDR      r0,|L1.640|
0001b6  6801              LDR      r1,[r0,#0]            ;221  ; q0
0001b8  6800              LDR      r0,[r0,#0]            ;221  ; q0
0001ba  f7fffffe          BL       __aeabi_fmul
0001be  9000              STR      r0,[sp,#0]            ;221
0001c0  9901              LDR      r1,[sp,#4]            ;221
0001c2  f7fffffe          BL       __aeabi_fadd
0001c6  4683              MOV      r11,r0                ;221
0001c8  9902              LDR      r1,[sp,#8]            ;221
0001ca  f7fffffe          BL       __aeabi_fsub
0001ce  9003              STR      r0,[sp,#0xc]          ;221
0001d0  9904              LDR      r1,[sp,#0x10]         ;221
0001d2  f7fffffe          BL       __aeabi_fsub
0001d6  9005              STR      r0,[sp,#0x14]         ;221
0001d8  f7fffffe          BL       __aeabi_f2d
0001dc  4605              MOV      r5,r0                 ;221
0001de  460e              MOV      r6,r1                 ;221
0001e0  482a              LDR      r0,|L1.652|
0001e2  6801              LDR      r1,[r0,#0]            ;221  ; q3
0001e4  4826              LDR      r0,|L1.640|
0001e6  6800              LDR      r0,[r0,#0]            ;221  ; q0
0001e8  f7fffffe          BL       __aeabi_fmul
0001ec  9004              STR      r0,[sp,#0x10]         ;221
0001ee  4826              LDR      r0,|L1.648|
0001f0  6801              LDR      r1,[r0,#0]            ;221  ; q2
0001f2  4824              LDR      r0,|L1.644|
0001f4  6800              LDR      r0,[r0,#0]            ;221  ; q1
0001f6  f7fffffe          BL       __aeabi_fmul
0001fa  9003              STR      r0,[sp,#0xc]          ;221
0001fc  9904              LDR      r1,[sp,#0x10]         ;221
0001fe  f7fffffe          BL       __aeabi_fadd
000202  f04f4180          MOV      r1,#0x40000000        ;221
000206  9005              STR      r0,[sp,#0x14]         ;221
000208  f7fffffe          BL       __aeabi_fmul
00020c  4683              MOV      r11,r0                ;221
00020e  f7fffffe          BL       __aeabi_f2d
000212  462a              MOV      r2,r5                 ;221
000214  4633              MOV      r3,r6                 ;221
000216  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;221
00021a  f7fffffe          BL       atan2
00021e  f04f3266          MOV      r2,#0x66666666        ;221
000222  4b1b              LDR      r3,|L1.656|
000224  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;221
000228  f7fffffe          BL       __aeabi_dmul
00022c  4607              MOV      r7,r0                 ;221
00022e  f7fffffe          BL       __aeabi_d2f
000232  4604              MOV      r4,r0                 ;221
000234  4917              LDR      r1,|L1.660|
000236  4650              MOV      r0,r10                ;226
000238  f7fffffe          BL       __aeabi_fmul
00023c  4605              MOV      r5,r0                 ;226
00023e  f7fffffe          BL       __aeabi_f2iz
000242  b200              SXTH     r0,r0                 ;226
000244  4914              LDR      r1,|L1.664|
000246  8008              STRH     r0,[r1,#0]            ;226
000248  4912              LDR      r1,|L1.660|
00024a  4648              MOV      r0,r9                 ;227
00024c  f7fffffe          BL       __aeabi_fmul
000250  4605              MOV      r5,r0                 ;227
000252  f7fffffe          BL       __aeabi_f2iz
000256  b200              SXTH     r0,r0                 ;227
000258  4910              LDR      r1,|L1.668|
00025a  8008              STRH     r0,[r1,#0]            ;227
00025c  490d              LDR      r1,|L1.660|
00025e  4620              MOV      r0,r4                 ;228
000260  f7fffffe          BL       __aeabi_fmul
000264  4605              MOV      r5,r0                 ;228
000266  f7fffffe          BL       __aeabi_f2iz
00026a  b200              SXTH     r0,r0                 ;228
00026c  490c              LDR      r1,|L1.672|
00026e  8008              STRH     r0,[r1,#0]            ;228
000270  480c              LDR      r0,|L1.676|
000272  f8c0a000          STR      r10,[r0,#0]           ;230  ; Euler
000276  f8c09004          STR      r9,[r0,#4]            ;231  ; Euler
00027a  6084              STR      r4,[r0,#8]            ;232  ; Euler
                  |L1.636|
00027c  2000              MOVS     r0,#0                 ;239
00027e  e6cf              B        |L1.32|
                          ENDP

                  |L1.640|
                          DCD      ||q0||
                  |L1.644|
                          DCD      ||q1||
                  |L1.648|
                          DCD      ||q2||
                  |L1.652|
                          DCD      ||q3||
                  |L1.656|
                          DCD      0x404ca666
                  |L1.660|
                          DCD      0x42c80000
                  |L1.664|
                          DCD      Euler_Pitch
                  |L1.668|
                          DCD      Euler_Roll
                  |L1.672|
                          DCD      Euler_Yaw
                  |L1.676|
                          DCD      Euler

                          AREA ||i.dmp_init||, CODE, READONLY, ALIGN=2

                  dmp_init PROC
;;;95     
;;;96     uint8_t dmp_init( void )
000000  b570              PUSH     {r4-r6,lr}
;;;97     {
;;;98     	int result = 0;
000002  2400              MOVS     r4,#0
;;;99     	result = mpu_init();
000004  f7fffffe          BL       mpu_init
000008  4604              MOV      r4,r0
;;;100    
;;;101    	if( !result ) {
00000a  2c00              CMP      r4,#0
00000c  d151              BNE      |L2.178|
;;;102    
;;;103     
;;;104    		/********mpu_set_sensor*********/
;;;105    		if( !mpu_set_sensors( INV_XYZ_GYRO | INV_XYZ_ACCEL ) ) {
00000e  2078              MOVS     r0,#0x78
000010  f7fffffe          BL       mpu_set_sensors
000014  b918              CBNZ     r0,|L2.30|
;;;106    //			DebugUart_Putstr("mpu_set_sensor complete ......\n");
;;;107    			dmpstatus12=1;
000016  2001              MOVS     r0,#1
000018  492d              LDR      r1,|L2.208|
00001a  7008              STRB     r0,[r1,#0]
00001c  e004              B        |L2.40|
                  |L2.30|
;;;108    		} else {
;;;109    			//DebugUart_Putstr("mpu_set_sensor come across error ......\n");
;;;110    			dmpstatus12=2;
00001e  2002              MOVS     r0,#2
000020  492b              LDR      r1,|L2.208|
000022  7008              STRB     r0,[r1,#0]
;;;111    			return 0;
000024  2000              MOVS     r0,#0
                  |L2.38|
;;;112    		}
;;;113    
;;;114    		/************mpu_configure_fifo****************/
;;;115    		if( !mpu_configure_fifo( INV_XYZ_GYRO | INV_XYZ_ACCEL ) ) {
;;;116    //			DebugUart_Putstr("mpu_configure_fifo complete ......\n");
;;;117    			dmpstatus12=3;
;;;118    		} else {
;;;119    			//DebugUart_Putstr("mpu_configure_fifo come across error ......\n");
;;;120    			dmpstatus12=4;
;;;121    			return 0;
;;;122    		}
;;;123    
;;;124    		/***************mpu_set_sample_rate******************/
;;;125    		if ( !mpu_set_sample_rate( DEFAULT_MPU_HZ ) ) {
;;;126    //			DebugUart_Putstr("mpu_set_sample_rate complete ......\n");
;;;127    //			dmpstatus12=5;
;;;128    		} else {
;;;129    		//	DebugUart_Putstr("mpu_set_sample_rate error ......\n");
;;;130    			dmpstatus12=6;
;;;131    			return 0;
;;;132    		};
;;;133    
;;;134    		/************dmp_load_motion_driver_firmvare**********/
;;;135    		if( !dmp_load_motion_driver_firmware() ) {
;;;136    //	  		DebugUart_Putstr("dmp_load_motion_driver_firmware complete ......\n");
;;;137    		
;;;138    	 	 } else {
;;;139    	  	//	DebugUart_Putstr("dmp_load_motion_driver_firmware come across error ......\n");
;;;140    			 	dmpstatus12=7;
;;;141    			return 0;
;;;142    	  	 }	
;;;143    
;;;144    		/*****************dmp_set_orientation******************/
;;;145    		if( !dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)) ) {
;;;146    //	  	 	DebugUart_Putstr("dmp_set_orientation complete ......\n");
;;;147    	 	 } else {
;;;148    	  	//	DebugUart_Putstr("dmp_set_orientation come across error ......\n");
;;;149    			 	dmpstatus12=8;
;;;150    			return 0;
;;;151    	     }
;;;152    
;;;153    		/*****************dmp_enable_feature******************/
;;;154    		if( !dmp_enable_feature( DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
;;;155    	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
;;;156    	        DMP_FEATURE_GYRO_CAL ) ) {
;;;157    //		  	 DebugUart_Putstr("dmp_enable_feature complete ......\n");
;;;158    	    } else {
;;;159    		  	// DebugUart_Putstr("dmp_enable_feature come across error ......\n");
;;;160    					dmpstatus12=9;
;;;161    			 return 0;
;;;162    	    }
;;;163    
;;;164    		/*******************dmp_set_fifo_rate***********************/
;;;165    		if( !dmp_set_fifo_rate(DEFAULT_MPU_HZ) ) {
;;;166    //	  	 	DebugUart_Putstr("dmp_set_fifo_rate complete ......\n");
;;;167    		 } else {
;;;168    	  	 	//DebugUart_Putstr("dmp_set_fifo_rate come across error ......\n");
;;;169    			 	dmpstatus12=10;
;;;170    			return 0;
;;;171    	  	 }
;;;172    
;;;173    		run_self_test();
;;;174    
;;;175    		/******************mpu_set_dmp_state**********************/
;;;176    		if( !mpu_set_dmp_state(1) ) {
;;;177       	}
;;;178    	  	else {
;;;179    	  	//	DebugUart_Putstr("mpu_set_dmp_state come across error ......\n");
;;;180    					
;;;181    			return 0;
;;;182    	  	}
;;;183    
;;;184    	} else {
;;;185    			return 2;
;;;186    	}
;;;187    	Euler.Pitch = 0.0;
;;;188    	Euler.Roll = 0.0;
;;;189    	Euler.Yaw = 0.0;
;;;190    	
;;;191    	Euler_Pitch = 0;
;;;192    	Euler_Roll = 0;
;;;193    	Euler_Yaw = 0;
;;;194        return 1;
;;;195    }
000026  bd70              POP      {r4-r6,pc}
                  |L2.40|
000028  2078              MOVS     r0,#0x78              ;115
00002a  f7fffffe          BL       mpu_configure_fifo
00002e  b918              CBNZ     r0,|L2.56|
000030  2003              MOVS     r0,#3                 ;117
000032  4927              LDR      r1,|L2.208|
000034  7008              STRB     r0,[r1,#0]            ;117
000036  e004              B        |L2.66|
                  |L2.56|
000038  2004              MOVS     r0,#4                 ;120
00003a  4925              LDR      r1,|L2.208|
00003c  7008              STRB     r0,[r1,#0]            ;120
00003e  2000              MOVS     r0,#0                 ;121
000040  e7f1              B        |L2.38|
                  |L2.66|
000042  20c8              MOVS     r0,#0xc8              ;125
000044  f7fffffe          BL       mpu_set_sample_rate
000048  b120              CBZ      r0,|L2.84|
00004a  2006              MOVS     r0,#6                 ;130
00004c  4920              LDR      r1,|L2.208|
00004e  7008              STRB     r0,[r1,#0]            ;130
000050  2000              MOVS     r0,#0                 ;131
000052  e7e8              B        |L2.38|
                  |L2.84|
000054  f7fffffe          BL       dmp_load_motion_driver_firmware
000058  b120              CBZ      r0,|L2.100|
00005a  2007              MOVS     r0,#7                 ;140
00005c  491c              LDR      r1,|L2.208|
00005e  7008              STRB     r0,[r1,#0]            ;140
000060  2000              MOVS     r0,#0                 ;141
000062  e7e0              B        |L2.38|
                  |L2.100|
000064  481b              LDR      r0,|L2.212|
000066  f7fffffe          BL       inv_orientation_matrix_to_scalar
00006a  4605              MOV      r5,r0                 ;145
00006c  f7fffffe          BL       dmp_set_orientation
000070  b120              CBZ      r0,|L2.124|
000072  2008              MOVS     r0,#8                 ;149
000074  4916              LDR      r1,|L2.208|
000076  7008              STRB     r0,[r1,#0]            ;149
000078  2000              MOVS     r0,#0                 ;150
00007a  e7d4              B        |L2.38|
                  |L2.124|
00007c  f2401073          MOV      r0,#0x173             ;154
000080  f7fffffe          BL       dmp_enable_feature
000084  b120              CBZ      r0,|L2.144|
000086  2009              MOVS     r0,#9                 ;160
000088  4911              LDR      r1,|L2.208|
00008a  7008              STRB     r0,[r1,#0]            ;160
00008c  2000              MOVS     r0,#0                 ;161
00008e  e7ca              B        |L2.38|
                  |L2.144|
000090  20c8              MOVS     r0,#0xc8              ;165
000092  f7fffffe          BL       dmp_set_fifo_rate
000096  b120              CBZ      r0,|L2.162|
000098  200a              MOVS     r0,#0xa               ;169
00009a  490d              LDR      r1,|L2.208|
00009c  7008              STRB     r0,[r1,#0]            ;169
00009e  2000              MOVS     r0,#0                 ;170
0000a0  e7c1              B        |L2.38|
                  |L2.162|
0000a2  f7fffffe          BL       run_self_test
0000a6  2001              MOVS     r0,#1                 ;176
0000a8  f7fffffe          BL       mpu_set_dmp_state
0000ac  b118              CBZ      r0,|L2.182|
0000ae  2000              MOVS     r0,#0                 ;181
0000b0  e7b9              B        |L2.38|
                  |L2.178|
0000b2  2002              MOVS     r0,#2                 ;185
0000b4  e7b7              B        |L2.38|
                  |L2.182|
0000b6  2000              MOVS     r0,#0                 ;187
0000b8  4907              LDR      r1,|L2.216|
0000ba  6008              STR      r0,[r1,#0]            ;187  ; Euler
0000bc  6048              STR      r0,[r1,#4]            ;188  ; Euler
0000be  6088              STR      r0,[r1,#8]            ;189  ; Euler
0000c0  4906              LDR      r1,|L2.220|
0000c2  8008              STRH     r0,[r1,#0]            ;191
0000c4  4906              LDR      r1,|L2.224|
0000c6  8008              STRH     r0,[r1,#0]            ;192
0000c8  4906              LDR      r1,|L2.228|
0000ca  8008              STRH     r0,[r1,#0]            ;193
0000cc  2001              MOVS     r0,#1                 ;194
0000ce  e7aa              B        |L2.38|
;;;196    
                          ENDP

                  |L2.208|
                          DCD      dmpstatus12
                  |L2.212|
                          DCD      gyro_orientation
                  |L2.216|
                          DCD      Euler
                  |L2.220|
                          DCD      Euler_Pitch
                  |L2.224|
                          DCD      Euler_Roll
                  |L2.228|
                          DCD      Euler_Yaw

                          AREA ||i.inv_orientation_matrix_to_scalar||, CODE, READONLY, ALIGN=1

                  inv_orientation_matrix_to_scalar PROC
;;;44     
;;;45     unsigned short inv_orientation_matrix_to_scalar(
000000  b570              PUSH     {r4-r6,lr}
;;;46         const signed char *mtx)
;;;47     {
000002  4605              MOV      r5,r0
;;;48         unsigned short scalar;
;;;49     
;;;50         scalar = inv_row_2_scale(mtx);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       inv_row_2_scale
00000a  4604              MOV      r4,r0
;;;51         scalar |= inv_row_2_scale(mtx + 3) << 3;
00000c  1ce8              ADDS     r0,r5,#3
00000e  f7fffffe          BL       inv_row_2_scale
000012  ea4400c0          ORR      r0,r4,r0,LSL #3
000016  b284              UXTH     r4,r0
;;;52         scalar |= inv_row_2_scale(mtx + 6) << 6;
000018  1da8              ADDS     r0,r5,#6
00001a  f7fffffe          BL       inv_row_2_scale
00001e  ea441080          ORR      r0,r4,r0,LSL #6
000022  b284              UXTH     r4,r0
;;;53     
;;;54         return scalar;
000024  4620              MOV      r0,r4
;;;55     }
000026  bd70              POP      {r4-r6,pc}
;;;56     
                          ENDP


                          AREA ||i.inv_row_2_scale||, CODE, READONLY, ALIGN=1

                  inv_row_2_scale PROC
;;;22     
;;;23     static  unsigned short inv_row_2_scale(const signed char *row)
000000  4601              MOV      r1,r0
;;;24     {
;;;25         unsigned short b;
;;;26     
;;;27         if (row[0] > 0)
000002  f9912000          LDRSB    r2,[r1,#0]
000006  2a00              CMP      r2,#0
000008  dd01              BLE      |L4.14|
;;;28             b = 0;
00000a  2000              MOVS     r0,#0
00000c  e01e              B        |L4.76|
                  |L4.14|
;;;29         else if (row[0] < 0)
00000e  f9912000          LDRSB    r2,[r1,#0]
000012  2a00              CMP      r2,#0
000014  da01              BGE      |L4.26|
;;;30             b = 4;
000016  2004              MOVS     r0,#4
000018  e018              B        |L4.76|
                  |L4.26|
;;;31         else if (row[1] > 0)
00001a  f9912001          LDRSB    r2,[r1,#1]
00001e  2a00              CMP      r2,#0
000020  dd01              BLE      |L4.38|
;;;32             b = 1;
000022  2001              MOVS     r0,#1
000024  e012              B        |L4.76|
                  |L4.38|
;;;33         else if (row[1] < 0)
000026  f9912001          LDRSB    r2,[r1,#1]
00002a  2a00              CMP      r2,#0
00002c  da01              BGE      |L4.50|
;;;34             b = 5;
00002e  2005              MOVS     r0,#5
000030  e00c              B        |L4.76|
                  |L4.50|
;;;35         else if (row[2] > 0)
000032  f9912002          LDRSB    r2,[r1,#2]
000036  2a00              CMP      r2,#0
000038  dd01              BLE      |L4.62|
;;;36             b = 2;
00003a  2002              MOVS     r0,#2
00003c  e006              B        |L4.76|
                  |L4.62|
;;;37         else if (row[2] < 0)
00003e  f9912002          LDRSB    r2,[r1,#2]
000042  2a00              CMP      r2,#0
000044  da01              BGE      |L4.74|
;;;38             b = 6;
000046  2006              MOVS     r0,#6
000048  e000              B        |L4.76|
                  |L4.74|
;;;39         else
;;;40             b = 7;      // error
00004a  2007              MOVS     r0,#7
                  |L4.76|
;;;41         return b;
;;;42     }
00004c  4770              BX       lr
;;;43     
                          ENDP


                          AREA ||i.run_self_test||, CODE, READONLY, ALIGN=2

                  run_self_test PROC
;;;59     
;;;60     void run_self_test( void )
000000  b570              PUSH     {r4-r6,lr}
;;;61     {
000002  b088              SUB      sp,sp,#0x20
;;;62         int result;
;;;63         long gyro[3], accel[3];
;;;64     
;;;65     	 float sens;
;;;66          unsigned short accel_sens;
;;;67     
;;;68         result = mpu_run_self_test( gyro, accel );
000004  a902              ADD      r1,sp,#8
000006  a805              ADD      r0,sp,#0x14
000008  f7fffffe          BL       mpu_run_self_test
00000c  4604              MOV      r4,r0
;;;69     //	printf("%d\n",result);
;;;70         if ( result == 0x3 ) {
00000e  2c03              CMP      r4,#3
000010  d13c              BNE      |L5.140|
;;;71             /* 
;;;72     		 * Test passed. We can trust the gyro data here, so let's push it down
;;;73              * to the DMP.
;;;74              */
;;;75            
;;;76             mpu_get_gyro_sens( &sens );
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       mpu_get_gyro_sens
;;;77             gyro[0] = (long)(gyro[0] * sens);
000018  9805              LDR      r0,[sp,#0x14]
00001a  f7fffffe          BL       __aeabi_i2f
00001e  4606              MOV      r6,r0
000020  9901              LDR      r1,[sp,#4]
000022  f7fffffe          BL       __aeabi_fmul
000026  4605              MOV      r5,r0
000028  f7fffffe          BL       __aeabi_f2iz
00002c  9005              STR      r0,[sp,#0x14]
;;;78             gyro[1] = (long)(gyro[1] * sens);
00002e  9806              LDR      r0,[sp,#0x18]
000030  f7fffffe          BL       __aeabi_i2f
000034  4606              MOV      r6,r0
000036  9901              LDR      r1,[sp,#4]
000038  f7fffffe          BL       __aeabi_fmul
00003c  4605              MOV      r5,r0
00003e  f7fffffe          BL       __aeabi_f2iz
000042  9006              STR      r0,[sp,#0x18]
;;;79             gyro[2] = (long)(gyro[2] * sens);
000044  9807              LDR      r0,[sp,#0x1c]
000046  f7fffffe          BL       __aeabi_i2f
00004a  4606              MOV      r6,r0
00004c  9901              LDR      r1,[sp,#4]
00004e  f7fffffe          BL       __aeabi_fmul
000052  4605              MOV      r5,r0
000054  f7fffffe          BL       __aeabi_f2iz
000058  9007              STR      r0,[sp,#0x1c]
;;;80             dmp_set_gyro_bias(gyro);
00005a  a805              ADD      r0,sp,#0x14
00005c  f7fffffe          BL       dmp_set_gyro_bias
;;;81             mpu_get_accel_sens(&accel_sens);
000060  4668              MOV      r0,sp
000062  f7fffffe          BL       mpu_get_accel_sens
;;;82             accel[0] *= accel_sens;
000066  f8bd1000          LDRH     r1,[sp,#0]
00006a  9802              LDR      r0,[sp,#8]
00006c  4348              MULS     r0,r1,r0
00006e  9002              STR      r0,[sp,#8]
;;;83             accel[1] *= accel_sens;
000070  f8bd1000          LDRH     r1,[sp,#0]
000074  9803              LDR      r0,[sp,#0xc]
000076  4348              MULS     r0,r1,r0
000078  9003              STR      r0,[sp,#0xc]
;;;84             accel[2] *= accel_sens;
00007a  f8bd1000          LDRH     r1,[sp,#0]
00007e  9804              LDR      r0,[sp,#0x10]
000080  4348              MULS     r0,r1,r0
000082  9004              STR      r0,[sp,#0x10]
;;;85             dmp_set_accel_bias(accel);
000084  a802              ADD      r0,sp,#8
000086  f7fffffe          BL       dmp_set_accel_bias
00008a  e002              B        |L5.146|
                  |L5.140|
;;;86      }
;;;87     	else {
;;;88     		//DebugUart_Putstr("bias has not been modified ......\n");
;;;89     		dmpstatus12=22;
00008c  2016              MOVS     r0,#0x16
00008e  4902              LDR      r1,|L5.152|
000090  7008              STRB     r0,[r1,#0]
                  |L5.146|
;;;90     	}
;;;91     
;;;92     
;;;93     }
000092  b008              ADD      sp,sp,#0x20
000094  bd70              POP      {r4-r6,pc}
;;;94     
                          ENDP

000096  0000              DCW      0x0000
                  |L5.152|
                          DCD      dmpstatus12

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Euler
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  gyro_orientation
000000  ff000000          DCB      0xff,0x00,0x00,0x00
000004  ff000000          DCB      0xff,0x00,0x00,0x00
000008  01                DCB      0x01
                  dmpstatus12
000009  000000            DCB      0x00,0x00,0x00
                  ||q0||
00000c  3f800000          DCFS     0x3f800000 ; 1
                  ||q1||
000010  00000000          DCFS     0x00000000 ; 0
                  ||q2||
000014  00000000          DCFS     0x00000000 ; 0
                  ||q3||
000018  00000000          DCFS     0x00000000 ; 0
                  Euler_Pitch
00001c  0000              DCB      0x00,0x00
                  Euler_Roll
00001e  0000              DCB      0x00,0x00
                  Euler_Yaw
000020  0000              DCB      0x00,0x00

; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outputs\remote.o --asm_dir=..\Outputs\ --list_dir=..\Outputs\ --depend=..\outputs\remote.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\Library\inc -I..\Library\STM32_USB-FS-Device_Driver\inc -I..\Kernel -I..\BSP\Basic -I..\BSP -I..\BSP\IWDG -I..\BSP\Led -I..\BSP\Key -I..\BSP\ADC -I..\App\Debug -I..\App\SelfCheck -I..\App\Voltage -I..\App\ATC30 -I..\App -I..\BSP\uart -I..\App\Task -I..\App\Task -IH:\gitprojecct\xiangwei\Project\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210C_EVAL -DHXZ_RELEASE_VERSION --omf_browse=..\outputs\remote.crf ..\BSP\remote.c]
                          THUMB

                          AREA ||i.Remote_Init||, CODE, READONLY, ALIGN=2

                  Remote_Init PROC
;;;6       u8* str=0; 
;;;7      void Remote_Init(void)    			  
000000  b500              PUSH     {lr}
;;;8      {  
000002  b089              SUB      sp,sp,#0x24
;;;9      
;;;10     	GPIO_InitTypeDef GPIO_InitStructure;
;;;11     	NVIC_InitTypeDef NVIC_InitStructure;
;;;12     	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;13     	TIM_ICInitTypeDef  TIM_ICInitStructure;  
;;;14      
;;;15      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE); //使能PORTB时钟 
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;16     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);	//TIM5 时钟使能 
00000c  2101              MOVS     r1,#1
00000e  2008              MOVS     r0,#8
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;17      
;;;18     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;				 //PA1 输入 
000014  2002              MOVS     r0,#2
000016  f8ad0020          STRH     r0,[sp,#0x20]
;;;19      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; 		//上拉输入 
00001a  2028              MOVS     r0,#0x28
00001c  f88d0023          STRB     r0,[sp,#0x23]
;;;20      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000020  2003              MOVS     r0,#3
000022  f88d0022          STRB     r0,[sp,#0x22]
;;;21      	GPIO_Init(GPIOA, &GPIO_InitStructure);
000026  a908              ADD      r1,sp,#0x20
000028  4821              LDR      r0,|L1.176|
00002a  f7fffffe          BL       GPIO_Init
;;;22      	GPIO_SetBits(GPIOA,GPIO_Pin_1);	//初始化GPIOA1
00002e  2102              MOVS     r1,#2
000030  481f              LDR      r0,|L1.176|
000032  f7fffffe          BL       GPIO_SetBits
;;;23     	
;;;24     						  
;;;25      	TIM_TimeBaseStructure.TIM_Period = 10000; //设定计数器自动重装值 最大10ms溢出  
000036  f2427010          MOV      r0,#0x2710
00003a  f8ad0014          STRH     r0,[sp,#0x14]
;;;26     	TIM_TimeBaseStructure.TIM_Prescaler =(72-1); 	//预分频器,1M的计数频率,1us加1.	   
00003e  2047              MOVS     r0,#0x47
000040  f8ad0010          STRH     r0,[sp,#0x10]
;;;27     	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //设置时钟分割:TDTS = Tck_tim
000044  2000              MOVS     r0,#0
000046  f8ad0016          STRH     r0,[sp,#0x16]
;;;28     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
00004a  f8ad0012          STRH     r0,[sp,#0x12]
;;;29     
;;;30     	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure); //根据指定的参数初始化TIMx
00004e  a904              ADD      r1,sp,#0x10
000050  4818              LDR      r0,|L1.180|
000052  f7fffffe          BL       TIM_TimeBaseInit
;;;31       TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;  // 选择输入端 IC2映射到TI5上
000056  2004              MOVS     r0,#4
000058  f8ad0004          STRH     r0,[sp,#4]
;;;32       TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;	//上升沿捕获
00005c  2000              MOVS     r0,#0
00005e  f8ad0006          STRH     r0,[sp,#6]
;;;33       TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
000062  2001              MOVS     r0,#1
000064  f8ad0008          STRH     r0,[sp,#8]
;;;34       TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 //配置输入分频,不分频 
000068  2000              MOVS     r0,#0
00006a  f8ad000a          STRH     r0,[sp,#0xa]
;;;35       TIM_ICInitStructure.TIM_ICFilter = 0x03;//IC4F=0011 配置输入滤波器 8个定时器时钟周期滤波
00006e  2003              MOVS     r0,#3
000070  f8ad000c          STRH     r0,[sp,#0xc]
;;;36       TIM_ICInit(TIM5, &TIM_ICInitStructure);//初始化定时器输入捕获通道
000074  a901              ADD      r1,sp,#4
000076  480f              LDR      r0,|L1.180|
000078  f7fffffe          BL       TIM_ICInit
;;;37     
;;;38       TIM_Cmd(TIM5,ENABLE ); 	//使能定时器5
00007c  2101              MOVS     r1,#1
00007e  480d              LDR      r0,|L1.180|
000080  f7fffffe          BL       TIM_Cmd
;;;39      
;;;40      						
;;;41     	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;  //TIM5中断
000084  2032              MOVS     r0,#0x32
000086  f88d001c          STRB     r0,[sp,#0x1c]
;;;42     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;  //先占优先级0级
00008a  2001              MOVS     r0,#1
00008c  f88d001d          STRB     r0,[sp,#0x1d]
;;;43     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;  //从优先级3级
000090  2003              MOVS     r0,#3
000092  f88d001e          STRB     r0,[sp,#0x1e]
;;;44     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000096  2001              MOVS     r0,#1
000098  f88d001f          STRB     r0,[sp,#0x1f]
;;;45     	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器	
00009c  a807              ADD      r0,sp,#0x1c
00009e  f7fffffe          BL       NVIC_Init
;;;46      
;;;47      	TIM_ITConfig( TIM5,TIM_IT_Update|TIM_IT_CC2,ENABLE);//允许更新中断 ,允许CC2IE捕获中断	
0000a2  2201              MOVS     r2,#1
0000a4  2105              MOVS     r1,#5
0000a6  4803              LDR      r0,|L1.180|
0000a8  f7fffffe          BL       TIM_ITConfig
;;;48     }
0000ac  b009              ADD      sp,sp,#0x24
0000ae  bd00              POP      {pc}
;;;49     
                          ENDP

                  |L1.176|
                          DCD      0x40010800
                  |L1.180|
                          DCD      0x40000c00

                          AREA ||i.Remote_Scan||, CODE, READONLY, ALIGN=2

                  Remote_Scan PROC
;;;136    ;================================  */
;;;137    u8 Remote_Scan(void)
000000  b510              PUSH     {r4,lr}
;;;138    {        
;;;139    	u8 sta=0;       
000002  2000              MOVS     r0,#0
;;;140        u8 t1,t2;  
;;;141    	if(RmtSta&(1<<6))//得到一个按键的所有信息了
000004  4b15              LDR      r3,|L2.92|
000006  781b              LDRB     r3,[r3,#0]  ; RmtSta
000008  f0030340          AND      r3,r3,#0x40
00000c  b32b              CBZ      r3,|L2.90|
;;;142    	{ 
;;;143    	    t1=RmtRec>>24;			//得到地址码
00000e  4b14              LDR      r3,|L2.96|
000010  681b              LDR      r3,[r3,#0]  ; RmtRec
000012  0e19              LSRS     r1,r3,#24
;;;144    	    t2=(RmtRec>>16)&0xff;	//得到地址反码 
000014  4b12              LDR      r3,|L2.96|
000016  681b              LDR      r3,[r3,#0]  ; RmtRec
000018  f3c34207          UBFX     r2,r3,#16,#8
;;;145     	    if((t1==(u8)~t2)&&t1==REMOTE_ID)//检验遥控识别码(ID)及地址 
00001c  43d3              MVNS     r3,r2
00001e  b2db              UXTB     r3,r3
000020  428b              CMP      r3,r1
000022  d10b              BNE      |L2.60|
000024  b951              CBNZ     r1,|L2.60|
;;;146    	    { 
;;;147    	        t1=RmtRec>>8;
000026  4b0e              LDR      r3,|L2.96|
000028  881b              LDRH     r3,[r3,#0]  ; RmtRec
00002a  f3c32107          UBFX     r1,r3,#8,#8
;;;148    	        t2=RmtRec; 	
00002e  4b0c              LDR      r3,|L2.96|
000030  781a              LDRB     r2,[r3,#0]  ; RmtRec
;;;149    	        if(t1==(u8)~t2)sta=t1;//键值正确	 
000032  43d3              MVNS     r3,r2
000034  b2db              UXTB     r3,r3
000036  428b              CMP      r3,r1
000038  d100              BNE      |L2.60|
00003a  4608              MOV      r0,r1
                  |L2.60|
;;;150    		}   
;;;151    		if((sta==0)||((RmtSta&0X80)==0))//按键数据错误/遥控已经没有按下了
00003c  b120              CBZ      r0,|L2.72|
00003e  4b07              LDR      r3,|L2.92|
000040  781b              LDRB     r3,[r3,#0]  ; RmtSta
000042  f0030380          AND      r3,r3,#0x80
000046  b943              CBNZ     r3,|L2.90|
                  |L2.72|
;;;152    		{
;;;153    		 	RmtSta&=~(1<<6);//清除接收到有效按键标识
000048  4b04              LDR      r3,|L2.92|
00004a  781b              LDRB     r3,[r3,#0]  ; RmtSta
00004c  f0230340          BIC      r3,r3,#0x40
000050  4c02              LDR      r4,|L2.92|
000052  7023              STRB     r3,[r4,#0]
;;;154    			RmtCnt=0;		//清除按键次数计数器
000054  2300              MOVS     r3,#0
000056  4c03              LDR      r4,|L2.100|
000058  7023              STRB     r3,[r4,#0]
                  |L2.90|
;;;155    		}
;;;156    	}  
;;;157        return sta;
;;;158    }
00005a  bd10              POP      {r4,pc}
;;;159    
                          ENDP

                  |L2.92|
                          DCD      RmtSta
                  |L2.96|
                          DCD      RmtRec
                  |L2.100|
                          DCD      RmtCnt

                          AREA ||i.Remote_check||, CODE, READONLY, ALIGN=2

                  Remote_check PROC
;;;259    }
;;;260    void Remote_check(void){
000000  b510              PUSH     {r4,lr}
;;;261    
;;;262      u8 key; 
;;;263      Remotecode remotecode;
;;;264    	key=Remote_Scan();	
000002  f7fffffe          BL       Remote_Scan
000006  4604              MOV      r4,r0
;;;265    		if(key)
000008  2c00              CMP      r4,#0
00000a  d06f              BEQ      |L3.236|
;;;266    		{	 
;;;267    		 
;;;268    			switch(key)
00000c  2c62              CMP      r4,#0x62
00000e  d039              BEQ      |L3.132|
000010  dc17              BGT      |L3.66|
000012  2c30              CMP      r4,#0x30
000014  d062              BEQ      |L3.220|
000016  dc0b              BGT      |L3.48|
000018  2c10              CMP      r4,#0x10
00001a  d06d              BEQ      |L3.248|
00001c  dc03              BGT      |L3.38|
00001e  b34c              CBZ      r4,|L3.116|
000020  2c02              CMP      r4,#2
000022  d17d              BNE      |L3.288|
000024  e032              B        |L3.140|
                  |L3.38|
000026  2c18              CMP      r4,#0x18
000028  d05c              BEQ      |L3.228|
00002a  2c22              CMP      r4,#0x22
00002c  d178              BNE      |L3.288|
00002e  e039              B        |L3.164|
                  |L3.48|
000030  2c38              CMP      r4,#0x38
000032  d065              BEQ      |L3.256|
000034  2c42              CMP      r4,#0x42
000036  d06b              BEQ      |L3.272|
000038  2c52              CMP      r4,#0x52
00003a  d06d              BEQ      |L3.280|
00003c  2c5a              CMP      r4,#0x5a
00003e  d16f              BNE      |L3.288|
000040  e062              B        |L3.264|
                  |L3.66|
000042  2ca8              CMP      r4,#0xa8
000044  d036              BEQ      |L3.180|
000046  dc0c              BGT      |L3.98|
000048  2c90              CMP      r4,#0x90
00004a  d037              BEQ      |L3.188|
00004c  dc04              BGT      |L3.88|
00004e  2c68              CMP      r4,#0x68
000050  d038              BEQ      |L3.196|
000052  2c7a              CMP      r4,#0x7a
000054  d164              BNE      |L3.288|
000056  e04b              B        |L3.240|
                  |L3.88|
000058  2c98              CMP      r4,#0x98
00005a  d037              BEQ      |L3.204|
00005c  2ca2              CMP      r4,#0xa2
00005e  d15f              BNE      |L3.288|
000060  e00c              B        |L3.124|
                  |L3.98|
000062  2cb0              CMP      r4,#0xb0
000064  d036              BEQ      |L3.212|
000066  2cc2              CMP      r4,#0xc2
000068  d018              BEQ      |L3.156|
00006a  2ce0              CMP      r4,#0xe0
00006c  d01e              BEQ      |L3.172|
00006e  2ce2              CMP      r4,#0xe2
000070  d156              BNE      |L3.288|
000072  e00f              B        |L3.148|
                  |L3.116|
;;;269    			{
;;;270    
;;;271    	case Code_UP    :
;;;272    		             str="ERROR";
000074  a02b              ADR      r0,|L3.292|
000076  492d              LDR      r1,|L3.300|
000078  6008              STR      r0,[r1,#0]  ; str
;;;273    		             break;
00007a  e051              B        |L3.288|
                  |L3.124|
;;;274    	case Code_DOWN  :
;;;275    		             str="POWER";
00007c  a02c              ADR      r0,|L3.304|
00007e  492b              LDR      r1,|L3.300|
000080  6008              STR      r0,[r1,#0]  ; str
;;;276    		             break;
000082  e04d              B        |L3.288|
                  |L3.132|
;;;277    	case Code_PSW   :
;;;278    		             str="UP";
000084  a02c              ADR      r0,|L3.312|
000086  4929              LDR      r1,|L3.300|
000088  6008              STR      r0,[r1,#0]  ; str
;;;279    		             break;
00008a  e049              B        |L3.288|
                  |L3.140|
;;;280    	case Code_EX    :
;;;281    		             str="PLAY";
00008c  a02b              ADR      r0,|L3.316|
00008e  4927              LDR      r1,|L3.300|
000090  6008              STR      r0,[r1,#0]  ; str
;;;282    		             break;
000092  e045              B        |L3.288|
                  |L3.148|
;;;283    	case Code_A     :
;;;284    		             str="ALIENTEK";
000094  a02b              ADR      r0,|L3.324|
000096  4925              LDR      r1,|L3.300|
000098  6008              STR      r0,[r1,#0]  ; str
;;;285    		             break;
00009a  e041              B        |L3.288|
                  |L3.156|
;;;286    	case Code_B     :
;;;287    		             str="RIGHT";
00009c  a02c              ADR      r0,|L3.336|
00009e  4923              LDR      r1,|L3.300|
0000a0  6008              STR      r0,[r1,#0]  ; str
;;;288    		             break;
0000a2  e03d              B        |L3.288|
                  |L3.164|
;;;289    	case Code_C     :
;;;290    		             str="LEFT";
0000a4  a02c              ADR      r0,|L3.344|
0000a6  4921              LDR      r1,|L3.300|
0000a8  6008              STR      r0,[r1,#0]  ; str
;;;291    		             break;
0000aa  e039              B        |L3.288|
                  |L3.172|
;;;292    	case Code_D     :
;;;293    		             str="VOL-";
0000ac  a02c              ADR      r0,|L3.352|
0000ae  491f              LDR      r1,|L3.300|
0000b0  6008              STR      r0,[r1,#0]  ; str
;;;294    		             break;
0000b2  e035              B        |L3.288|
                  |L3.180|
;;;295    	case Code_E     :
;;;296    		             str="DOWN";
0000b4  a02c              ADR      r0,|L3.360|
0000b6  491d              LDR      r1,|L3.300|
0000b8  6008              STR      r0,[r1,#0]  ; str
;;;297    		             break;
0000ba  e031              B        |L3.288|
                  |L3.188|
;;;298    	case Code_S     :
;;;299    		             str="VOL+";
0000bc  a02c              ADR      r0,|L3.368|
0000be  491b              LDR      r1,|L3.300|
0000c0  6008              STR      r0,[r1,#0]  ; str
;;;300    		             break;
0000c2  e02d              B        |L3.288|
                  |L3.196|
;;;301    	case Code_CON   :
;;;302    		             str="1";
0000c4  a02c              ADR      r0,|L3.376|
0000c6  4919              LDR      r1,|L3.300|
0000c8  6008              STR      r0,[r1,#0]  ; str
;;;303    		             break;
0000ca  e029              B        |L3.288|
                  |L3.204|
;;;304    	case Code_T1    :
;;;305    		             str="2";
0000cc  a02b              ADR      r0,|L3.380|
0000ce  4917              LDR      r1,|L3.300|
0000d0  6008              STR      r0,[r1,#0]  ; str
;;;306    		             break;
0000d2  e025              B        |L3.288|
                  |L3.212|
;;;307    	case Code_T2    :
;;;308    		             str="3";
0000d4  a02a              ADR      r0,|L3.384|
0000d6  4915              LDR      r1,|L3.300|
0000d8  6008              STR      r0,[r1,#0]  ; str
;;;309    		             break;
0000da  e021              B        |L3.288|
                  |L3.220|
;;;310    	case Code_T3    :
;;;311    		             str="4";
0000dc  a029              ADR      r0,|L3.388|
0000de  4913              LDR      r1,|L3.300|
0000e0  6008              STR      r0,[r1,#0]  ; str
;;;312    		             break;
0000e2  e01d              B        |L3.288|
                  |L3.228|
;;;313    	case Code_T4    :
;;;314    		             str="5";
0000e4  a028              ADR      r0,|L3.392|
0000e6  4911              LDR      r1,|L3.300|
0000e8  6008              STR      r0,[r1,#0]  ; str
;;;315    		             break;
0000ea  e019              B        |L3.288|
                  |L3.236|
0000ec  e019              B        |L3.290|
0000ee  e003              B        |L3.248|
                  |L3.240|
;;;316    	case Code_T5    :
;;;317    		             str="6";
0000f0  a026              ADR      r0,|L3.396|
0000f2  490e              LDR      r1,|L3.300|
0000f4  6008              STR      r0,[r1,#0]  ; str
;;;318    		             break;
0000f6  e013              B        |L3.288|
                  |L3.248|
;;;319    	case Code_T6    :
;;;320    		             str="7";
0000f8  a025              ADR      r0,|L3.400|
0000fa  490c              LDR      r1,|L3.300|
0000fc  6008              STR      r0,[r1,#0]  ; str
;;;321    		             break;
0000fe  e00f              B        |L3.288|
                  |L3.256|
;;;322    	case Code_T7    :
;;;323    		             str="8";
000100  a024              ADR      r0,|L3.404|
000102  490a              LDR      r1,|L3.300|
000104  6008              STR      r0,[r1,#0]  ; str
;;;324    		             break;
000106  e00b              B        |L3.288|
                  |L3.264|
;;;325    	case Code_T8    :
;;;326    		             str="9";
000108  a023              ADR      r0,|L3.408|
00010a  4908              LDR      r1,|L3.300|
00010c  6008              STR      r0,[r1,#0]  ; str
;;;327    		             break;
00010e  e007              B        |L3.288|
                  |L3.272|
;;;328    	case Code_T9    :
;;;329    		             str="0";
000110  a022              ADR      r0,|L3.412|
000112  4906              LDR      r1,|L3.300|
000114  6008              STR      r0,[r1,#0]  ; str
;;;330    		             break;
000116  e003              B        |L3.288|
                  |L3.280|
;;;331    	case Code_T10   :
;;;332    		             str="DELETE";
000118  a021              ADR      r0,|L3.416|
00011a  4904              LDR      r1,|L3.300|
00011c  6008              STR      r0,[r1,#0]  ; str
;;;333    		             break;		 
00011e  bf00              NOP      
                  |L3.288|
000120  bf00              NOP                            ;273
                  |L3.290|
;;;334    			}
;;;335    		 
;;;336    		}
;;;337    
;;;338    
;;;339    }
000122  bd10              POP      {r4,pc}
                          ENDP

                  |L3.292|
000124  4552524f          DCB      "ERROR",0
000128  5200    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L3.300|
                          DCD      ||str||
                  |L3.304|
000130  504f5745          DCB      "POWER",0
000134  5200    
000136  00                DCB      0
000137  00                DCB      0
                  |L3.312|
000138  555000            DCB      "UP",0
00013b  00                DCB      0
                  |L3.316|
00013c  504c4159          DCB      "PLAY",0
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L3.324|
000144  414c4945          DCB      "ALIENTEK",0
000148  4e54454b
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L3.336|
000150  52494748          DCB      "RIGHT",0
000154  5400    
000156  00                DCB      0
000157  00                DCB      0
                  |L3.344|
000158  4c454654          DCB      "LEFT",0
00015c  00      
00015d  00                DCB      0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L3.352|
000160  564f4c2d          DCB      "VOL-",0
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L3.360|
000168  444f574e          DCB      "DOWN",0
00016c  00      
00016d  00                DCB      0
00016e  00                DCB      0
00016f  00                DCB      0
                  |L3.368|
000170  564f4c2b          DCB      "VOL+",0
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
                  |L3.376|
000178  3100              DCB      "1",0
00017a  00                DCB      0
00017b  00                DCB      0
                  |L3.380|
00017c  3200              DCB      "2",0
00017e  00                DCB      0
00017f  00                DCB      0
                  |L3.384|
000180  3300              DCB      "3",0
000182  00                DCB      0
000183  00                DCB      0
                  |L3.388|
000184  3400              DCB      "4",0
000186  00                DCB      0
000187  00                DCB      0
                  |L3.392|
000188  3500              DCB      "5",0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L3.396|
00018c  3600              DCB      "6",0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L3.400|
000190  3700              DCB      "7",0
000192  00                DCB      0
000193  00                DCB      0
                  |L3.404|
000194  3800              DCB      "8",0
000196  00                DCB      0
000197  00                DCB      0
                  |L3.408|
000198  3900              DCB      "9",0
00019a  00                DCB      0
00019b  00                DCB      0
                  |L3.412|
00019c  3000              DCB      "0",0
00019e  00                DCB      0
00019f  00                DCB      0
                  |L3.416|
0001a0  44454c45          DCB      "DELETE",0
0001a4  544500  
0001a7  00                DCB      0

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;160    
;;;161    void TIM2_IRQHandler( void )
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
;;;163    	static INT16U IR_LastPluse = 0;
;;;164    	static INT8U  IR_Sta         = 0;
;;;165    	static INT32U IR_Code      = 0;
;;;166    	static INT8U  IR_PluseCnt  = 0;
;;;167    	static INT8U  IR_Up          = 0;
;;;168    	INT16U IR_ThisPluse;
;;;169    	INT16U IR_PluseSub;
;;;170    	
;;;171    
;;;172    	if ( TIM_GetITStatus( TIM2, TIM_IT_CC2 ) == SET )
000002  2104              MOVS     r1,#4
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d130              BNE      |L4.112|
;;;173    	{
;;;174    		TIM_ClearFlag( TIM2, TIM_IT_CC2 );
00000e  2104              MOVS     r1,#4
000010  0780              LSLS     r0,r0,#30
000012  f7fffffe          BL       TIM_ClearFlag
;;;175    		IR_Up = 0;
000016  2000              MOVS     r0,#0
000018  4954              LDR      r1,|L4.364|
00001a  7008              STRB     r0,[r1,#0]
;;;176    		IR_ThisPluse = TIM_GetCapture2( TIM2 );
00001c  f04f4080          MOV      r0,#0x40000000
000020  f7fffffe          BL       TIM_GetCapture2
000024  4605              MOV      r5,r0
;;;177    		
;;;178    		if ( IR_ThisPluse > IR_LastPluse )
000026  4852              LDR      r0,|L4.368|
000028  8800              LDRH     r0,[r0,#0]  ; IR_LastPluse
00002a  4285              CMP      r5,r0
00002c  dd04              BLE      |L4.56|
;;;179    		{
;;;180    			IR_PluseSub = IR_ThisPluse - IR_LastPluse;
00002e  4850              LDR      r0,|L4.368|
000030  8800              LDRH     r0,[r0,#0]  ; IR_LastPluse
000032  1a28              SUBS     r0,r5,r0
000034  b284              UXTH     r4,r0
000036  e006              B        |L4.70|
                  |L4.56|
;;;181    		}
;;;182    		else {
;;;183    			IR_PluseSub = 0xffff - IR_LastPluse + IR_ThisPluse;
000038  484d              LDR      r0,|L4.368|
00003a  8800              LDRH     r0,[r0,#0]  ; IR_LastPluse
00003c  f64f71ff          MOV      r1,#0xffff
000040  1a08              SUBS     r0,r1,r0
000042  4428              ADD      r0,r0,r5
000044  b284              UXTH     r4,r0
                  |L4.70|
;;;184    		}
;;;185    		
;;;186    		IR_LastPluse = IR_ThisPluse;
000046  484a              LDR      r0,|L4.368|
000048  8005              STRH     r5,[r0,#0]
;;;187    		IR_PluseCnt++;
00004a  484a              LDR      r0,|L4.372|
00004c  7800              LDRB     r0,[r0,#0]  ; IR_PluseCnt
00004e  1c40              ADDS     r0,r0,#1
000050  4948              LDR      r1,|L4.372|
000052  7008              STRB     r0,[r1,#0]
;;;188    		
;;;189    		if ( IR_PluseCnt == 2 )
000054  4608              MOV      r0,r1
000056  7800              LDRB     r0,[r0,#0]  ; IR_PluseCnt
000058  2802              CMP      r0,#2
00005a  d10a              BNE      |L4.114|
;;;190    		{
;;;191    			if (( IR_PluseSub > 5000 ) && ( IR_PluseSub < 8000 ))
00005c  f2413088          MOV      r0,#0x1388
000060  4284              CMP      r4,r0
000062  dd62              BLE      |L4.298|
000064  f5b45ffa          CMP      r4,#0x1f40
000068  da5f              BGE      |L4.298|
;;;192    			{
;;;193    				IR_Sta = 0x01;
00006a  2001              MOVS     r0,#1
00006c  4942              LDR      r1,|L4.376|
00006e  7008              STRB     r0,[r1,#0]
                  |L4.112|
000070  e05b              B        |L4.298|
                  |L4.114|
;;;194    			}
;;;195    		}
;;;196    		else if ( IR_Sta & 0x01 )	// 如果引导成功，开始接码
000072  4841              LDR      r0,|L4.376|
000074  7800              LDRB     r0,[r0,#0]  ; IR_Sta
000076  f0000001          AND      r0,r0,#1
00007a  b358              CBZ      r0,|L4.212|
;;;197    		{
;;;198    			if (( IR_PluseSub < 450 ) || ( IR_PluseSub > 1300 ))
00007c  f5b47fe1          CMP      r4,#0x1c2
000080  db03              BLT      |L4.138|
000082  f2405014          MOV      r0,#0x514
000086  4284              CMP      r4,r0
000088  dd07              BLE      |L4.154|
                  |L4.138|
;;;199    			{
;;;200    				IR_Sta      = 0;
00008a  2000              MOVS     r0,#0
00008c  493a              LDR      r1,|L4.376|
00008e  7008              STRB     r0,[r1,#0]
;;;201    				IR_PluseCnt = 0;
000090  4938              LDR      r1,|L4.372|
000092  7008              STRB     r0,[r1,#0]
;;;202    				IR_Code     = 0;
000094  4939              LDR      r1,|L4.380|
000096  6008              STR      r0,[r1,#0]  ; IR_Code
000098  e047              B        |L4.298|
                  |L4.154|
;;;203    			}
;;;204    			else
;;;205    			{
;;;206    				IR_Code <<= 1;
00009a  4838              LDR      r0,|L4.380|
00009c  6800              LDR      r0,[r0,#0]  ; IR_Code
00009e  0040              LSLS     r0,r0,#1
0000a0  4936              LDR      r1,|L4.380|
0000a2  6008              STR      r0,[r1,#0]  ; IR_Code
;;;207    				if (( IR_PluseSub > 900 ) && ( IR_PluseSub < 1300 ))
0000a4  f5b47f61          CMP      r4,#0x384
0000a8  dd08              BLE      |L4.188|
0000aa  f2405014          MOV      r0,#0x514
0000ae  4284              CMP      r4,r0
0000b0  da04              BGE      |L4.188|
;;;208    				{
;;;209    					IR_Code |= 0x01;
0000b2  4608              MOV      r0,r1
0000b4  6800              LDR      r0,[r0,#0]  ; IR_Code
0000b6  f0400001          ORR      r0,r0,#1
0000ba  6008              STR      r0,[r1,#0]  ; IR_Code
                  |L4.188|
;;;210    				}
;;;211    				if ( IR_PluseCnt == 34 )
0000bc  482d              LDR      r0,|L4.372|
0000be  7800              LDRB     r0,[r0,#0]  ; IR_PluseCnt
0000c0  2822              CMP      r0,#0x22
0000c2  d132              BNE      |L4.298|
;;;212    				{
;;;213    					IR_Key = IR_Code;
0000c4  482d              LDR      r0,|L4.380|
0000c6  6800              LDR      r0,[r0,#0]  ; IR_Code
0000c8  492d              LDR      r1,|L4.384|
0000ca  6008              STR      r0,[r1,#0]  ; IR_Key
;;;214    					IR_Sta = 0x02;
0000cc  2002              MOVS     r0,#2
0000ce  492a              LDR      r1,|L4.376|
0000d0  7008              STRB     r0,[r1,#0]
0000d2  e02a              B        |L4.298|
                  |L4.212|
;;;215    				//	printf( "IR Down is : 0x%8x\n\n", IR_Key );
;;;216    				}
;;;217    			}
;;;218    		}
;;;219    		else if ( IR_Sta & 0x02 )
0000d4  4828              LDR      r0,|L4.376|
0000d6  7800              LDRB     r0,[r0,#0]  ; IR_Sta
0000d8  f0000002          AND      r0,r0,#2
0000dc  b328              CBZ      r0,|L4.298|
;;;220    		{
;;;221    			switch ( IR_PluseCnt )
0000de  4825              LDR      r0,|L4.372|
0000e0  7800              LDRB     r0,[r0,#0]  ; IR_PluseCnt
0000e2  2823              CMP      r0,#0x23
0000e4  d002              BEQ      |L4.236|
0000e6  2824              CMP      r0,#0x24
0000e8  d11e              BNE      |L4.296|
0000ea  e00d              B        |L4.264|
                  |L4.236|
;;;222    			{
;;;223    				case 35:
;;;224    				{
;;;225    					if ( ( IR_PluseSub < 4500 ) || ( IR_PluseSub > 7000 ) )
0000ec  f2411094          MOV      r0,#0x1194
0000f0  4284              CMP      r4,r0
0000f2  db03              BLT      |L4.252|
0000f4  f6413058          MOV      r0,#0x1b58
0000f8  4284              CMP      r4,r0
0000fa  dd04              BLE      |L4.262|
                  |L4.252|
;;;226    					{
;;;227    						IR_PluseCnt--;
0000fc  481d              LDR      r0,|L4.372|
0000fe  7800              LDRB     r0,[r0,#0]  ; IR_PluseCnt
000100  1e40              SUBS     r0,r0,#1
000102  491c              LDR      r1,|L4.372|
000104  7008              STRB     r0,[r1,#0]
                  |L4.262|
;;;228    					}
;;;229    					break;
000106  e00f              B        |L4.296|
                  |L4.264|
;;;230    				}
;;;231    				case 36:
;;;232    				{
;;;233    					IR_PluseCnt = 34;
000108  2022              MOVS     r0,#0x22
00010a  491a              LDR      r1,|L4.372|
00010c  7008              STRB     r0,[r1,#0]
;;;234    					if ( ( IR_PluseSub > 45000) && ( IR_PluseSub < 60000 ) )
00010e  f64a70c8          MOV      r0,#0xafc8
000112  4284              CMP      r4,r0
000114  dd07              BLE      |L4.294|
000116  f64e2060          MOV      r0,#0xea60
00011a  4284              CMP      r4,r0
00011c  da03              BGE      |L4.294|
;;;235    					{	
;;;236    						IR_Key = IR_Code;
00011e  4817              LDR      r0,|L4.380|
000120  6800              LDR      r0,[r0,#0]  ; IR_Code
000122  4917              LDR      r1,|L4.384|
000124  6008              STR      r0,[r1,#0]  ; IR_Key
                  |L4.294|
;;;237    						//printf( "IR continue is : 0x%8x\n\n", IR_Key );
;;;238    					}
;;;239    					break;
000126  bf00              NOP      
                  |L4.296|
000128  bf00              NOP                            ;229
                  |L4.298|
;;;240    				}
;;;241    			}
;;;242    		}
;;;243    	}
;;;244    	
;;;245    	if ( TIM_GetITStatus( TIM2, TIM_IT_Update ) == SET )
00012a  2101              MOVS     r1,#1
00012c  0788              LSLS     r0,r1,#30
00012e  f7fffffe          BL       TIM_GetITStatus
000132  2801              CMP      r0,#1
000134  d119              BNE      |L4.362|
;;;246    	{
;;;247    		TIM_ClearFlag( TIM2, TIM_IT_Update );	
000136  2101              MOVS     r1,#1
000138  0780              LSLS     r0,r0,#30
00013a  f7fffffe          BL       TIM_ClearFlag
;;;248    		if ( GPIO_ReadInputDataBit( GPIOA, GPIO_Pin_1 ) == SET )
00013e  2102              MOVS     r1,#2
000140  4810              LDR      r0,|L4.388|
000142  f7fffffe          BL       GPIO_ReadInputDataBit
000146  2801              CMP      r0,#1
000148  d10f              BNE      |L4.362|
;;;249    		{
;;;250    			IR_Up++;
00014a  4808              LDR      r0,|L4.364|
00014c  7800              LDRB     r0,[r0,#0]  ; IR_Up
00014e  1c40              ADDS     r0,r0,#1
000150  4906              LDR      r1,|L4.364|
000152  7008              STRB     r0,[r1,#0]
;;;251    			if ( IR_Up >= 2 )
000154  4608              MOV      r0,r1
000156  7800              LDRB     r0,[r0,#0]  ; IR_Up
000158  2802              CMP      r0,#2
00015a  db06              BLT      |L4.362|
;;;252    			{
;;;253    				IR_Code     = 0;
00015c  2000              MOVS     r0,#0
00015e  4907              LDR      r1,|L4.380|
000160  6008              STR      r0,[r1,#0]  ; IR_Code
;;;254    				IR_Sta      = 0;
000162  4905              LDR      r1,|L4.376|
000164  7008              STRB     r0,[r1,#0]
;;;255    				IR_PluseCnt = 0;
000166  4903              LDR      r1,|L4.372|
000168  7008              STRB     r0,[r1,#0]
                  |L4.362|
;;;256    			}
;;;257    		}
;;;258    	} 
;;;259    }
00016a  bd70              POP      {r4-r6,pc}
;;;260    void Remote_check(void){
                          ENDP

                  |L4.364|
                          DCD      IR_Up
                  |L4.368|
                          DCD      IR_LastPluse
                  |L4.372|
                          DCD      IR_PluseCnt
                  |L4.376|
                          DCD      IR_Sta
                  |L4.380|
                          DCD      IR_Code
                  |L4.384|
                          DCD      IR_Key
                  |L4.388|
                          DCD      0x40010800

                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM5_IRQHandler PROC
;;;61     //定时器5中断服务程序	 
;;;62     void TIM5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;63     { 		    	 
;;;64         if(TIM_GetITStatus(TIM5,TIM_IT_Update)!=RESET)
000002  2101              MOVS     r1,#1
000004  485e              LDR      r0,|L5.384|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b1f8              CBZ      r0,|L5.76|
;;;65     	{
;;;66     		if(RmtSta&0x80)//上次有数据被接收到了
00000c  485d              LDR      r0,|L5.388|
00000e  7800              LDRB     r0,[r0,#0]  ; RmtSta
000010  f0000080          AND      r0,r0,#0x80
000014  b1d0              CBZ      r0,|L5.76|
;;;67     		{	
;;;68     			RmtSta&=~0X10;						//取消上升沿已经被捕获标记
000016  485b              LDR      r0,|L5.388|
000018  7800              LDRB     r0,[r0,#0]  ; RmtSta
00001a  f0200010          BIC      r0,r0,#0x10
00001e  4959              LDR      r1,|L5.388|
000020  7008              STRB     r0,[r1,#0]
;;;69     			if((RmtSta&0X0F)==0X00)RmtSta|=1<<6;//标记已经完成一次按键的键值信息采集
000022  4608              MOV      r0,r1
000024  7800              LDRB     r0,[r0,#0]  ; RmtSta
000026  f000000f          AND      r0,r0,#0xf
00002a  b920              CBNZ     r0,|L5.54|
00002c  4608              MOV      r0,r1
00002e  7800              LDRB     r0,[r0,#0]  ; RmtSta
000030  f0400040          ORR      r0,r0,#0x40
000034  7008              STRB     r0,[r1,#0]
                  |L5.54|
;;;70     			if((RmtSta&0X0F)<14)RmtSta++;
000036  4853              LDR      r0,|L5.388|
000038  7800              LDRB     r0,[r0,#0]  ; RmtSta
00003a  f000000f          AND      r0,r0,#0xf
00003e  280e              CMP      r0,#0xe
000040  da05              BGE      |L5.78|
000042  4850              LDR      r0,|L5.388|
000044  7800              LDRB     r0,[r0,#0]  ; RmtSta
000046  1c40              ADDS     r0,r0,#1
000048  494e              LDR      r1,|L5.388|
00004a  7008              STRB     r0,[r1,#0]
                  |L5.76|
00004c  e00a              B        |L5.100|
                  |L5.78|
;;;71     			else
;;;72     			{
;;;73     				RmtSta&=~(1<<7);//清空引导标识
00004e  484d              LDR      r0,|L5.388|
000050  7800              LDRB     r0,[r0,#0]  ; RmtSta
000052  f0200080          BIC      r0,r0,#0x80
000056  494b              LDR      r1,|L5.388|
000058  7008              STRB     r0,[r1,#0]
;;;74     				RmtSta&=0XF0;	//清空计数器	
00005a  4608              MOV      r0,r1
00005c  7800              LDRB     r0,[r0,#0]  ; RmtSta
00005e  f00000f0          AND      r0,r0,#0xf0
000062  7008              STRB     r0,[r1,#0]
                  |L5.100|
;;;75     			}						 	   	
;;;76     		}							    
;;;77     	}
;;;78      	if(TIM_GetITStatus(TIM5,TIM_IT_CC2)!=RESET)
000064  2104              MOVS     r1,#4
000066  4846              LDR      r0,|L5.384|
000068  f7fffffe          BL       TIM_GetITStatus
00006c  2800              CMP      r0,#0
00006e  d010              BEQ      |L5.146|
;;;79     	{	  
;;;80     		if(RDATA)//上升沿捕获
000070  4845              LDR      r0,|L5.392|
000072  6800              LDR      r0,[r0,#0]
000074  b170              CBZ      r0,|L5.148|
;;;81     		{
;;;82     
;;;83     			TIM_OC2PolarityConfig(TIM5,TIM_ICPolarity_Falling);		//CC1P=1 设置为下降沿捕获				
000076  2102              MOVS     r1,#2
000078  4841              LDR      r0,|L5.384|
00007a  f7fffffe          BL       TIM_OC2PolarityConfig
;;;84     	    	TIM_SetCounter(TIM5,0);	   	//清空定时器值
00007e  2100              MOVS     r1,#0
000080  483f              LDR      r0,|L5.384|
000082  f7fffffe          BL       TIM_SetCounter
;;;85     			RmtSta|=0X10;					//标记上升沿已经被捕获
000086  483f              LDR      r0,|L5.388|
000088  7800              LDRB     r0,[r0,#0]  ; RmtSta
00008a  f0400010          ORR      r0,r0,#0x10
00008e  493d              LDR      r1,|L5.388|
000090  7008              STRB     r0,[r1,#0]
                  |L5.146|
000092  e070              B        |L5.374|
                  |L5.148|
;;;86     		}else //下降沿捕获
;;;87     		{			
;;;88       			 Dval=TIM_GetCapture2(TIM5);//读取CCR1也可以清CC1IF标志位
000094  483a              LDR      r0,|L5.384|
000096  f7fffffe          BL       TIM_GetCapture2
00009a  493c              LDR      r1,|L5.396|
00009c  8008              STRH     r0,[r1,#0]
;;;89     			 TIM_OC2PolarityConfig(TIM5,TIM_ICPolarity_Rising); //CC4P=0	设置为上升沿捕获
00009e  2100              MOVS     r1,#0
0000a0  4837              LDR      r0,|L5.384|
0000a2  f7fffffe          BL       TIM_OC2PolarityConfig
;;;90      			
;;;91     			if(RmtSta&0X10)					//完成一次高电平捕获 
0000a6  4837              LDR      r0,|L5.388|
0000a8  7800              LDRB     r0,[r0,#0]  ; RmtSta
0000aa  f0000010          AND      r0,r0,#0x10
0000ae  2800              CMP      r0,#0
0000b0  d05b              BEQ      |L5.362|
;;;92     			{
;;;93      				if(RmtSta&0X80)//接收到了引导码
0000b2  4834              LDR      r0,|L5.388|
0000b4  7800              LDRB     r0,[r0,#0]  ; RmtSta
0000b6  f0000080          AND      r0,r0,#0x80
0000ba  b3e8              CBZ      r0,|L5.312|
;;;94     				{
;;;95     					
;;;96     					if(Dval>300&&Dval<800)			//560为标准值,560us
0000bc  4833              LDR      r0,|L5.396|
0000be  8800              LDRH     r0,[r0,#0]  ; Dval
0000c0  f5b07f96          CMP      r0,#0x12c
0000c4  dd0d              BLE      |L5.226|
0000c6  4831              LDR      r0,|L5.396|
0000c8  8800              LDRH     r0,[r0,#0]  ; Dval
0000ca  f5b07f48          CMP      r0,#0x320
0000ce  da08              BGE      |L5.226|
;;;97     					{
;;;98     						RmtRec<<=1;	//左移一位.
0000d0  482f              LDR      r0,|L5.400|
0000d2  6800              LDR      r0,[r0,#0]  ; RmtRec
0000d4  0040              LSLS     r0,r0,#1
0000d6  492e              LDR      r1,|L5.400|
0000d8  6008              STR      r0,[r1,#0]  ; RmtRec
;;;99     						RmtRec|=0;	//接收到0	   
0000da  4608              MOV      r0,r1
0000dc  6800              LDR      r0,[r0,#0]  ; RmtRec
0000de  6008              STR      r0,[r1,#0]  ; RmtRec
0000e0  e043              B        |L5.362|
                  |L5.226|
;;;100    					}else if(Dval>1400&&Dval<1800)	//1680为标准值,1680us
0000e2  482a              LDR      r0,|L5.396|
0000e4  8800              LDRH     r0,[r0,#0]  ; Dval
0000e6  f5b06faf          CMP      r0,#0x578
0000ea  dd0f              BLE      |L5.268|
0000ec  4827              LDR      r0,|L5.396|
0000ee  8800              LDRH     r0,[r0,#0]  ; Dval
0000f0  f5b06fe1          CMP      r0,#0x708
0000f4  da0a              BGE      |L5.268|
;;;101    					{
;;;102    						RmtRec<<=1;	//左移一位.
0000f6  4826              LDR      r0,|L5.400|
0000f8  6800              LDR      r0,[r0,#0]  ; RmtRec
0000fa  0040              LSLS     r0,r0,#1
0000fc  4924              LDR      r1,|L5.400|
0000fe  6008              STR      r0,[r1,#0]  ; RmtRec
;;;103    						RmtRec|=1;	//接收到1
000100  4608              MOV      r0,r1
000102  6800              LDR      r0,[r0,#0]  ; RmtRec
000104  f0400001          ORR      r0,r0,#1
000108  6008              STR      r0,[r1,#0]  ; RmtRec
00010a  e02e              B        |L5.362|
                  |L5.268|
;;;104    					}else if(Dval>2200&&Dval<2600)	//得到按键键值增加的信息 2500为标准值2.5ms
00010c  481f              LDR      r0,|L5.396|
00010e  8800              LDRH     r0,[r0,#0]  ; Dval
000110  f6400198          MOV      r1,#0x898
000114  4288              CMP      r0,r1
000116  dd28              BLE      |L5.362|
000118  481c              LDR      r0,|L5.396|
00011a  8800              LDRH     r0,[r0,#0]  ; Dval
00011c  f6402128          MOV      r1,#0xa28
000120  4288              CMP      r0,r1
000122  da22              BGE      |L5.362|
;;;105    					{
;;;106    						RmtCnt++; 		//按键次数增加1次
000124  481b              LDR      r0,|L5.404|
000126  7800              LDRB     r0,[r0,#0]  ; RmtCnt
000128  1c40              ADDS     r0,r0,#1
00012a  491a              LDR      r1,|L5.404|
00012c  7008              STRB     r0,[r1,#0]
;;;107    						RmtSta&=0XF0;	//清空计时器		
00012e  4815              LDR      r0,|L5.388|
000130  7800              LDRB     r0,[r0,#0]  ; RmtSta
000132  f00000f0          AND      r0,r0,#0xf0
000136  e000              B        |L5.314|
                  |L5.312|
000138  e002              B        |L5.320|
                  |L5.314|
00013a  4912              LDR      r1,|L5.388|
00013c  7008              STRB     r0,[r1,#0]
00013e  e014              B        |L5.362|
                  |L5.320|
;;;108    					}
;;;109     				}else if(Dval>4200&&Dval<4700)		//4500为标准值4.5ms
000140  4812              LDR      r0,|L5.396|
000142  8800              LDRH     r0,[r0,#0]  ; Dval
000144  f2410168          MOV      r1,#0x1068
000148  4288              CMP      r0,r1
00014a  dd0e              BLE      |L5.362|
00014c  480f              LDR      r0,|L5.396|
00014e  8800              LDRH     r0,[r0,#0]  ; Dval
000150  f241215c          MOV      r1,#0x125c
000154  4288              CMP      r0,r1
000156  da08              BGE      |L5.362|
;;;110    				{
;;;111    					RmtSta|=1<<7;	//标记成功接收到了引导码
000158  480a              LDR      r0,|L5.388|
00015a  7800              LDRB     r0,[r0,#0]  ; RmtSta
00015c  f0400080          ORR      r0,r0,#0x80
000160  4908              LDR      r1,|L5.388|
000162  7008              STRB     r0,[r1,#0]
;;;112    					RmtCnt=0;		//清除按键次数计数器
000164  2000              MOVS     r0,#0
000166  490b              LDR      r1,|L5.404|
000168  7008              STRB     r0,[r1,#0]
                  |L5.362|
;;;113    				}						 
;;;114    			}
;;;115    			RmtSta&=~(1<<4);
00016a  4806              LDR      r0,|L5.388|
00016c  7800              LDRB     r0,[r0,#0]  ; RmtSta
00016e  f0200010          BIC      r0,r0,#0x10
000172  4904              LDR      r1,|L5.388|
000174  7008              STRB     r0,[r1,#0]
                  |L5.374|
;;;116    		}				 		     	    					   
;;;117    	}
;;;118     TIM_ClearFlag(TIM5,TIM_IT_Update|TIM_IT_CC2);	    
000176  2105              MOVS     r1,#5
000178  4801              LDR      r0,|L5.384|
00017a  f7fffffe          BL       TIM_ClearFlag
;;;119    }
00017e  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L5.384|
                          DCD      0x40000c00
                  |L5.388|
                          DCD      RmtSta
                  |L5.392|
                          DCD      0x42210104
                  |L5.396|
                          DCD      Dval
                  |L5.400|
                          DCD      RmtRec
                  |L5.404|
                          DCD      RmtCnt

                          AREA ||.data||, DATA, ALIGN=2

                  IR_Key
                          DCD      0x00000000
                  ||str||
                          DCD      0x00000000
                  RmtSta
000008  0000              DCB      0x00,0x00
                  Dval
00000a  0000              DCB      0x00,0x00
                  RmtRec
                          DCD      0x00000000
                  RmtCnt
000010  0000              DCB      0x00,0x00
                  IR_LastPluse
000012  0000              DCW      0x0000
                  IR_Sta
000014  00000000          DCB      0x00,0x00,0x00,0x00
                  IR_Code
                          DCD      0x00000000
                  IR_PluseCnt
00001c  00                DCB      0x00
                  IR_Up
00001d  00                DCB      0x00
